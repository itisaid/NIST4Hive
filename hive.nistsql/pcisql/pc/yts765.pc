/*  EMBEDDED C (file "YTS765.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS765.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  Access to TABLE_CONSTRAINTS view                             */
/*  a) Explicit table constraints in TABLE_CONSTRAINTS view      */
/*  b) Column constraints in TABLE_CONSTRAINTS view              */
/*  c) Unique identification in TABLE_CONSTRAINTS view           */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    21.2.13  TABLE_CONSTRAINTS view                            */
/*    21.3.13  TABLE_CONSTRAINTS base table                      */
/*    F#33     Constraint tables                                 */
/*    F#2      Basic information schema                          */
/*                                                               */
/*  a) 11.6 SR.1 <table constraint definition>                   */
/*     11.6 GR.2                                                 */
/*     11.7     <unique constraint definition>                   */
/*     11.8     <referential constraint definition>              */
/*     11.9     <check constraint definition>                    */
/*                                                               */
/*  b) 11.4     <column definition>                              */
/*     11.4 SR.9                                                 */
/*     11.7     <unique constraint definition>                   */
/*     11.8     <referential constraint definition>              */
/*     11.9     <check constraint definition>                    */
/*                                                               */
/* c)  10.6     <constraint name definition> and                 */
/*              <constraint attributes>                          */
/*     10.6 SR.2                                                 */
/*     11.6 SR.2                                                 */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*  6th December 1995. Derived table replaced as requires FULL   */
/*  SQL.                                                         */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-08                                    */
/*    Added rollback after authid                                */
/*    Fixed identifiers in info schem                            */
/*    More output                                                */
/*    Removed EXEC SQL from inside printf                        */
/*    Fixed syntax error                                         */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char consch[129];
char tabsch[129];
char isdef[129];
short co;
short co2;
char init[129];
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
short    i;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts765.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7537 ********************/
flag = 1;

     printf("                  TEST7537 \n");
     printf("   Explicit table constrnts in TABLE_CONSTRAINTS view\n");
     printf("References:\n");
     printf("    21.2.13  TABLE_CONSTRAINTS view\n");
     printf("    21.3.13  TABLE_CONSTRAINTS base table\n");
     printf("    F#33     Constraint tables\n");
     printf("    F#2      Basic information schema\n");
     printf("    11.6 SR.1 <table constraint definition>\n");
     printf("    11.6 GR.2\n");
     printf("    11.7     <unique constraint definition>\n");
     printf("    11.8     <referential constraint definition>\n");
     printf("    11.9     <check constraint definition>\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* initialise host vars */
 for (i = 0; i < 128; i++)
   {
     consch[i] = 'o';
     tabsch[i] = 'o';
     isdef[i] = 'o';
     init[i] = 'o';
   }

     consch[128] = '\0';
     tabsch[128] = '\0';
     isdef[128] = '\0';
     init[128] = '\0';

printf("SELECT CONSTRAINT_SCHEMA, TABLE_SCHEMA, IS_DEFERRABLE,\n");
printf("INITIALLY_DEFERRED INTO :consch, :tabsch, :isdef,:init\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_NAME = 'WORKS3A' AND\n");
printf("CONSTRAINT_TYPE = 'FOREIGN KEY';\n");
EXEC SQL SELECT CONSTRAINT_SCHEMA, TABLE_SCHEMA,
IS_DEFERRABLE, INITIALLY_DEFERRED 
INTO :consch, :tabsch, :isdef, :init
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
WHERE TABLE_NAME = 'WORKS3A' AND 
CONSTRAINT_TYPE = 'FOREIGN KEY';
CHCKOK ();
printf ("consch is %s\n", consch);
printf ("tabsch should be CTS1; its value is %s\n", tabsch);
if (strncmp (tabsch, "CTS1", 4) != 0)
  flag = 0;
printf ("init should be NO; its value is %s\n", init);
if (strncmp (init, "NO", 2) != 0)
  flag = 0;
printf ("isdef should be NO; its value is %s\n\n", isdef);
if (strncmp (isdef, "NO", 2) != 0)
  flag = 0;

/* check reference to UNIQUE constraint */

/* initialise host vars */
 for (i = 0; i < 128; i++)  
    { 
      consch[i] = 'o'; 
      tabsch[i] = 'o'; 
      isdef[i] = 'o'; 
      init[i] = 'o'; 
    } 

     consch[128] = '\0';
     tabsch[128] = '\0';
     isdef[128] = '\0';
     init[128] = '\0';

printf("SELECT CONSTRAINT_SCHEMA, TABLE_SCHEMA, IS_DEFERRABLE,\n");
printf("INITIALLY_DEFERRED INTO :consch, :tabsch, :isdef,:init\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_NAME = 'WORKS' AND CONSTRAINT_TYPE = 'UNIQUE';\n");
EXEC SQL SELECT CONSTRAINT_SCHEMA, TABLE_SCHEMA, 
IS_DEFERRABLE, INITIALLY_DEFERRED 
INTO :consch, :tabsch, :isdef, :init
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
WHERE TABLE_NAME = 'WORKS' AND CONSTRAINT_TYPE = 'UNIQUE';
CHCKOK ();
printf ("consch is %s\n", consch);
printf ("tabsch should be CTS1; its value is %s\n", tabsch);
if (strncmp (tabsch, "CTS1", 4) != 0)
  flag = 0;
printf ("init should be NO; its value is %s\n", init);
if (strncmp (init, "NO", 2) != 0)
  flag = 0;
printf ("isdef should be NO; its value is %s\n\n", isdef);
if (strncmp (isdef, "NO", 2) != 0)
  flag = 0;

/* check references to 'PRIMARY KEY' constraint */

/* initialise host vars */
 for (i = 0; i < 128; i++)  
    { 
      consch[i] = 'o'; 
      tabsch[i] = 'o'; 
      isdef[i] = 'o'; 
      init[i] = 'o'; 
    } 

     consch[128] = '\0';
     tabsch[128] = '\0';
     isdef[128] = '\0';
     init[128] = '\0';

printf("SELECT CONSTRAINT_SCHEMA, TABLE_SCHEMA, IS_DEFERRABLE,\n");
printf("INITIALLY_DEFERRED INTO :consch, :tabsch, :isdef,:init\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_NAME = 'STAFF7' AND\n");
printf("CONSTRAINT_TYPE = 'PRIMARY KEY';\n");
EXEC SQL SELECT CONSTRAINT_SCHEMA, TABLE_SCHEMA, 
IS_DEFERRABLE, INITIALLY_DEFERRED 
INTO :consch, :tabsch, :isdef, :init
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
WHERE TABLE_NAME = 'STAFF7' AND CONSTRAINT_TYPE = 'PRIMARY KEY';
CHCKOK ();
printf ("consch is %s\n", consch);
printf ("tabsch should be CTS1; its value is %s\n", tabsch);
if (strncmp (tabsch, "CTS1", 4) != 0)
  flag = 0;
printf ("init should be NO; its value is %s\n", init);
if (strncmp (init, "NO", 2) != 0)
  flag = 0;
printf ("isdef should be NO; its value is %s\n\n", isdef);
if (strncmp (isdef, "NO", 2) != 0)
  flag = 0;

/* check references to CHECK constraint */

/* initialise host vars */
 for (i = 0; i < 128; i++)  
    { 
      consch[i] = 'o'; 
      tabsch[i] = 'o'; 
      isdef[i] = 'o'; 
      init[i] = 'o'; 
    } 

     consch[128] = '\0';
     tabsch[128] = '\0';
     isdef[128] = '\0';
     init[128] = '\0';


printf("SELECT CONSTRAINT_SCHEMA, TABLE_SCHEMA, IS_DEFERRABLE,\n");
printf("INITIALLY_DEFERRED INTO :consch, :tabsch, :isdef,:init\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_NAME = 'STAFF7' AND CONSTRAINT_TYPE = 'CHECK';\n");
EXEC SQL SELECT CONSTRAINT_SCHEMA, TABLE_SCHEMA,
IS_DEFERRABLE, INITIALLY_DEFERRED 
INTO :consch, :tabsch, :isdef, :init
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
WHERE TABLE_NAME = 'STAFF7' AND CONSTRAINT_TYPE = 'CHECK';
CHCKOK ();
printf ("consch is %s\n", consch);
printf ("tabsch should be CTS1; its value is %s\n", tabsch);
if (strncmp (tabsch, "CTS1", 4) != 0)
  flag = 0;
printf ("init should be NO; its value is %s\n", init);
if (strncmp (init, "NO", 2) != 0)
  flag = 0;
printf ("isdef should be NO; its value is %s\n\n", isdef);
if (strncmp (isdef, "NO", 2) != 0)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts765.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7537','pass','PC');
       }
     else
       {
          printf("\n\n       yts765.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7537','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7537 *********************/

/******************** BEGIN TEST7538 ********************/
flag = 1;

     printf("                  TEST7538 \n");
     printf("   Column constraints in TABLE_CONSTRAINTS view\n");
     printf("References:\n");
     printf("    21.2.13  TABLE_CONSTRAINTS view\n");
     printf("    21.3.13  TABLE_CONSTRAINTS base table\n");
     printf("    F#33     Constraint tables\n");
     printf("    F#2      Basic information schema\n");
     printf("    11.4    <column definition>\n");
     printf("    11.4 SR.9\n");
     printf("    11.7    <unique constraint definition>\n");
     printf("    11.8    <referential constraint definition>\n");
     printf("    11.9    check constraint definition>\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* check references to CHECK column constraint */

/* initialise host vars */
 for (i = 0; i < 128; i++)  
    { 
      consch[i] = 'o'; 
      tabsch[i] = 'o'; 
      isdef[i] = 'o'; 
      init[i] = 'o'; 
    } 

     consch[128] = '\0';
     tabsch[128] = '\0';
     isdef[128] = '\0';
     init[128] = '\0';


printf("SELECT CONSTRAINT_SCHEMA, TABLE_SCHEMA, IS_DEFERRABLE,\n");
printf("INITIALLY_DEFERRED INTO :consch, :tabsch, :isdef,:init\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_NAME = 'STAFF1' AND\n");
printf("CONSTRAINT_TYPE = 'CHECK';\n");
EXEC SQL SELECT CONSTRAINT_SCHEMA, TABLE_SCHEMA, 
IS_DEFERRABLE, INITIALLY_DEFERRED 
INTO :consch, :tabsch, :isdef, :init
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
WHERE TABLE_NAME = 'STAFF1' AND CONSTRAINT_TYPE = 'CHECK';
CHCKOK ();
printf ("consch is %s\n", consch);
printf ("tabsch should be CTS1; its value is %s\n", tabsch);
if (strncmp (tabsch, "CTS1", 4) != 0)
  flag = 0;
printf ("init should be NO; its value is %s\n", init);
if (strncmp (init, "NO", 2) != 0)
  flag = 0;
printf ("isdef should be NO; its value is %s\n\n", isdef);
if (strncmp (isdef, "NO", 2) != 0)
  flag = 0;

/* check references to UNIQUE column constraint */

/* initialise host vars */
 for (i = 0; i < 128; i++)  
    { 
      consch[i] = 'o'; 
      tabsch[i] = 'o'; 
      isdef[i] = 'o'; 
      init[i] = 'o'; 
    } 

     consch[128] = '\0';
     tabsch[128] = '\0';
     isdef[128] = '\0';
     init[128] = '\0';

printf("SELECT CONSTRAINT_SCHEMA, TABLE_SCHEMA, IS_DEFERRABLE,\n");
printf("INITIALLY_DEFERRED INTO :consch, :tabsch, :isdef,:init\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_NAME = 'STAFF' AND\n");
printf("CONSTRAINT_TYPE = 'UNIQUE';\n");
EXEC SQL SELECT CONSTRAINT_SCHEMA, TABLE_SCHEMA, 
IS_DEFERRABLE, INITIALLY_DEFERRED 
INTO :consch, :tabsch, :isdef, :init
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
WHERE TABLE_NAME = 'STAFF' AND CONSTRAINT_TYPE = 'UNIQUE';
CHCKOK ();
printf ("consch is %s\n", consch);
printf ("tabsch should be CTS1; its value is %s\n", tabsch);
if (strncmp (tabsch, "CTS1", 4) != 0)
  flag = 0;
printf ("init should be NO; its value is %s\n", init);
if (strncmp (init, "NO", 2) != 0)
  flag = 0;
printf ("isdef should be NO; its value is %s\n\n", isdef);
if (strncmp (isdef, "NO", 2) != 0)
  flag = 0;

/* check references to FOREIGN KEY column constraint */

/* initialise host vars */
 for (i = 0; i < 128; i++)  
    { 
      consch[i] = 'o'; 
      tabsch[i] = 'o'; 
      isdef[i] = 'o'; 
      init[i] = 'o'; 
    } 

     consch[128] = '\0';
     tabsch[128] = '\0';
     isdef[128] = '\0';
     init[128] = '\0';

printf("SELECT CONSTRAINT_SCHEMA, TABLE_SCHEMA, IS_DEFERRABLE,\n");
printf("INITIALLY_DEFERRED INTO :consch, :tabsch, :isdef,:init\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_NAME = 'STAFFZ' AND\n");
printf("CONSTRAINT_TYPE = 'FOREIGN KEY';\n");
EXEC SQL SELECT CONSTRAINT_SCHEMA, TABLE_SCHEMA, 
IS_DEFERRABLE, INITIALLY_DEFERRED 
INTO :consch, :tabsch, :isdef, :init
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
WHERE TABLE_NAME = 'STAFFZ' AND CONSTRAINT_TYPE = 'FOREIGN KEY';
CHCKOK ();
printf ("consch is %s\n", consch);
printf ("tabsch should be CTS1; its value is %s\n", tabsch);
if (strncmp (tabsch, "CTS1", 4) != 0)
  flag = 0;
printf ("init should be NO; its value is %s\n", init);
if (strncmp (init, "NO", 2) != 0)
  flag = 0;
printf ("isdef should be NO; its value is %s\n\n", isdef);
if (strncmp (isdef, "NO", 2) != 0)
  flag = 0;

/* check references to CHECK column constraint */

/* initialise host vars */
 for (i = 0; i < 128; i++)  
    { 
      consch[i] = 'o'; 
      tabsch[i] = 'o'; 
      isdef[i] = 'o'; 
      init[i] = 'o'; 
    } 

     consch[128] = '\0';
     tabsch[128] = '\0';
     isdef[128] = '\0';
     init[128] = '\0';


printf("SELECT CONSTRAINT_SCHEMA, TABLE_SCHEMA, IS_DEFERRABLE,\n");
printf("INITIALLY_DEFERRED INTO :consch, :tabsch, :isdef,:init\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_NAME = 'STAFFZ' AND\n");
printf("CONSTRAINT_TYPE = 'CHECK';\n");
EXEC SQL SELECT CONSTRAINT_SCHEMA, TABLE_SCHEMA,
IS_DEFERRABLE, INITIALLY_DEFERRED 
INTO :consch, :tabsch, :isdef, :init
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
WHERE TABLE_NAME = 'STAFFZ' AND CONSTRAINT_TYPE = 'CHECK';
CHCKOK ();
printf ("consch is %s\n", consch);
printf ("tabsch should be CTS1; its value is %s\n", tabsch);
if (strncmp (tabsch, "CTS1", 4) != 0)
  flag = 0;
printf ("init should be NO; its value is %s\n", init);
if (strncmp (init, "NO", 2) != 0)
  flag = 0;
printf ("isdef should be NO; its value is %s\n\n", isdef);
if (strncmp (isdef, "NO", 2) != 0)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts765.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7538','pass','PC');
       }
     else
       {
          printf("\n\n       yts765.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7538','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7538 *********************/

/******************** BEGIN TEST7539 ********************/
flag = 1;

     printf("                  TEST7539 \n");
     printf("   Unique identification in TABLE_CONSTRAINTS view\n");
     printf("References:\n");
     printf("    21.2.13  TABLE_CONSTRAINTS view\n");
     printf("    21.3.13  TABLE_CONSTRAINTS base table\n");
     printf("    F#33     Constraint tables\n");
     printf("    F#2      Basic information schema\n");
     printf("    10.6 <constraint name definition> and\n");
     printf("         <constraint attributes\n");
     printf("    10.6 SR.2\n");
     printf("    11.6 SR.2\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* determine that values in CONSTRAINT_CATALOG are not NULL */

co = 99;
printf("SELECT COUNT (*) INTO :co \n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_CATALOG IS NULL;\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE CONSTRAINT_CATALOG IS NULL;
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
  flag = 0;

/* determine that values in CONSTRAINT_SCHEMA are not NULL */

co = 99;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_SCHEMA IS NULL;\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA IS NULL;
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
  flag = 0;

/* determine that values in CONSTRAINT_NAME are not NULL */

co = 99;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_NAME IS NULL;\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE CONSTRAINT_NAME IS NULL;
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
  flag = 0;

/* determine that CONSTRAINT_CATALOG,CONSTRAINT_NAME,CONSTRAINT_SCHEMA */
/* contain a different set of values in each row */

/* initialise host variables */

co = -1;
co2 = -1;

SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS;\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS;

CHCKOK ();
printf("\n");

SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

printf("SELECT COUNT (*) INTO :co2\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS T\n");
printf("WHERE\n");
printf("UNIQUE (\n");
printf("       SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("       WHERE CONSTRAINT_CATALOG = T.CONSTRAINT_CATALOG AND\n");
printf("       CONSTRAINT_NAME = T.CONSTRAINT_NAME AND\n");
printf("       CONSTRAINT_SCHEMA = T.CONSTRAINT_SCHEMA\n");
printf("       );\n");

EXEC SQL SELECT COUNT (*) INTO :co2
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS T
WHERE
UNIQUE (
       SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
       WHERE CONSTRAINT_CATALOG = T.CONSTRAINT_CATALOG AND
       CONSTRAINT_NAME = T.CONSTRAINT_NAME AND
       CONSTRAINT_SCHEMA = T.CONSTRAINT_SCHEMA
       );

CHCKOK ();
printf("co should be equal to co2; co is %d, co2 is %d\n\n", co, co2);
if (co != co2)
   flag = 0;

printf("ROLLBACK WORK\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts765.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7539','pass','PC');
       }
     else
       {
          printf("\n\n       yts765.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7539','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7539 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


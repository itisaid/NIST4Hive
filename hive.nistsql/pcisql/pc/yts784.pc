/*  EMBEDDED C (file "YTS784.PC")  */

/* Copyright 1996 National Computing Centre Limited, */
/* and Computer Logic R&D S.A */
/* on behalf of the CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS784.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  Scroll cursor with joined table, FETCH ABS literal           */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    13.1   <declare cursor>                                    */
/*    13.3   <fetch statement>                                   */
/*    13.3   GR3a                                                */
/*    7.5    <joined table>                                      */
/*    F#43   Scrolled cursors                                    */
/*    F#4    Joined table                                        */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*  3/11/95 string initialisations corrected                     */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-19                                    */
/*    Added rollback after authid                                */
/*    Removed EXEC SQL from printf                               */
/*    Fixed printout                                             */
/*    Cleaned up                                                 */
/*    Fixed string lengths                                       */
/*    Fixed broken fetches                                       */
/*    Fixed bogus string assignments                             */
/*    Fixed syntax errors                                        */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char ename1[21];
char projn1[4];
char ename2[21];
char projn2[4];
char ename3[21];
char projn3[4];
char ename4[21];
char projn4[4];
char ename5[21];
char projn5[4];
char ename6[21];
char projn6[4];
char ename7[21];
char projn7[4];
short indic1;
short indic2;
short indic3;
short indic4;
short indic5;
short indic6;
short indic7;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;
long ncnt;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts784.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7513 ********************/
flag = 1;
ncnt = 0;

     printf("                  TEST7513 \n");
     printf("  Scr.cursor with joined table, FETCH ABS literal\n");
     printf("References:\n");
     printf("    13.1   <declare statement\n");
     printf("    13.3   <fetch statement>\n");
     printf("    13.3   GR3a\n");
     printf("    7.5    <joined table>\n");
     printf("    F#43   Scrolled cursors\n");
     printf("    F#4    Joined table\n"); 
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* Insert extra information into table */

printf("INSERT INTO STAFF (EMPNUM) VALUES ('E6');\n");
EXEC SQL INSERT INTO STAFF (EMPNUM) VALUES ('E6');
CHCKOK ();
printf("\n");

printf("INSERT INTO WORKS (EMPNUM, PNUM) VALUES ('E6', 'P6');\n");
EXEC SQL INSERT INTO WORKS (EMPNUM, PNUM) VALUES ('E6', 'P6');
CHCKOK ();
printf("\n");

/* declare cursor */

printf("DECLARE data1 SCROLL CURSOR;\n");
printf("FOR SELECT STAFF.EMPNAME, WORKS.PNUM \n");
printf("FROM STAFF LEFT OUTER JOIN WORKS USING (EMPNUM)\n");
printf("WHERE WORKS.PNUM IN ('P1','P4','P6');\n\n");
EXEC SQL DECLARE data1 SCROLL CURSOR
FOR SELECT STAFF.EMPNAME, WORKS.PNUM
FROM STAFF LEFT OUTER JOIN WORKS USING (EMPNUM)
WHERE WORKS.PNUM IN ('P1','P4','P6');

/* EMPNAME PNUM */
/* Alice    P1 */
/* Alice    P4 */
/* Alice    P6 */
/* Betty    P1 */
/* Don      P4 */
/* NULL     P6 */

/* open cursor */

printf("OPEN data1;\n");
EXEC SQL OPEN data1;
CHCKOK ();
printf("\n");

strcpy (ename1, "xxxxxxxxxxxxxxxxxxxx");
strcpy (ename2, ename1);
strcpy (ename3, ename1);
strcpy (ename4, ename1);
strcpy (ename5, ename1);
strcpy (ename6, ename1);
strcpy (projn1, "xxx");
strcpy (projn2, projn1);
strcpy (projn3, projn1);
strcpy (projn4, projn1);
strcpy (projn5, projn1);
strcpy (projn6, projn1);
indic1 = 99;
indic2 = 99;
indic3 = 99;
indic4 = 99;
indic5 = 99;
indic6 = 99;
strcpy (ename7, "xxxxxxxxxxxxxxxxxxxx");
strcpy (projn7, "xxx");
indic7 = 99;

/* fetch all rows defined by the cursor */
/* as there is no order by clause rows won't be returned in a specific order */
/* fetch first row */

printf("Fetch first row\n");
printf("FETCH data1 INTO :ename1:indic1, :projn1;\n");
EXEC SQL FETCH data1 INTO :ename1:indic1, :projn1;
CHCKOK ();
if (indic1 == -1)
{
  printf ("First column is NULL\n");
  ncnt = ncnt + 1;
}
else
{
  printf ("ename1 is %s\n", ename1);
}
printf ("projn1 is %s\n\n", projn1);

printf("Fetch second row\n");
printf("FETCH data1 INTO :ename2:indic2, :projn2;\n");
EXEC SQL FETCH data1 INTO :ename2:indic2, :projn2;
CHCKOK ();
if (indic2 == -1)
{
  printf ("First column is NULL\n");
  ncnt = ncnt + 1;
}
else
{
  printf ("ename2 is %s\n", ename2);
}
printf ("projn2 is %s\n\n", projn2);

printf("Fetch third row\n");
printf("FETCH data1 INTO :ename3:indic3, :projn3;\n");
EXEC SQL FETCH data1 INTO :ename3:indic3, :projn3;
CHCKOK ();
if (indic3 == -1)
{
  printf ("First column is NULL\n");
  ncnt = ncnt + 1;
}
else
{
  printf ("ename3 is %s\n", ename3);
}
printf ("projn3 is %s\n\n", projn3);

printf("Fetch fourth row\n");
printf("FETCH data1 INTO :ename4:indic4, :projn4;\n");
EXEC SQL FETCH data1 INTO :ename4:indic4, :projn4;
CHCKOK ();
if (indic4 == -1)
{
  printf ("First column is NULL\n");
  ncnt = ncnt + 1;
}
else
{
  printf ("ename4 is %s\n", ename4);
}
printf ("projn4 is %s\n\n", projn4);

printf("Fetch fifth row\n");
printf("FETCH data1 INTO :ename5:indic5, :projn5;\n");
EXEC SQL FETCH data1 INTO :ename5:indic5, :projn5;
CHCKOK ();
if (indic5 == -1)
{
  printf ("First column is NULL\n");
  ncnt = ncnt + 1;
}
else
{
  printf ("ename5 is %s\n", ename5);
}
printf ("projn5 is %s\n\n", projn5);

printf("Fetch sixth row\n");
printf("FETCH data1 INTO :ename6:indic6, :projn6;\n");
EXEC SQL FETCH data1 INTO :ename6:indic6, :projn6;
CHCKOK ();
if (indic6 == -1)
{
  printf ("First column is NULL\n");
  ncnt = ncnt + 1;
}
else
{
  printf ("ename6 is %s\n", ename6);
}
printf ("projn6 is %s\n\n", projn6);

printf("FETCH data1 INTO :ename7:indic7, :projn7;\n");
EXEC SQL FETCH data1 INTO :ename7:indic7, :projn7;
printf("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;
printf("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf ("\n");

printf ("First column should have been null exactly once;\n");
printf ("Count is %ld.\n\n", ncnt);
if (ncnt != 1)
  flag = 0;

/* fetch ABSOLUTE 2 data1 */

strcpy (ename7, "xxxxxxxxxxxxxxxxxxxx");
strcpy (projn7, "xxx");
indic7 = 99;
printf("FETCH ABSOLUTE 2 FROM data1 INTO :ename7:indic7, :projn7;\n");
EXEC SQL FETCH ABSOLUTE 2 FROM data1 INTO :ename7:indic7, :projn7;
CHCKOK ();
if (indic2 == -1)
{
  printf ("indic7 should be -1; its value is %d\n", indic7);
  if (indic7 != -1)
    flag = 0;
}
else
{
  printf ("ename7 should be %s; its value is %s\n", ename2, ename7);
  if (strcmp (ename7, ename2) != 0)
    flag = 0;
}
printf ("projn7 should be %s; its value is %s\n\n", projn2, projn7);
if (strcmp (projn7, projn2) != 0)
  flag = 0;

/* fetch ABSOLUTE 4 data1 */

strcpy (ename7, "xxxxxxxxxxxxxxxxxxxx");
strcpy (projn7, "xxx");
indic7 = 99;
printf("FETCH ABSOLUTE 4 FROM data1 INTO :ename7:indic7, :projn7;\n");
EXEC SQL FETCH ABSOLUTE 4 FROM data1 INTO :ename7:indic7, :projn7;
CHCKOK ();
if (indic4 == -1)
{
  printf ("indic7 should be -1; its value is %d\n", indic7);
  if (indic7 != -1)
    flag = 0;
}
else
{
  printf ("ename7 should be %s; its value is %s\n", ename4, ename7);
  if (strcmp (ename7, ename4) != 0)
    flag = 0;
}
printf ("projn7 should be %s; its value is %s\n\n", projn4, projn7);
if (strcmp (projn7, projn4) != 0)
  flag = 0;

/* fetch ABSOLUTE 5 data1 */

strcpy (ename7, "xxxxxxxxxxxxxxxxxxxx");
strcpy (projn7, "xxx");
indic7 = 99;
printf("FETCH ABSOLUTE 5 FROM data1 INTO :ename7:indic7, :projn7;\n");
EXEC SQL FETCH ABSOLUTE 5 FROM data1 INTO :ename7:indic7, :projn7;
CHCKOK ();
if (indic5 == -1)
{
  printf ("indic7 should be -1; its value is %d\n", indic7);
  if (indic7 != -1)
    flag = 0;
}
else
{
  printf ("ename7 should be %s; its value is %s\n", ename5, ename7);
  if (strcmp (ename7, ename5) != 0)
    flag = 0;
}
printf ("projn7 should be %s; its value is %s\n\n", projn5, projn7);
if (strcmp (projn7, projn5) != 0)
  flag = 0;

/* attempt to retreive the thirtieth row */

printf("fetch the thirtieth row - should not succeed\n");
printf("FETCH ABSOLUTE 30 FROM data1 INTO :ename7:indic7, :projn7;\n");
EXEC SQL FETCH ABSOLUTE 30 FROM data1 INTO :ename7:indic7, :projn7;

/* That should generate a no data exception */
/* which is SQLSTATE 02000 */

printf("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;

SQLSTATE[5] = '\0';
printf("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf ("\n");

/* close cursor data1 */

printf("Close Cursor\n");

printf("CLOSE data1;\n");
EXEC SQL CLOSE data1;
CHCKOK ();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts784.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7513','pass','PC');
       }
     else
       {
          printf("\n\n       yts784.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7513','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");


     EXEC SQL COMMIT WORK;
/******************** END TEST7513 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


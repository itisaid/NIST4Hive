/*  EMBEDDED C (file "YTS750.PC")  */

/* Copyright 1996 National Computing Centre Limited, */
/* and Computer Logic R&D S.A */
/* on behalf of the CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS750.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  CREATE DOMAIN as SQL procedure statement, no options         */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    11.21    SR.1                                              */
/*    11.21    GR.3                                              */
/*    21.2.5   DOMAINS view                                      */
/*    F#25     Domain definition                                 */
/*    F#3      Basic schema manipulation                         */
/*    F#2      Basic information schema                          */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-02-29                                    */
/*    Added columns specified in TC2                             */
/*    Fixed initializations                                      */
/*    Fixed indicator names                                      */
/*    Tightened pass criteria                                    */
/*    Upcased info schem identifier                              */
/*    Removed EXEC SQL from inside printfs                       */
/*    Removed superfluous code                                   */
/*    Fixed off-by-one                                           */
/*    Cleanups                                                   */
/*    Added rollback after authid                                */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
char domcat[129]; 
char dtype[30];  
long cnum;       
long olen;       
char colcat[129]; 
char colnam[129];
char colsch[129]; 
char chrset[129]; 
char chrsch[129]; 
char chrnme[129]; 
char domdef[257];
char inttyp[129];
long numpre;     
long numrad;    
long numscl;   
long dttime;
long intpre;
short indic1;
short indic2;
short indic3;
short indic4;
short indic5;
short indic6;
short indic7;
short indic8;
short indic9;
short indica;
short indicb;
short indicc;
short indicd;
short indice;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
short i;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts750.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7500 ********************/
flag = 1;

     printf("                  TEST7500 \n");
     printf("   CREATE DOMAIN -SQL Procedure statement,no options\n");
     printf("References:\n");
     printf("    11.21   SR.1\n");
     printf("    11.21   GR.3\n");
     printf("    21.2.5  DOMAINS view\n");
     printf("    TC #2 21.2.5 -- Interval columns added\n");
     printf("    F#25    Domain definition\n");
     printf("    F#3     Basic schema manipulation\n");
     printf("    F#2     Basic information schema\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* initialise all host variables */

 for (i = 0; i < 28; i++)  
  {
      dtype[i] = 'x';   
  }
  dtype[29] = '\0';

 for (i = 0; i < 128; i++)  
   {  
    colcat[i] = 'x';       
    domcat[i] = 'x'; 
    colnam[i] = 'x';
    colsch[i] = 'x';   
    chrset[i] = 'x';
    chrsch[i] = 'x';
    chrnme[i] = 'x';
    inttyp[i] = 'x';
   }

   domcat[128] = '\0';
   colcat[128] = '\0';
   colnam[128] = '\0';
   colsch[128] = '\0';
   chrset[128] = '\0';
   chrsch[128] = '\0';
   chrnme[128] = '\0';
   inttyp[128] = '\0';

 for (i = 0; i < 256; i++) 
   {
     domdef[i] = 'x'; 
   }
 domdef[256] = '\0';

indic1 = 99;
indic2 = 99;
indic3 = 99;
indic4 = 99;
indic5 = 99;
indic6 = 99;
indic7 = 99;
indic8 = 99;
indic9 = 99;
indica = 99;
indicb = 99;
indicc = 99;
indicd = 99;
indice = 99;

printf("CREATE DOMAIN intdomain INTEGER;\n");
EXEC SQL CREATE DOMAIN intdomain INTEGER;

CHCKOK ();
printf("\n");

printf("COMMIT WORK\n");
EXEC SQL COMMIT WORK;

CHCKOK ();
printf("\n");

cnum = 99;
olen = 99;
numscl = 99;
numrad = 99;
intpre = 99;

printf("SELECT DOMAIN_CATALOG,\n");
printf("         DATA_TYPE, CHARACTER_MAXIMUM_LENGTH,\n");
printf("         CHARACTER_OCTET_LENGTH, COLLATION_CATALOG,\n");
printf("         COLLATION_SCHEMA, COLLATION_NAME,\n");
printf("         CHARACTER_SET_CATALOG, CHARACTER_SET_SCHEMA,\n");
printf("         CHARACTER_SET_NAME, NUMERIC_PRECISION,\n");
printf("         NUMERIC_PRECISION_RADIX, NUMERIC_SCALE,\n");
printf("         DATETIME_PRECISION, DOMAIN_DEFAULT,\n");
printf("         INTERVAL_TYPE, INTERVAL_PRECISION\n");
printf("         INTO :domcat:indic1, :dtype, :cnum:indic2,\n");
printf("         :olen:indic3, :colcat:indic4, :colsch:indic5,\n");
printf("         :colnam:indic6,  :chrset:indic7, :chrsch:indic8,\n");
printf("         :chrnme:indic9, :numpre:indica, :numrad,\n");
printf("         :numscl, :dttime:indicb, :domdef:indicc,\n");
printf("         :inttyp:indicd, :intpre:indice\n");
printf("         FROM INFORMATION_SCHEMA.DOMAINS\n");
printf("         WHERE DOMAIN_NAME = 'INTDOMAIN'\n");
printf("         AND DOMAIN_SCHEMA = 'CTS1';\n");
EXEC SQL SELECT DOMAIN_CATALOG,
         DATA_TYPE, CHARACTER_MAXIMUM_LENGTH,
         CHARACTER_OCTET_LENGTH, COLLATION_CATALOG,
         COLLATION_SCHEMA, COLLATION_NAME,
         CHARACTER_SET_CATALOG, CHARACTER_SET_SCHEMA,
         CHARACTER_SET_NAME, NUMERIC_PRECISION,
         NUMERIC_PRECISION_RADIX, NUMERIC_SCALE,
         DATETIME_PRECISION, DOMAIN_DEFAULT,
         INTERVAL_TYPE, INTERVAL_PRECISION
         INTO :domcat:indic1, :dtype, :cnum:indic2,
         :olen:indic3, :colcat:indic4, :colsch:indic5,
         :colnam:indic6,  :chrset:indic7, :chrsch:indic8,
         :chrnme:indic9, :numpre:indica, :numrad,
         :numscl, :dttime:indicb, :domdef:indicc,
         :inttyp:indicd, :intpre:indice
         FROM INFORMATION_SCHEMA.DOMAINS
         WHERE DOMAIN_NAME = 'INTDOMAIN'
         AND DOMAIN_SCHEMA = 'CTS1';

CHCKOK ();
printf("\n");

  printf("check value in DOMAIN_CATALOG is not NULL\n");
  if (indic1 == -1)
  {
     printf("NULL value incorrectly found for DOMAIN_CATALOG\n");
     flag = 0;
  }
  printf("\n");

  printf("check DATA_TYPE is INTEGER\n");
  if (strncmp(dtype,"INTEGER",7) != 0)
  {
     printf("Expected datatype INTEGER, found %s\n",dtype);
     flag = 0;
  }
  printf("\n");

  printf("check CHARACTER_MAXIMUM_LENGTH was NULL\n");
  if (indic2 != -1)
  {
     printf("CHARACTER_MAXIMUM_LENGTH should be null\n");
     printf("found %ld\n", cnum);
     flag = 0;
  }
  printf("\n");

  printf("check CHARACTER_OCTET_LENGTH is NULL\n");
  if (indic3 != -1)
  {
     printf("CHARACTER_OCTET_LENGTH should be null\n");
     printf("value %ld returned\n", olen);
     flag = 0;
  }
  printf("\n");

  printf("check COLLATION_CATALOG is NULL\n");
  if (indic4 != -1)
  {
     printf("COLLATION_CATALOG should be NULL\n");
     printf("Value %s returned\n", colcat);
     flag = 0;
  }
  printf("\n");

  printf("check COLLATION_SCHEMA is NULL\n");
  if (indic5 != -1)
  {
     printf("COLLATION_SCHEMA should be NULL\n");
     printf("Value %s returned\n", colsch);
     flag = 0;
  }
  printf("\n");

  printf("check COLLATION_NAME is NULL\n");
  if (indic6 != -1)
  {
     printf("COLLATION_NAME should be NULL\n");
     printf("returned %s\n", colnam);
     flag = 0;
  }
  printf("\n");

  printf("check CHARACTER_SET_CATALOG is NULL\n");
  if (indic7 != -1)
  {
     printf("CHARACTER_SET_CATALOG should be NULL\n");
     printf("returned %s\n",chrset);
     flag = 0;
  }
  printf("\n");

  printf("check CHARACTER_SET_SCHEMA is NULL\n");
  if (indic8 != -1)
  {
     printf("CHARACTER_SET_SCHEMA should be NULL\n");
     printf("value %s returned\n", chrsch);
     flag = 0;
  }
  printf("\n");

  printf("check CHARACTER_SET_NAME is NULL\n");
  if (indic9 != -1)
  {
     printf("CHARACTER_SET_NAME should be NULL\n");
     printf("Value %s returned\n", chrnme);
     flag = 0;
  }
  printf("\n");

  printf("check value in NUMERIC_PRECISION is not NULL\n");
  if (indica == -1)
  {
     printf("NULL value incorrectly found for NUMERIC_PRECISION\n");
     flag = 0;
  }
  printf("\n");

  printf("check value in NUMERIC_PRECISION_RADIX column \n");
  printf("has a value in the set (2,10)\n");
  if (2 != numrad && 10 != numrad)
  {
     printf("Expected NUMERIC_PRECISION_RADIX 2 or 10\n");
     printf("Found %ld\n", numrad);
     flag = 0;
  }
  printf("\n");

  printf("check NUMERIC_SCALE has value '0'\n");
  if (numscl != 0)
  {
     printf("expected NUMERIC_SCALE 0, found %ld\n",numscl);
     flag = 0;
  }
  printf("\n");

  printf("check DATETIME_PRECISION is NULL\n");
  if (indicb != -1)
  {
     printf("DATETIME_PRECISION should be NULL\n");
     printf("Value %ld returned\n", dttime);
     flag = 0;
  }
  printf("\n");

  printf("check value in DOMAIN_DEFAULT is null\n");
  if (indicc != -1)
  {
     printf("DOMAIN_DEFAULT should be NULL\n");
     printf("Value returned is %s\n",domdef);
  }
  printf("\n");

  printf("check value in INTERVAL_TYPE is null\n");
  if (indicd != -1)
  {
     printf("INTERVAL_TYPE should be NULL\n");
     printf("Value returned is %s\n",inttyp);
  }
  printf("\n");

  printf("check value in INTERVAL_PRECISION is null\n");
  if (indice != -1)
  {
     printf("INTERVAL_PRECISION should be NULL\n");
     printf("Value returned is %ld\n",intpre);
  }
  printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP DOMAIN intdomain CASCADE;\n");
EXEC SQL DROP DOMAIN intdomain CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts750.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7500','pass','PC');
       }
     else
       {
          printf("\n\n       yts750.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7500','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7500 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

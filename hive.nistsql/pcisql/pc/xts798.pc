/*  EMBEDDED C (file " XTS798.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS798.PC  TEST7001                                         */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  NULLIF which produces non-NULL                               */
/*                                                               */
/* REFERENCES                                                    */
/* 6.9  FT.2 <case abbreviation>                                 */
/* 6.9  SR.1                                                     */
/* 6.9  GR.1b                                                    */
/* 6.9  GR.2b                                                    */
/* 6.9  LR.2a -- Raised. Entry SQL restriction which prohibited  */
/*               the use of a <case expression>                  */
/* 6.11 LR2c  -- Raised                                          */
/* F#26 --    CASE expression                                    */
/*                                                               */
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 18/12/95                    */
/*         Print timestamp                                       */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*                                                               */
/*  QA STATUS : QA CHECK                                         */
/*                                                               */
/*  Revised by DWF 1996-02-27                                    */
/*    Fixed coding rule violations                               */
/*    Made printout match statements                             */
/*    Removed status checks after cursor definitions             */
/*    Fixed result printout                                      */
/*    Fixed string length                                        */
/*    Fixed pass criteria                                        */
/*    Fixed bogus code                                           */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 long sal;
 char ename[21];
 short indic1;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts798.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run:  %s\n", ctime(&cal));

/******************** BEGIN TEST7002 ********************/
flag = 1;
printf("        TEST7002\n");
printf("    NULLIF producing non-NULL\n");
printf(" References:\n");                                         
printf("    6.9  FT.2  -- <case abbreviation>\n");                            
printf("    6.9  SR.1\n");
printf("    6.9  GR.1b\n");
printf("    6.9  GR.2b\n");
printf("    6.9  LR.2a -- Raised.Entry SQL restriction which prohibited the\n");
printf("                  use of a <case expression>\n");
printf("    6.9  LR.2c -- Raised.\n");
printf("    F#26 --    CASE expression\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Initialise error reporting variables */
     SQLCODE = -1;
     strcpy(SQLSTATE, "xxxxx");

/* insert 6 rows in the table STAFFb in order to test NULLIF */
printf("INSERT INTO STAFFb VALUES(10000,'Kilroy',10000,'P4','Athens','M');\n");
EXEC SQL INSERT INTO STAFFb VALUES(10000,'Kilroy',10000,'P4','Athens','M');
CHCKOK(); 
printf("\n");

printf("INSERT INTO STAFFb VALUES(15000,'Nickos',20000,'P6','Nickos','M');\n");
EXEC SQL INSERT INTO STAFFb VALUES(15000,'Nickos',20000,'P6','Nickos','M');
CHCKOK(); 
printf("\n");

printf("INSERT INTO STAFFb VALUES(NULL,'Nickos',NULL,'P5','Rhodes','M');\n");
EXEC SQL INSERT INTO STAFFb VALUES(NULL,'Nickos',NULL,'P5','Rhodes','M');
CHCKOK(); 
printf("\n");

printf("INSERT INTO STAFFb VALUES(10010,'George',NULL,'P7','Georgia','M');\n");
EXEC SQL INSERT INTO STAFFb VALUES(10010,'George',NULL,'P7','Georgia','M');
CHCKOK(); 
printf("\n");

printf("INSERT INTO STAFFb VALUES(10005,NULL,30000,'P8',NULL,'M');\n");
EXEC SQL INSERT INTO STAFFb VALUES(10005,NULL,30000,'P8',NULL,'M');
CHCKOK(); 
printf("\n");

printf("INSERT INTO STAFFb VALUES(10001,'Gregory',12000,'P9',NULL,'M');\n");
EXEC SQL INSERT INTO STAFFb VALUES(10001,'Gregory',12000,'P9',NULL,'M');
CHCKOK(); 
printf("\n");

/* Test NULLIF with numeric data types */
printf("DECLARE F CURSOR FOR SELECT EMPNAME, NULLIF (SALARY,HOURS)\n");
printf("FROM CTS1.STAFFb\n");
printf("WHERE SEX = 'M' AND PNUM NOT IN ('P1','P2','P3','P6','P8')\n");
printf("AND (SALARY <> HOURS OR SALARY IS NULL OR HOURS IS NULL)\n");
printf("ORDER BY PNUM;\n\n");
EXEC SQL DECLARE F CURSOR FOR SELECT EMPNAME, NULLIF (SALARY,HOURS)
         FROM CTS1.STAFFb
         WHERE SEX = 'M' AND PNUM NOT IN ('P1','P2','P3','P6','P8')
         AND (SALARY <> HOURS OR SALARY IS NULL OR HOURS IS NULL)
         ORDER BY PNUM; 

printf("OPEN F\n");
EXEC SQL OPEN F;
CHCKOK(); 
printf("\n");

/* initialise host variables */
sal=0;
strcpy(ename,"xxxxxxxxxxxxxxxxxxxx");
indic1 = 99;

printf("NULLIF producing non-NULL the results should be:\n");
/*  3 rows satisfy the <search condition> of the query */
printf("FETCH F INTO :ename, :sal:indic1;\n");
EXEC SQL FETCH F INTO :ename, :sal:indic1;
CHCKOK();
printf("ename should be Nickos; its value is %s\n", ename);
printf("indic1 should be -1; its value is %d\n", indic1);
if ( strncmp(ename, "Nickos",6) != 0 || indic1 != -1 )
   flag = 0;
printf("\n");

/* initialise host variables */
sal=0;
strcpy(ename,"xxxxxxxxxxxxxxxxxxxx");
indic1 = 99;

printf("FETCH F INTO :ename, :sal:indic1;\n");
EXEC SQL FETCH F INTO :ename, :sal:indic1;
CHCKOK();
printf("ename should be George; its value is %s\n", ename);
printf("sal   should be  10010; its value is %ld\n", sal);
printf("indic1 should be 0; its value is %d\n", indic1);
if ( strncmp(ename, "George",6) != 0 || indic1 != 0 || sal != 10010 )
   flag = 0;
printf("\n");

/* initialise host variables */
sal=0;
strcpy(ename,"xxxxxxxxxxxxxxxxxxxx");
indic1 = 99;

printf("FETCH F INTO :ename, :sal:indic1;\n");
EXEC SQL FETCH F INTO :ename, :sal:indic1;
CHCKOK();
printf("ename should be Gregory; its value is %s\n", ename);
printf("sal   should be   10001; its value is %ld\n", sal);
printf("indic1 should be 0; its value is %d\n", indic1);
if ( strncmp(ename, "Gregory",7) != 0 || indic1 != 0 || sal != 10001 )
   flag = 0;
printf("\n");

printf("CLOSE F;\n");
EXEC SQL CLOSE F;
CHCKOK(); 
printf("\n");

/***** test NULLIF with character string values *****/
printf("DECLARE G CURSOR FOR SELECT NULLIF (EMPNAME,CITY), SALARY\n");
printf("FROM CTS1.STAFFb\n");
printf("WHERE SEX = 'M' AND PNUM NOT IN ('P1','P2','P3','P5','P7')\n");
printf("AND (EMPNAME <> CITY OR EMPNAME IS NULL OR CITY IS NULL)\n");
printf("ORDER BY PNUM\n\n");
EXEC SQL DECLARE G CURSOR FOR SELECT NULLIF (EMPNAME,CITY), SALARY
         FROM CTS1.STAFFb
         WHERE SEX = 'M' AND PNUM NOT IN ('P1','P2','P3','P5','P7')
         AND (EMPNAME <> CITY OR EMPNAME IS NULL OR CITY IS NULL)
         ORDER BY PNUM;

printf("OPEN G\n");
EXEC SQL OPEN G;
CHCKOK(); 
printf("\n");

/* initialise host variables */
sal=0;
strcpy(ename,"xxxxxxxxxxxxxxxxxxxx");
indic1 = 99;

printf("NULLIF producing non NULL the results should be:\n");
/*  3 rows satisfy the <search condition> of the query */
printf("FETCH G INTO :ename:indic1, :sal;\n");
EXEC SQL FETCH G INTO :ename:indic1, :sal;
CHCKOK();
printf("ename should be Kilroy; its value is %s\n", ename);
printf("sal   should be  10000; its value is %ld\n", sal);
printf("indic1 should be 0; its value is %d\n", indic1);
if ( strncmp(ename, "Kilroy",6) != 0 || indic1 != 0 || sal != 10000 )
    flag=0;
printf("\n");

/* initialise host variables */
sal=0;
strcpy(ename,"xxxxxxxxxxxxxxxxxxxx");
indic1 = 99;

printf("FETCH G INTO :ename:indic1, :sal;\n");
EXEC SQL FETCH G INTO :ename:indic1, :sal;
CHCKOK();
printf("indic1 should be -1; its value is %d\n", indic1);
printf("sal   should be 10005; its value is %ld\n", sal);
if ( indic1 != -1 || sal != 10005 )
    flag=0;
printf("\n");

/* initialise host variables */
sal=0;
strcpy(ename,"xxxxxxxxxxxxxxxxxxxx");
indic1 = 99;

printf("FETCH G INTO :ename:indic1, :sal;\n");
EXEC SQL FETCH G INTO :ename:indic1, :sal;
CHCKOK();
printf("ename should be Gregory; its value is %s\n", ename);
printf("sal   should be   10001; its value is %ld\n", sal);
printf("indic1 should be 0; its value is %d\n\n", indic1);
if ( strncmp(ename, "Gregory",7) != 0 || indic1 != 0 || sal != 10001 )
    flag=0;

printf("CLOSE G;\n");
EXEC SQL CLOSE G;
CHCKOK(); 
printf("\n");

/* restore CTS1.STAFFb in its original state */
printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

printf("CREATE TABLE TAB1426(SALARY DECIMAL(6), EMPNAME CHAR(20));\n");
EXEC SQL CREATE TABLE TEMP1426 
         (SALARY DECIMAL(6),
          EMPNAME CHAR(20));
CHCKOK();    
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* re-insert the same rows in table CTS1.STAFFb */
/* so that a ROLLBACK will leave CTS1.STAFFb    */ 
/* unaffected and DROP TABLE TEMP1426 will work */
printf("INSERT INTO STAFFb VALUES(10000,'Kilroy',10000,'P4','Athens','M');\n");
EXEC SQL INSERT INTO STAFFb VALUES(10000,'Kilroy',10000,'P4','Athens','M');
CHCKOK(); 
printf("\n");

printf("INSERT INTO STAFFb VALUES(15000,'Nickos',20000,'P6','Nickos','M');\n");
EXEC SQL INSERT INTO STAFFb VALUES(15000,'Nickos',20000,'P6','Nickos','M');
CHCKOK(); 
printf("\n");

printf("INSERT INTO STAFFb VALUES(NULL,'Nickos',NULL,'P5','Rhodes','M');\n");
EXEC SQL INSERT INTO STAFFb VALUES(NULL,'Nickos',NULL,'P5','Rhodes','M');
CHCKOK(); 
printf("\n");

printf("INSERT INTO STAFFb VALUES(10010,'George',NULL,'P7','Georgia','M');\n");
EXEC SQL INSERT INTO STAFFb VALUES(10010,'George',NULL,'P7','Georgia','M');
CHCKOK(); 
printf("\n");

printf("INSERT INTO STAFFb VALUES(10005,NULL,30000,'P8',NULL,'M');\n");
EXEC SQL INSERT INTO STAFFb VALUES(10005,NULL,30000,'P8',NULL,'M');
CHCKOK(); 
printf("\n");

printf("INSERT INTO STAFFb VALUES(10001,'Gregory',12000,'P9',NULL,'M');\n");
EXEC SQL INSERT INTO STAFFb VALUES(10001,'Gregory',12000,'P9',NULL,'M');
CHCKOK(); 
printf("\n");

printf("INSERT INTO TEMP1426\n");
printf("SELECT NULLIF (10000,SALARY), EMPNAME FROM STAFFb\n");
printf("WHERE SEX = 'M' AND PNUM NOT IN ('P1','P2','P3','P6','P8','P9');\n");
EXEC SQL INSERT INTO TEMP1426
         SELECT NULLIF (10000,SALARY), EMPNAME FROM STAFFb
         WHERE SEX = 'M' AND PNUM NOT IN ('P1','P2','P3','P6','P8','P9');
CHCKOK();   
printf("\n");

printf("DECLARE H CURSOR FOR SELECT * FROM CTS1.TEMP1426\n");
printf("ORDER BY EMPNAME;\n\n");
EXEC SQL DECLARE H CURSOR
         FOR SELECT * FROM CTS1.TEMP1426
         ORDER BY EMPNAME;

printf("OPEN H\n");
EXEC SQL OPEN H;
CHCKOK();
printf("\n");

/* initialise host variables */
sal=0;
strcpy(ename,"xxxxxxxxxxxxxxxxxxxx");
indic1 = 99;

/*  3 rows satisfy the <search condition> of the query */
printf("FETCH H INTO :sal:indic1, :ename;\n");
EXEC SQL FETCH H INTO :sal:indic1, :ename;
CHCKOK();
printf("ename should be George; its value is %s\n", ename);
printf("sal   should be  10000; its value is %ld\n", sal);
printf("indic1 should be 0; its value is %d\n", indic1);
if ( sal != 10000 || indic1 != 0 || strncmp(ename, "George",6) != 0 )
   flag = 0;
printf("\n");

/* initialise host variables */
sal=0;
strcpy(ename,"xxxxxxxxxxxxxxxxxxxx");
indic1 = 99;

printf("FETCH H INTO :sal:indic1, :ename;\n");
EXEC SQL FETCH H INTO :sal:indic1, :ename;
CHCKOK();
printf("ename should be Kilroy; its value is %s\n", ename);
printf("indic1 should be -1; its value is %d\n", indic1);
if ( indic1 != -1 || strncmp(ename, "Kilroy",6) != 0 )
   flag = 0;
printf("\n");

/* initialise host variables */
sal=0;
strcpy(ename,"xxxxxxxxxxxxxxxxxxxx");
indic1 = 99;

printf("FETCH H INTO :sal:indic1, :ename;\n");
EXEC SQL FETCH H INTO :sal:indic1, :ename;
CHCKOK();
printf("ename should be Nickos; its value is %s\n", ename);
printf("sal   should be  10000; its value is %ld\n", sal);
printf("indic1 should be 0; its value is %d\n", indic1);
if ( sal != 10000 || indic1 != 0 || strncmp(ename, "Nickos",6) != 0 )
   flag = 0;
printf("\n");

printf("CLOSE H;\n");
EXEC SQL CLOSE H;
CHCKOK(); 
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* Clean-up database - drop CTS1.TEMP1426 */
printf("DROP TABLE TEMP1426 CASCADE;\n");
EXEC SQL DROP TABLE TEMP1426 CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       xts798.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7002','pass','PC');
       }
     else
       {
          printf("\n\n       xts798.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7002','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;

/******************** END TEST7002 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

/*  EMBEDDED C (file "YTS775.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS775.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  SQL host program with duplicate local variable names         */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    19.1      <embedded SQL host program>                      */
/*    19.1 SR1  multiple SQL <embedded SQL declare section>s     */
/*                           permitted                           */
/*    19.1 LR2b)                                                 */
/*    F#36      Subprogram support                               */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-14                                    */
/*    Added rollback after authid                                */
/*    Removed EXEC SQL from inside printfs                       */
/*    Changed printouts                                          */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();
int
SUB_ONE();
int
SUB_TWO();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char x[4];
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
long y1;
long y2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts775.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7557 ********************/
flag = 1;

     printf("                  TEST7557 \n");
     printf("   SQL host prog. with duplicate local variable names\n");
     printf("References:\n");
     printf("    19.1     <embedded SQL host program>\n");
     printf("    19.1 SR1 multiple SQL <embedded SQL declare sections>\n");
     printf("             permitted\n");
     printf("    19.1 LR2b)\n");
     printf("    F#36     Subprogram support\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

SQLCODE = -1;
strcpy (SQLSTATE, "xxxxx");

printf("\n* IN MAIN PROGRAM *\n\n");

/* Initialise global variables */
strcpy(x,"yyy");
y1 = 100000;
y2 = 999999;

/* assign val to x in main program */

printf("Assign val to global variable x\n\n");
printf("SELECT EMPNUM INTO :x FROM CTS1.STAFF\n");
printf("WHERE EMPNAME = 'Alice';\n");
EXEC SQL SELECT EMPNUM INTO :x FROM CTS1.STAFF
WHERE EMPNAME = 'Alice';
CHCKOK ();
printf ("x should be E1; its value is %s\n\n", x);
if (strncmp(x,"E1",2) != 0)
   flag = 0;

y1 = SUB_ONE();

printf("\n* IN MAIN PROGRAM *\n\n");

printf("Check global variable x not changed by function\n");
printf ("x should be E1; its value is %s\n\n", x);
if (strncmp(x,"E1",2) != 0)
   flag = 0;

y2 = SUB_TWO();

printf("\n* IN MAIN PROGRAM *\n\n");

printf("Value returned from first function should be 15\n");
printf("Value is %ld\n", y1);
printf("Value returned from second function should be 30\n");
printf("Value is %ld\n\n", y2);
if (y1 != 15 || y2 != 30)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf ("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts775.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7557','pass','PC');
       }
     else
       {
          printf("\n\n       yts775.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7557','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7557 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

int
SUB_ONE()
{
EXEC SQL BEGIN DECLARE SECTION;
char x[4];
short y;
EXEC SQL END DECLARE SECTION;

printf("\n* In FUNCTION 1*\n\n");

/* initialise function var x */

strcpy(x,"zzz");

printf("Declare cursor to assign val to function variable x\n");
printf("DECLARE func1 CURSOR FOR\n");
printf("SELECT EMPNUM FROM CTS1.STAFF\n");
printf("WHERE EMPNAME = 'Betty';\n\n");
EXEC SQL DECLARE func1 CURSOR FOR 
SELECT EMPNUM FROM CTS1.STAFF
WHERE EMPNAME = 'Betty';

printf("OPEN func1;\n");
EXEC SQL OPEN func1;
CHCKOK ();
printf("\n");

/* fetch cursor vals */
printf("FETCH func1 INTO :x;\n");
EXEC SQL FETCH func1 INTO :x;
CHCKOK ();
printf ("x should be E2; its value is %s\n\n", x);
if (strncmp (x, "E2", 2) != 0)
  flag = 0;

/* close cursor */
printf("CLOSE func1\n");
EXEC SQL CLOSE func1;
CHCKOK ();
printf("\n");

/* initialise variable y */
y = 99;

printf("Assign val to function var y\n");
printf("SELECT HOURS INTO :y\n");
printf("FROM CTS1.STAFFa\n");
printf("WHERE EMPNUM = 'E9'\n");
EXEC SQL SELECT HOURS INTO :y
FROM CTS1.STAFFa
WHERE EMPNUM = 'E9';
CHCKOK ();
printf ("y should be 15; its value is %ld\n\n", y);
if (y != 15)
    flag = 0;

  printf("EXIT FUNCTION 1\n\n");
  return y;
}

int
SUB_TWO()
{
EXEC SQL BEGIN DECLARE SECTION;
short y;
EXEC SQL END DECLARE SECTION;

printf("\n* IN FUNCTION 2 *\n\n");

/* initialise variable y */
y = 100;

printf("declare cursor to assign value to function var y\n");

printf("DECLARE func2  CURSOR FOR\n");
printf("SELECT HOURS FROM CTS1.STAFFa\n");
printf("WHERE EMPNUM = 'E8';\n\n");
EXEC SQL DECLARE func2 CURSOR FOR
SELECT HOURS FROM CTS1.STAFFa
WHERE EMPNUM = 'E8';

printf("OPEN func2;\n");
EXEC SQL OPEN func2;
CHCKOK ();
printf("\n");

/* fetch value in cursor */

printf("FETCH func2 INTO :y;\n");
EXEC SQL FETCH func2 INTO :y;
CHCKOK ();
printf ("y should be 30; its value is %ld\n\n", y);
if (y != 30)
  flag = 0;

/* close cursor */
printf("CLOSE func2;\n");
EXEC SQL CLOSE func2;
CHCKOK ();
printf("\n");

printf("EXIT FUNCTION 2\n\n");
return y;
}

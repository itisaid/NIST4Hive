/*  EMBEDDED C (file "SDL036.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1992/06/22 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  SDL036.PC                                                    */
/*  WRITTEN BY: DAVID W. FLATER                                  */
/*                                                               */
/*    THIS ROUTINE TESTS THE SCHEMA DEFINITION LANGUAGE FOR SQL. */
/*                                                               */
/*  REFERENCES                                                   */
/*    ANSI SQL-1992                                              */
/*      11.36  <grant statement>                                 */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
     long tmpint;
     char uid[19];
     char uidx[19];
EXEC SQL END DECLARE SECTION;

long SQLCODE;
int errcnt;
/* date_time declaration */
time_t cal;
long     ii;
long     flag;

main()
{
     strcpy(uid,"SCHANZLE");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
if (strncmp(uid,uidx,8) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, sdl036.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0481 ********************/
flag = 1;

/* HU has been granted all privileges on CUGINI.VVTABLE. */
/* SCHANZLE has been granted none. */
/* This tests the granularity of grants as well as */
/* the overall correctness. */

     printf("                  TEST0481 \n");
     printf("      Priv.violation: no privileges on view\n");
     printf("Reference ANSI SQL-1992 11.36 <grant statement>\n");
     printf("     - - - - - - - - - - - - - - - - - - -\n\n");

     printf ("DELETE FROM CUGINI.VVTABLE;\n");
     EXEC SQL DELETE FROM CUGINI.VVTABLE;
     ii = SQLCODE;
     printf ("SQLCODE should be < 0; its value is %ld\n", ii);

     if (ii >= 0)
       flag = 0;

     printf ("INSERT INTO CUGINI.VVTABLE VALUES (0,1,2,3,4.25);\n");
     EXEC SQL INSERT INTO CUGINI.VVTABLE
       VALUES (0,1,2,3,4.25);
     ii = SQLCODE;
     printf ("SQLCODE should be < 0; its value is %ld\n", ii);

     if (ii >= 0)
       flag = 0;

     tmpint = 0;
     printf ("SELECT COL2 INTO :tmpint FROM CUGINI.VVTABLE\n");
     printf ("WHERE COL1 = 0;\n");
     EXEC SQL SELECT COL2 INTO :tmpint FROM CUGINI.VVTABLE
       WHERE COL1 = 0;
     ii = SQLCODE;
     printf ("SQLCODE should be < 0; its value is %ld\n", ii);
     printf ("tmpint should NOT be 1; its value is %ld\n", tmpint);

     if (ii >= 0 || tmpint == 1)
       flag = 0;

     printf ("UPDATE CUGINI.VVTABLE\n");
     printf (" SET COL2 = 2;\n");
     EXEC SQL UPDATE CUGINI.VVTABLE
       SET COL2 = 2;
     ii = SQLCODE;
     printf ("SQLCODE should be < 0; its value is %ld\n", ii);

     if (ii >= 0)
       flag = 0;

     EXEC SQL ROLLBACK WORK;

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0481','pass','PC');
       }
     else
       {
          printf("\n\n       sdl036.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0481','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0481 *********************/

/******************** BEGIN TEST0482 ********************/
flag = 1;

     printf("                  TEST0482 \n");
     printf("       GRANT ALL PRIVILEGES on view\n");
     printf("Reference ANSI SQL-1992 11.36 <grant statement>\n");
     printf("     - - - - - - - - - - - - - - - - - - -\n\n");

     /* Safety */
     EXEC SQL DELETE FROM CUGINI.VII;

     printf ("INSERT INTO CUGINI.VII VALUES (2);\n");
     EXEC SQL INSERT INTO CUGINI.VII VALUES (2);
     ii = SQLCODE;
     printf ("SQLCODE should be 0; its value is %ld\n", ii);

     if (ii != 0)
       flag = 0;

     printf ("UPDATE CUGINI.VII SET C1 = 3\n");
     printf ("WHERE C1 = 2;\n");
     EXEC SQL UPDATE CUGINI.VII
       SET C1 = 3
       WHERE C1 = 2;
     ii = SQLCODE;
     printf ("SQLCODE should be 0; its value is %ld\n", ii);

     if (ii != 0)
       flag = 0;

     printf ("SELECT C1 INTO :tmpint FROM CUGINI.VII;\n");
     tmpint = 0;
     EXEC SQL SELECT C1 INTO :tmpint
       FROM CUGINI.VII;
     ii = SQLCODE;
     printf ("SQLCODE should be 0; its value is %ld\n", ii);
     printf ("tmpint should be 3; its value is %ld\n", tmpint);

     if (ii != 0 || tmpint != 3)
       flag = 0;

     printf ("DELETE FROM CUGINI.VII;\n");
     EXEC SQL DELETE FROM CUGINI.VII;
     ii = SQLCODE;
     printf ("SQLCODE should be 0; its value is %ld\n", ii);

     if (ii != 0)
       flag = 0;

     EXEC SQL ROLLBACK WORK;

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0482','pass','PC');
       }
     else
       {
          printf("\n\n       sdl036.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0482','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0482 *********************/

/******************** BEGIN TEST0483 ********************/
flag = 1;

/* Schema 5 contains an attempt by Flater, who has select and */
/* update(empnum,empname) with grant option on hu.vstaff3, */
/* to grant select and unrestricted update to Schanzle. */
/* This attempt should fail. */

     printf("                  TEST0483 \n");
     printf("   Priv.violation: GRANT priv. not grantable/v\n");
     printf("Reference ANSI SQL-1992 11.36 <grant statement>\n");
     printf("     - - - - - - - - - - - - - - - - - - -\n\n");

     printf ("UPDATE HU.VSTAFF3 SET GRADE=15 WHERE EMPNUM='E2';\n");
     /* Betty gets an unauthorized promotion */
     EXEC SQL UPDATE HU.VSTAFF3
       SET GRADE = 15
       WHERE EMPNUM = 'E2';
     ii = SQLCODE;
     printf ("SQLCODE should be < 0; its value is %ld\n", ii);

     if (ii >= 0)
       flag = 0;

     EXEC SQL ROLLBACK WORK;

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0483','pass','PC');
       }
     else
       {
          printf("\n\n       sdl036.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0483','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0483 *********************/

     exit(errcnt);
}

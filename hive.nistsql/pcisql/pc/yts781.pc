/*  EMBEDDED C (file "YTS781.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS781.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  Set local time zone - valid value                            */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    16.5 GR1a <set local time zone statement>, LOCAL           */
/*    16.5 GR1b <set local time zone statement>, <interval       */
/*              value expression>                                */
/*    6.6  GR3  <extract expression>                             */
/*    6.15 F    <interval value expression>                      */
/*    F#41      Time zone specification                          */
/*    F#5       DATETIME data types                              */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*  24/10/95 Table Inserts Corrected                             */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-18                                    */
/*    Added rollback after authid                                */
/*    Fixed syntax errors                                        */
/*    Removed EXEC SQL from printf                               */
/*    Delete pre-existing stuff in TTIME                         */
/*    Match up statement with printf                             */
/*    Removed or rewrote broken/confusing math and logic         */
/*    Fixed expected results                                     */
/*    Removed duplicate cursor definition                        */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short h;
short m;
short pk1;
short yr;
short mon;
short dya;
short mni;
short hr;
short min2;
short hr2;
short co;
short co2;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
short    i;
long     flag;
short tmin;
short thr;
short tday;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts781.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7536 ********************/
flag = 1;

     printf("                  TEST7536 \n");
     printf("   Set local time zone - valid value\n");
     printf("References:\n");
     printf("    16.5 GR1a  <set local time zone statement>,LOCAL\n");
     printf("    16.5 GR1b  <set local time zone statement>,\n");
     printf("               <interval value expression>\n");
     printf("    6.6 GR3    <extract expression>\n");
     printf("    6.15 F     <interval value expression>\n");
     printf("    F#41       Time zone specification\n");
     printf("    F#5        DATETIME data types\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* set local time zone to UTC */

/* It does not appear that this has to be outside of a transaction. */

printf("SET TIME ZONE INTERVAL '00:00' HOUR TO MINUTE;\n");
EXEC SQL SET TIME ZONE INTERVAL '00:00' HOUR TO MINUTE;
CHCKOK ();
printf("\n");

/* insert values into table at UTC */

/* insert values for noon */
printf("populate the table\n");
printf("==================\n\n");

printf("DELETE FROM TTIME_BASE;\n");
EXEC SQL DELETE FROM TTIME_BASE;
CHCKOK ();
printf("\n");

printf("INSERT INTO TTIME VALUES\n");
printf("(1,TIME '12:00:00', TIMESTAMP '1995-04-10 12:00:00');\n");
EXEC SQL INSERT INTO TTIME VALUES
(1, TIME '12:00:00', TIMESTAMP '1995-04-10 12:00:00');
CHCKOK ();
printf("\n");

/* insert values in the first two hours of the day */

printf("INSERT INTO TTIME VALUES\n");
printf("(2, TIME '00:15:22', TIMESTAMP '1995-04-10 01:45:33');\n");
EXEC SQL INSERT INTO TTIME VALUES
(2, TIME '00:15:22', TIMESTAMP '1995-04-10 01:45:33');
CHCKOK ();
printf("\n");

/* insert values in the last two hours of the day */

printf("INSERT INTO TTIME VALUES\n");
printf("(3, TIME '23:28:54',TIMESTAMP '1995-04-10 22:54:12');\n");
EXEC SQL INSERT INTO TTIME VALUES
(3, TIME '23:28:54', TIMESTAMP '1995-04-10 22:54:12');
CHCKOK ();
printf("\n");

/* insert values in the first half of the day */

printf("INSERT INTO TTIME VALUES\n");
printf("(4, TIME '06:31:01', TIMESTAMP '1995-04-10 11:59:59');\n");
EXEC SQL INSERT INTO TTIME VALUES
(4, TIME '06:31:01', TIMESTAMP '1995-04-10 11:59:59');
CHCKOK ();
printf("\n");

/* insert values in the last half of the day */

printf("INSERT INTO TTIME VALUES\n");
printf("(5, TIME '18:49:34', TIMESTAMP '1995-04-10 19:30:02');\n");
EXEC SQL INSERT INTO TTIME VALUES
(5, TIME '18:49:34', TIMESTAMP '1995-04-10 19:30:02');
CHCKOK ();
printf("\n");

/* set database to local time */

printf("set the database to local time\n");
printf("==============================\n\n");

printf("SET TIME ZONE LOCAL;\n");
EXEC SQL SET TIME ZONE LOCAL;
CHCKOK ();
printf("\n");

/* calculate time zone displacement */

printf("Determine time zone displacement\n");
printf("================================\n\n");

printf("SELECT EXTRACT (TIMEZONE_HOUR FROM CURRENT_TIME)\n");
printf("  INTO :h FROM CTS1.ECCO;\n");
EXEC SQL SELECT EXTRACT (TIMEZONE_HOUR FROM CURRENT_TIME)
  INTO :h FROM CTS1.ECCO;
CHCKOK ();
printf("\n");

printf("SELECT EXTRACT (TIMEZONE_MINUTE FROM CURRENT_TIME)\n");
printf("  INTO :m FROM CTS1.ECCO;\n");
EXEC SQL SELECT EXTRACT (TIMEZONE_MINUTE FROM CURRENT_TIME)
  INTO :m FROM CTS1.ECCO;
CHCKOK ();
printf("\n");

printf("Local Time Zone Displacement is %d hrs %d mins\n\n",h,m);

printf("retrieve row that contains value for noon\n");
printf("=========================================\n\n");

/* Declare cursor to fetch values in TTIME */
printf("Declare cursor to fetch values in TTIME\n");
printf("=======================================\n\n");

printf("DECLARE data781 CURSOR FOR\n");
printf("SELECT PK,\n");
printf("       EXTRACT (YEAR FROM TS),\n");
printf("       EXTRACT (MONTH FROM TS),\n");
printf("       EXTRACT (DAY FROM TS),\n");
printf("       EXTRACT (MINUTE FROM TS),\n");
printf("       EXTRACT (HOUR FROM TS),\n");
printf("       EXTRACT (MINUTE FROM TT),\n");
printf("       EXTRACT (HOUR FROM TT)\n");
printf("FROM TTIME\n");
printf("ORDER BY PK;\n\n");
EXEC SQL DECLARE data781 CURSOR FOR
SELECT PK,
       EXTRACT (YEAR FROM TS),
       EXTRACT (MONTH FROM TS),
       EXTRACT (DAY FROM TS),
       EXTRACT (MINUTE FROM TS),
       EXTRACT (HOUR FROM TS),
       EXTRACT (MINUTE FROM TT),
       EXTRACT (HOUR FROM TT)
FROM TTIME
ORDER BY PK;

printf("OPEN data781;\n");
EXEC SQL OPEN data781;
CHCKOK ();
printf("\n");

/* FETCH data781 */

printf("Fetch all rows in table TTIME\n");
printf("=============================\n");

pk1 = 65;
yr = 65;
mon = 65;
dya = 65;
mni = 65;
hr = 65;
min2 = 65;
hr2 = 65;
printf("FETCH data781 INTO\n");
printf(":pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2\n");
EXEC SQL FETCH data781 INTO
:pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;
CHCKOK ();

tmin = m;
thr = 12 + h;
tday = 10;
if (tmin < 0)
{
  tmin = tmin + 60;
  thr = thr - 1;
}
if (tmin >= 60)
{
  tmin = tmin - 60;
  thr = thr + 1;
}
if (thr < 0)
{
  thr = thr + 24;
  tday = tday - 1;
}
if (thr >= 24)
{
  thr = thr - 24;
  tday = tday + 1;
}

printf ("min should be %d; its value is %d\n", tmin, mni);
printf ("hr should be %d; its value is %d\n", thr, hr);
printf ("day should be %d; its value is %d\n", tday, dya);
printf ("mon should be 4; its value is %d\n", mon);
printf ("yr should be 1995; its value is %d\n", yr);
if (mni != tmin || hr != thr || dya != tday)
  flag = 0;
if (mon != 4 || yr != 1995)
  flag = 0;

/* TIME is same as TIMESTAMP for this row */

printf ("min2 should be %d; its value is %d\n", tmin, min2);
printf ("hr2 should be %d; its value is %d\n\n", thr, hr2);
if (min2 != tmin || hr2 != thr)
  flag = 0;

/* initialise all host variables */
yr = -99;
mon = 99;
dya = 99;
mni = 99;
hr = 99;
min2 = 99;
hr2 = 99;

printf("FETCH data781 INTO\n");
printf(":pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;\n");
EXEC SQL FETCH data781 INTO
:pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;
CHCKOK ();

tmin = 45 + m;
thr = 1 + h;
tday = 10;
if (tmin < 0)
{
  tmin = tmin + 60;
  thr = thr - 1;
}
if (tmin >= 60)
{
  tmin = tmin - 60;
  thr = thr + 1;
}
if (thr < 0)
{
  thr = thr + 24;
  tday = tday - 1;
}
if (thr >= 24)
{
  thr = thr - 24;
  tday = tday + 1;
}

printf ("min should be %d; its value is %d\n", tmin, mni);
printf ("hr should be %d; its value is %d\n", thr, hr);
printf ("day should be %d; its value is %d\n", tday, dya);
printf ("mon should be 4; its value is %d\n", mon);
printf ("yr should be 1995; its value is %d\n", yr);
if (mni != tmin || hr != thr || dya != tday)
  flag = 0;
if (mon != 4 || yr != 1995)
  flag = 0;

tmin = 15 + m;
thr = h;
if (tmin < 0)
{
  tmin = tmin + 60;
  thr = thr - 1;
}
if (tmin >= 60)
{
  tmin = tmin - 60;
  thr = thr + 1;
}
if (thr < 0)
{
  thr = thr + 24;
}
if (thr >= 24)
{
  thr = thr - 24;
}

printf ("min2 should be %d; its value is %d\n", tmin, min2);
printf ("hr2 should be %d; its value is %d\n\n", thr, hr2);
if (min2 != tmin || hr2 != thr)
  flag = 0;

/* FETCH data781 */

/* initialise all host variables */
yr = -99;
mon = 99;
dya = 99;
mni = 99;
hr = 99;
min2 = 99;
hr2 = 99;

printf("FETCH data781 INTO\n"); 
printf(":pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;\n"); 
EXEC SQL FETCH data781 INTO
:pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;
CHCKOK ();

tmin = 54 + m;
thr = 22 + h;
tday = 10;
if (tmin < 0)
{
  tmin = tmin + 60;
  thr = thr - 1;
}
if (tmin >= 60)
{
  tmin = tmin - 60;
  thr = thr + 1;
}
if (thr < 0)
{
  thr = thr + 24;
  tday = tday - 1;
}
if (thr >= 24)
{
  thr = thr - 24;
  tday = tday + 1;
}

printf ("min should be %d; its value is %d\n", tmin, mni);
printf ("hr should be %d; its value is %d\n", thr, hr);
printf ("day should be %d; its value is %d\n", tday, dya);
printf ("mon should be 4; its value is %d\n", mon);
printf ("yr should be 1995; its value is %d\n", yr);
if (mni != tmin || hr != thr || dya != tday)
  flag = 0;
if (mon != 4 || yr != 1995)
  flag = 0;

tmin = 28 + m;
thr = 23 + h;
if (tmin < 0)
{
  tmin = tmin + 60;
  thr = thr - 1;
}
if (tmin >= 60)
{
  tmin = tmin - 60;
  thr = thr + 1;
}
if (thr < 0)
{
  thr = thr + 24;
}
if (thr >= 24)
{
  thr = thr - 24;
}

printf ("min2 should be %d; its value is %d\n", tmin, min2);
printf ("hr2 should be %d; its value is %d\n\n", thr, hr2);
if (min2 != tmin || hr2 != thr)
  flag = 0;

/* FETCH data781 */

/* initialise all host variables */
yr = -99;
mon = 99;
dya = 99;
mni = 99;
hr = 99;
min2 = 99;
hr2 = 99;

printf("FETCH data781 INTO\n"); 
printf(":pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;\n"); 
EXEC SQL FETCH data781 INTO
:pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;
CHCKOK ();

tmin = 59 + m;
thr = 11 + h;
tday = 10;
if (tmin < 0)
{
  tmin = tmin + 60;
  thr = thr - 1;
}
if (tmin >= 60)
{
  tmin = tmin - 60;
  thr = thr + 1;
}
if (thr < 0)
{
  thr = thr + 24;
  tday = tday - 1;
}
if (thr >= 24)
{
  thr = thr - 24;
  tday = tday + 1;
}

printf ("min should be %d; its value is %d\n", tmin, mni);
printf ("hr should be %d; its value is %d\n", thr, hr);
printf ("day should be %d; its value is %d\n", tday, dya);
printf ("mon should be 4; its value is %d\n", mon);
printf ("yr should be 1995; its value is %d\n", yr);
if (mni != tmin || hr != thr || dya != tday)
  flag = 0;
if (mon != 4 || yr != 1995)
  flag = 0;

tmin = 31 + m;
thr = 6 + h;
if (tmin < 0)
{
  tmin = tmin + 60;
  thr = thr - 1;
}
if (tmin >= 60)
{
  tmin = tmin - 60;
  thr = thr + 1;
}
if (thr < 0)
{
  thr = thr + 24;
}
if (thr >= 24)
{
  thr = thr - 24;
}

printf ("min2 should be %d; its value is %d\n", tmin, min2);
printf ("hr2 should be %d; its value is %d\n\n", thr, hr2);
if (min2 != tmin || hr2 != thr)
  flag = 0;

/* FETCH data781 */

/* initialise all host variables */
yr = -99;
mon = 99;
dya = 99;
mni = 99;
hr = 99;
min2 = 99;
hr2 = 99;

printf("FETCH data781 INTO\n"); 
printf(":pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;\n"); 
EXEC SQL FETCH data781 INTO
:pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;
CHCKOK ();

tmin = 30 + m;
thr = 19 + h;
tday = 10;
if (tmin < 0)
{
  tmin = tmin + 60;
  thr = thr - 1;
}
if (tmin >= 60)
{
  tmin = tmin - 60;
  thr = thr + 1;
}
if (thr < 0)
{
  thr = thr + 24;
  tday = tday - 1;
}
if (thr >= 24)
{
  thr = thr - 24;
  tday = tday + 1;
}

printf ("min should be %d; its value is %d\n", tmin, mni);
printf ("hr should be %d; its value is %d\n", thr, hr);
printf ("day should be %d; its value is %d\n", tday, dya);
printf ("mon should be 4; its value is %d\n", mon);
printf ("yr should be 1995; its value is %d\n", yr);
if (mni != tmin || hr != thr || dya != tday)
  flag = 0;
if (mon != 4 || yr != 1995)
  flag = 0;

tmin = 49 + m;
thr = 18 + h;
if (tmin < 0)
{
  tmin = tmin + 60;
  thr = thr - 1;
}
if (tmin >= 60)
{
  tmin = tmin - 60;
  thr = thr + 1;
}
if (thr < 0)
{
  thr = thr + 24;
}
if (thr >= 24)
{
  thr = thr - 24;
}

printf ("min2 should be %d; its value is %d\n", tmin, min2);
printf ("hr2 should be %d; its value is %d\n\n", thr, hr2);
if (min2 != tmin || hr2 != thr)
  flag = 0;

printf("CLOSE data781;\n");
EXEC SQL CLOSE data781;
CHCKOK ();
printf("\n");

/* set time zone to value other than local */

printf("SET TIME ZONE INTERVAL '05:41' HOUR TO MINUTE;\n");
EXEC SQL SET TIME ZONE INTERVAL '05:41' HOUR TO MINUTE;

CHCKOK ();
printf("\n");

/* FETCH each row in table TTIME */
/* and check values are altered correctly */

printf("Check each row in TTIME is updated correctly\n");
printf("============================================\n\n");

printf("OPEN data781;\n");
EXEC SQL OPEN data781;
CHCKOK ();
printf("\n");

/* initialise all host variables */
pk1 = 0;
yr = -99;
mon = 99;
dya = 99;
mni = 99;
hr = 99;
min2 = 99;
hr2 = 99;

printf("FETCH data781 INTO\n"); 
printf(":pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;\n"); 
EXEC SQL FETCH data781 INTO
:pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;
CHCKOK ();
printf ("pk1 should be 1; its value is %d\n", pk1);
printf ("yr should be 1995; its value is %d\n", yr);
printf ("mon should be 4; its value is %d\n", mon);
printf ("day should be 10; its value is %d\n", dya);
printf ("hr should be 17; its value is %d\n", hr);
printf ("min should be 41; its value is %d\n", mni);
printf ("hr2 should be 17; its value is %d\n", hr2);
printf ("min2 should be 41; its value is %d\n\n", min2);
if (pk1 != 1 || yr != 1995 || mon != 4)
  flag = 0;
if (dya != 10 || hr != 17 || mni != 41)
  flag = 0;
if (hr2 != 17 || min2 != 41)
  flag = 0;

pk1 = 0;
yr = -99;
mon = 99;
dya = 99;
mni = 99;
hr = 99;
min2 = 99;
hr2 = 99;

printf("FETCH data781 INTO\n"); 
printf(":pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;\n"); 
EXEC SQL FETCH data781 INTO
:pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;
CHCKOK ();
printf ("pk1 should be 2; its value is %d\n", pk1);
printf ("yr should be 1995; its value is %d\n", yr);
printf ("mon should be 4; its value is %d\n", mon);
printf ("day should be 10; its value is %d\n", dya);
printf ("hr should be 7; its value is %d\n", hr);
printf ("min should be 26; its value is %d\n", mni);
printf ("hr2 should be 5; its value is %d\n", hr2);
printf ("min2 should be 56; its value is %d\n\n", min2);
if (pk1 != 2 || yr != 1995 || mon != 4)
  flag = 0;
if (dya != 10 || hr != 7 || mni != 26)
  flag = 0;
if (hr2 != 5 || min2 != 56)
  flag = 0;

pk1 = 0;
yr = -99;
mon = 99;
dya = 99;
mni = 99;
hr = 99;
min2 = 99;
hr2 = 99;

printf("FETCH data781 INTO\n"); 
printf(":pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;\n"); 
EXEC SQL FETCH data781 INTO
:pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;
CHCKOK ();
printf ("pk1 should be 3; its value is %d\n", pk1);
printf ("yr should be 1995; its value is %d\n", yr);
printf ("mon should be 4; its value is %d\n", mon);
printf ("day should be 11; its value is %d\n", dya);
printf ("hr should be 4; its value is %d\n", hr);
printf ("min should be 35; its value is %d\n", mni);
printf ("hr2 should be 5; its value is %d\n", hr2);
printf ("min2 should be 9; its value is %d\n\n", min2);
if (pk1 != 3 || yr != 1995 || mon != 4)
  flag = 0;
if (dya != 11 || hr != 4 || mni != 35)
  flag = 0;
if (hr2 != 5 || min2 != 9)
  flag = 0;

pk1 = 0;
yr = -99;
mon = 99;
dya = 99;
mni = 99;
hr = 99;
min2 = 99;
hr2 = 99;

printf("FETCH data781 INTO\n"); 
printf(":pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;\n"); 
EXEC SQL FETCH data781 INTO
:pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;
CHCKOK ();
printf ("pk1 should be 4; its value is %d\n", pk1);
printf ("yr should be 1995; its value is %d\n", yr);
printf ("mon should be 4; its value is %d\n", mon);
printf ("day should be 10; its value is %d\n", dya);
printf ("hr should be 17; its value is %d\n", hr);
printf ("min should be 40; its value is %d\n", mni);
printf ("hr2 should be 12; its value is %d\n", hr2);
printf ("min2 should be 12; its value is %d\n\n", min2);
if (pk1 != 4 || yr != 1995 || mon != 4)
  flag = 0;
if (dya != 10 || hr != 17 || mni != 40)
  flag = 0;
if (hr2 != 12 || min2 != 12)
  flag = 0;

pk1 = 0;
yr = -99;
mon = 99;
dya = 99;
mni = 99;
hr = 99;
min2 = 99;
hr2 = 99;

printf("FETCH data781 INTO\n"); 
printf(":pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;\n"); 
EXEC SQL FETCH data781 INTO
:pk1, :yr, :mon, :dya, :mni, :hr, :min2, :hr2;
CHCKOK ();
printf ("pk1 should be 5; its value is %d\n", pk1);
printf ("yr should be 1995; its value is %d\n", yr);
printf ("mon should be 4; its value is %d\n", mon);
printf ("day should be 11; its value is %d\n", dya);
printf ("hr should be 1; its value is %d\n", hr);
printf ("min should be 11; its value is %d\n", mni);
printf ("hr2 should be 0; its value is %d\n", hr2);
printf ("min2 should be 30; its value is %d\n\n", min2);
if (pk1 != 5 || yr != 1995 || mon != 4)
  flag = 0;
if (dya != 11 || hr != 1 || mni != 11)
  flag = 0;
if (hr2 != 0 || min2 != 30)
  flag = 0;

printf("CLOSE data781;\n");
EXEC SQL CLOSE data781;
CHCKOK ();
printf("\n");

/* set local time zone to -12:58 */

printf("SET TIME ZONE INTERVAL '-12:58' HOUR TO MINUTE;\n");
EXEC SQL SET TIME ZONE INTERVAL '-12:58' HOUR TO MINUTE;
CHCKOK ();
printf("\n");

/* retrieve count of rows where value in TTV is within */
/* the range 5:00 - 11:00 */

co = 99;
printf("SELECT COUNT (*) INTO :co FROM TTIME\n");
printf("WHERE TT BETWEEN\n");
printf("CAST (TIME '05:00:00' AS TIME WITH TIME ZONE) AND\n");
printf("CAST (TIME '11:00:00' AS TIME WITH TIME ZONE);\n");
EXEC SQL SELECT COUNT (*) INTO :co FROM TTIME
WHERE TT BETWEEN
CAST (TIME '05:00:00' AS TIME WITH TIME ZONE) AND
CAST (TIME '11:00:00' AS TIME WITH TIME ZONE);
CHCKOK ();
printf("co should be 2; its value is %d\n\n", co);
if (co != 2)
   flag = 0;

/* set local time zone to 12:27 */

printf("SET TIME ZONE INTERVAL '12:27' HOUR TO MINUTE;\n");
EXEC SQL SET TIME ZONE INTERVAL '12:27' HOUR TO MINUTE;
CHCKOK ();
printf("\n");

/* retrieve count of rows where value in TTV is within */
/* the range 5:00 - 11:00 */

co = 99;
printf("SELECT COUNT (*) INTO :co FROM TTIME\n");
printf("WHERE TT BETWEEN\n");
printf("CAST (TIME '05:00:00' AS TIME WITH TIME ZONE) AND\n");
printf("CAST (TIME '11:00:00' AS TIME WITH TIME ZONE);\n");
EXEC SQL SELECT COUNT (*) INTO :co FROM TTIME
WHERE TT BETWEEN
CAST (TIME '05:00:00' AS TIME WITH TIME ZONE) AND
CAST (TIME '11:00:00' AS TIME WITH TIME ZONE);
CHCKOK ();
printf("co should be 1; its value is %d\n\n", co);
if (co != 1)
   flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts781.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7536','pass','PC');
       }
     else
       {
          printf("\n\n       yts781.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7536','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7536 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


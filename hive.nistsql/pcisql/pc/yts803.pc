/*  EMBEDDED C (file "YTS803.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS803.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  Support of SQL_SIZING table in documentation schema          */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    FIPS15.2  SQL_Sizing table                                 */
/*    F# 50     Documentation schema                             */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-27                                    */
/*    Added rollback after authid                                */
/*    Removed EXEC SQL from printf                               */
/*    Added FIPS printout                                        */
/*    Reduced severity of coding rule violations                 */
/*    Fixed logic errors                                         */
/*    Added check for existence of all columns                   */
/*    Fixed typos in feature names                               */
/*    Removed extraneous code                                    */
/*    Fixed syntax errors (C language)                           */
/*    Fixed pass criteria                                        */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short co1;
short sid;
char dscc[51];
short entv;
short intv;
short indic1;
short indic2;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
short i;
char S1[51];
char S2[51];
char S3[51];
char S4[51];
char S5[51];
char S6[51];
char S7[51];
char S8[51];
char S9[51];
char S10[51];
char S11[51];
char S12[51];
char S13[51];
char S14[51];
char S15[51];
char S16[51];
char S17[51];
char S18[51];
char S19[51];
char S20[51];
char S21[51];
char S22[51];
char S23[51];
char S24[51];
char S25[51];
char S26[51];
char S27[51];
char S28[51];
char S29[51];
char S30[51];
char S31[51];
char S32[51];
char S33[51];
char S34[51];
char S35[51];
char S36[51];
char S37[51];
char S38[51];
char S39[51];
char S40[51];
char S41[51];
char S42[51];
char S43[51];
char S44[51];
char S45[51];
char S46[51];
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts803.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7549 ********************/
flag = 1;

     printf("               FIPS TEST7549\n");
     printf("   Support SQL_SIZING table in documentation schema\n");
     printf("References:\n");
     printf("    FIPS15.2   SQL_Sizing table\n");
     printf("    F# 50      Documentation schema\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* initialise variables */
i = 1;
/* set up the comparison arrays for SQL_SIZING.Description */

strcpy(S1,"Length of an identifierxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S2,"CHARACTER max lengthxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S3,"CHARACTER VARYING max lengthxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S4,"BIT max length in bitsxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S5,"BIT VARYING max length in bitsxxxxxxxxxxxxxxxxxxxx");
strcpy(S6,"NATIONAL CHARACTER max lengthxxxxxxxxxxxxxxxxxxxxx");
strcpy(S7,"NATIONAL CHAR VARYING max lengthxxxxxxxxxxxxxxxxxx");
strcpy(S8,"NUMERIC decimal precisionxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S9,"DECIMAL decimal precisionxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S10,"INTEGER decimal precisionxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S11,"INTEGER binary precisionxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S12,"SMALLINT decimal precisionxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S13,"SMALLINT binary precisionxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S14,"FLOAT binary mantissa precisionxxxxxxxxxxxxxxxxxxx");
strcpy(S15,"FLOAT binary exponent precisionxxxxxxxxxxxxxxxxxxx");
strcpy(S16,"REAL binary mantissa precisionxxxxxxxxxxxxxxxxxxxx");
strcpy(S17,"REAL binary exponent precisionxxxxxxxxxxxxxxxxxxxx");
strcpy(S18,"DOUBLE PRECISION binary mantissa precisionxxxxxxxx");
strcpy(S19,"DOUBLE PRECISION binary exponent precisionxxxxxxxx");
strcpy(S20,"TIME decimal fractional second precisionxxxxxxxxxx");
strcpy(S21,"TIMESTAMP decimal fractional second precisionxxxxx");
strcpy(S22,"INTERVAL decimal fractional second precisionxxxxxx");
strcpy(S23,"INTERVAL decimal leading field precisionxxxxxxxxxx");
strcpy(S24,"Columns in a tablexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S25,"Values in an INSERT statementxxxxxxxxxxxxxxxxxxxxx");
strcpy(S26,"Set clauses in UPDATE statementxxxxxxxxxxxxxxxxxxx");
strcpy(S27,"Length of a rowxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S28,"Columns in UNIQUE constraintxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S29,"Length of UNIQUE columnsxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S30,"Columns in GROUP BY column listxxxxxxxxxxxxxxxxxxx");
strcpy(S31,"Length of GROUP BY column listxxxxxxxxxxxxxxxxxxxx");
strcpy(S32,"Sort items in ORDER BY clausexxxxxxxxxxxxxxxxxxxxx");
strcpy(S33,"Length of ORDER BY column listxxxxxxxxxxxxxxxxxxxx");
strcpy(S34,"Referencing columns in FOREIGN KEYxxxxxxxxxxxxxxxx");
strcpy(S35,"Length of FOREIGN KEY column listxxxxxxxxxxxxxxxxx");
strcpy(S36,"Table references in an SQL statementxxxxxxxxxxxxxx");
strcpy(S37,"Cursors simultaneously openxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S38,"WHEN clauses in a CASE expressionxxxxxxxxxxxxxxxxx");
strcpy(S39,"Columns in a named columns JOINxxxxxxxxxxxxxxxxxxx");
strcpy(S40,"Length of JOIN column listxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S41,"Items in a SELECT listxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(S42,"Length of SQL <schema definition>xxxxxxxxxxxxxxxxx");
strcpy(S43,"Length of <SQL data statement>xxxxxxxxxxxxxxxxxxxx");
strcpy(S44,"Length of <SQL statement variable>xxxxxxxxxxxxxxxx");
strcpy(S45,"Occurrences in an ALLOCATE DESCRIPTORxxxxxxxxxxxxx");
strcpy(S46,"Default occurrences in ALLOCATE DESCRIPTORxxxxxxxx");

/* declare  cursor to return SIZING_FEATURES */
printf("DECLARE data803 CURSOR FOR;\n");
printf("SELECT SIZING_ID, DESCRIPTION, ENTRY_VALUE,\n");
printf("INTERMEDIATE_VALUE\n");
printf("FROM FIPS_DOCUMENTATION.SQL_SIZING\n");
printf("ORDER BY SIZING_ID;\n\n");

EXEC SQL DECLARE data803 CURSOR FOR
SELECT SIZING_ID, DESCRIPTION, ENTRY_VALUE,
INTERMEDIATE_VALUE
FROM FIPS_DOCUMENTATION.SQL_SIZING
ORDER BY SIZING_ID;

printf("OPEN data803;\n");
EXEC SQL OPEN data803;
CHCKOK ();
printf("\n");

/* check all 46 items in 16.6 of FIPS 127-2 appear */

co1 = 0;
printf("SELECT COUNT (*) INTO :co1\n");
printf("FROM FIPS_DOCUMENTATION.SQL_SIZING;\n");
EXEC SQL SELECT COUNT (*) INTO :co1
FROM FIPS_DOCUMENTATION.SQL_SIZING;
CHCKOK ();
printf("co1 should be 46; its value is %d\n\n", co1);
if (co1 != 46)
   flag = 0;

/* Check existence of all columns */

co1 = 0;
printf("SELECT COUNT (*) INTO :co1\n");
printf("FROM FIPS_DOCUMENTATION.SQL_SIZING\n");
printf("WHERE VALUE_SUPPORTED IS NOT NULL\n");
printf("OR SIZING_COMMENTS IS NOT NULL\n");
printf("OR SIZING_ID IS NOT NULL;\n");
EXEC SQL SELECT COUNT (*) INTO :co1
FROM FIPS_DOCUMENTATION.SQL_SIZING
WHERE VALUE_SUPPORTED IS NOT NULL
OR SIZING_COMMENTS IS NOT NULL
OR SIZING_ID IS NOT NULL;
CHCKOK ();
printf("co1 should be 46; its value is %d\n\n", co1);
if (co1 != 46)
   flag = 0;

/* return and check all values of cursor */

P100:

/* initialise all host variables before FETCH */
   sid = 0;
   strcpy(dscc,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
   entv = -10;
   intv = -10;
   indic1 = 99;
   indic2 = 99;

   printf("FETCH data803 \n");
   printf("INTO :sid,:dscc,:entv:indic1,:intv:indic2;\n");
   EXEC SQL FETCH data803 
     INTO :sid,:dscc,:entv:indic1,:intv:indic2;
   if (SQLCODE != 0)
     goto P102;
   CHCKOK ();

   /* check the next sizing identifier returned was the one anticipated */
P101:
  if (sid != i && i < 47)
   {
      printf("********** ERROR -- FEATURE NUMBER %d IS MISSING\n", i);
      i = i + 1;
      flag = 0;
      goto P101;
   }

   /* check correct values are returned for each SIZING constraint */
   if (sid == 1)
   {
      if (strncmp(dscc,S1,23) != 0 || entv != 18 || intv != 128)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #1 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 2)
   {
      if (strncmp(dscc,S2,20) != 0 || entv != 240 || intv != 1000)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #2 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 3)
   {
      if (strncmp(dscc,S3,28) != 0 || entv != 254 || intv != 1000)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #3 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 4)
   {
      if (strncmp(dscc,S4,22) != 0 || indic1 != -1 || intv != 8000)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #4 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 5)
   {
      if (strncmp(dscc,S5,30) != 0 || indic1 != -1 || intv != 8000)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #5 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 6)
   {
      if (strncmp(dscc,S6,29) != 0 || indic1 != -1 || intv != 500)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #6 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 7)
   {
      if (strncmp(dscc,S7,32) != 0 || indic1 != -1 || intv != 500)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #7 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 8)
   {
      if (strncmp(dscc,S8,25) != 0 || entv != 15 || intv != 15)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #8 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 9)
   {
      if (strncmp(dscc,S9,25) != 0 || entv != 15 || intv != 15)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #9 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 10)
   {
      if (strncmp(dscc,S10,25) != 0 || entv != 9 || indic2 != -1)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #10 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 11)
   {
      if (strncmp(dscc,S11,24) != 0 || indic1 != -1 || intv != 31)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #11 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 12)
   {
      if (strncmp(dscc,S12,26) != 0 || entv != 4 || indic2 != -1)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #12 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 13)
   {
      if (strncmp(dscc,S13,25) != 0 || indic1 != -1 || intv != 15)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #13 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 14)
   {
      if (strncmp(dscc,S14,31) != 0 || entv != 20 || intv != 47)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #14 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 15)
   {
      if (strncmp(dscc,S15,31) != 0 || indic1 != -1 || intv != 9)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #15 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 16)
   {
      if (strncmp(dscc,S16,30) != 0 || entv != 20 || intv != 23)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #16 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 17)
   {
      if (strncmp(dscc,S17,30) != 0 || indic1 != -1 || intv != 7)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #17 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 18)
   {
      if (strncmp(dscc,S18,42) != 0 || entv != 30 || intv != 47)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #18 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 19)
   {
      if (strncmp(dscc,S19,42) != 0 || indic1 != -1 || intv != 9)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #19 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 20)
   {
      if (strncmp(dscc,S20,40) != 0 || indic1 != -1 || intv != 0)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #20 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 21)
   {
      if (strncmp(dscc,S21,45) != 0 || indic1 != -1 || intv != 6)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #21 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 22)
   {
      if (strncmp(dscc,S22,44) != 0 || indic1 != -1 || intv != 6)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #22 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 23)
   {
      if (strncmp(dscc,S23,40) != 0 || indic1 != -1 || intv != 7)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #23 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 24)
   {
      if (strncmp(dscc,S24,18) != 0 || entv != 100 || intv != 250)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #24 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 25)
   {
      if (strncmp(dscc,S25,29) != 0 || entv != 100 || intv != 250)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #25 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 26)
   {
      if (strncmp(dscc,S26,31) != 0 || entv != 20 || intv != 250)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #26 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 27)
   {
      if (strncmp(dscc,S27,15) != 0 || entv != 2000 || intv != 8000)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #27 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 28)
   {
      if (strncmp(dscc,S28,28) != 0 || entv != 6 || intv != 15)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #28 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 29)
   {
      if (strncmp(dscc,S29,24) != 0 || entv != 120 || intv != 750)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #29 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 30)
   {
      if (strncmp(dscc,S30,31) != 0 || entv != 6 || intv != 15)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #30 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 31)
   {
      if (strncmp(dscc,S31,30) != 0 || entv != 120 || intv != 750)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #31 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 32)
   {
      if (strncmp(dscc,S32,29) != 0 || entv != 6 || intv != 15)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #32 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 33)
   {
      if (strncmp(dscc,S33,30) != 0 || entv != 120 || intv != 750)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #33 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 34)
   {
      if (strncmp(dscc,S34,34) != 0 || entv != 6 || intv != 15)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #34 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 35)
   {
      if (strncmp(dscc,S35,33) != 0 || entv != 120 || intv != 750)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #35 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 36)
   {
      if (strncmp(dscc,S36,36) != 0 || entv != 15 || intv != 50)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #36 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 37)
   {
      if (strncmp(dscc,S37,27) != 0 || entv != 10 || intv != 100)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #37 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 38)
   {
      if (strncmp(dscc,S38,33) != 0 || indic1 != -1 || intv != 50)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #38 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 39)
   {
      if (strncmp(dscc,S39,31) != 0 || indic1 != -1 || intv != 15)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #39 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 40)
   {
      if (strncmp(dscc,S40,26) != 0 || indic1 != -1 || intv != 750)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #40 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 41)
   {
      if (strncmp(dscc,S41,22) != 0 || entv != 100 || intv != 250)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #41 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 42)
   {
      if (strncmp(dscc,S42,33) != 0 || indic1 != -1 || intv != 30000)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #42 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 43)
   {
      if (strncmp(dscc,S43,30) != 0 || indic1 != -1 || intv != 4000)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #43 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 44)
   {
      if (strncmp(dscc,S44,34) != 0 || indic1 != -1 || intv != 4000)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #44 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 45)
   {
      if (strncmp(dscc,S45,37) != 0 || indic1 != -1 || intv != 100)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #45 incorrect\n");
         flag = 0;
      }
   }
   if (sid == 46)
   {
      if (strncmp(dscc,S46,42) != 0 || indic1 != -1 || intv != 100)
      {
     printf("********** ERROR -- Reference to SIZING_FEATURE #46 incorrect\n");
         flag = 0;
      }
   }
   if (sid < 1 || sid > 46)
   { printf("Incorrect value for SIZING_ID\n");
     flag = 0;
   }

  i = i + 1;
  goto P100;

P102:
printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
printf ("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (SQLCODE != 100 || strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");
  if (i != 47)
     {
       printf("Incorrect number of rows returned!\n\n");
       flag = 0;
     }

printf("CLOSE data803\n");
EXEC SQL CLOSE data803;
CHCKOK ();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts803.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7549','pass','PC');
       }
     else
       {
          printf("\n\n       yts803.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7549','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7549 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

/*  EMBEDDED C (file " XTS732.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS732.PC                                                   */
/*  WRITTEN  BY: Manolis Megaloikonomou                          */
/*  REVIEWED BY: Nickos  Backalidis                              */
/*                                                               */
/*  NATURAL FULL OUTER JOIN <table ref> -- static.               */
/*                                                               */
/*  REFERENCES                                                   */
/*     7.10   -- <query expression>                              */
/*     6.3    -- <table reference>.                              */
/*     7.5    -- <joined table>.                                 */
/*     7.5  SR.2a                                                */
/*     7.5  GR.1d                                                */
/*     F#4  -- Joined table.                                     */
/*     F#11 -- Transaction isolation.                            */
/*     F#40 -- Full outer join.                                  */
/*                                                               */
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 06/12/95:                   */
/*       ROLLBACK after AUTHID                                   */
/*       Remove multiple SQLCODE/SQLSTATE initializations        */
/*       Clean-up database at the end of test                    */
/*       Include host variable initialisation                    */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-02-06                                    */
/*    Fixed violations of coding rules                           */
/*    Removed status checks after cursor definitions             */
/*    Corrected expected results                                 */
/*    Corrected SQL syntax errors                                */
/*    Fixed SDL transactions                                     */
/*    Cleanup at end of test                                     */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK(); 

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 long coun;
 long xtnum1;
 long xtnum2;
 char xtchar1[11];
 char xtchar2[11];
 short indic1;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts732.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run:  %s\n", ctime(&cal));

/******************** BEGIN TEST7032 ********************/

flag = 1;
printf("                  TEST7032 \n");
printf("    NATURAL FULL OUTER JOIN <table ref> -- static.\n");
printf("References:\n");
printf("    7.10 -- <query expression>.\n");
printf("    6.3  -- <Table reference>.\n");
printf("    7.5  -- <joined table>.\n");
printf("    7.5  SR.2a\n");
printf("    7.5  GR.1d\n");
printf("    F#4  -- Joined table.\n");
printf("    F#11 -- Transaction isolation.\n");
printf("    F#40 -- Full outer join.\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

/* Ensure FULL OUTER JOIN returns expected value 0 */
coun = 99;
printf("SELECT COUNT(*) INTO :coun\n");
printf("FROM TEST6740A NATURAL FULL OUTER JOIN TEST6740B;\n");
EXEC SQL SELECT  COUNT(*) INTO :coun
         FROM TEST6740A NATURAL FULL OUTER JOIN TEST6740B;
CHCKOK();
printf("Coun should be 0; its value is %ld\n",coun);
if (coun != 0)
   flag = 0;
printf("\n");

/* ensure NATURAL FULL JOIN returns expected value 0 */
coun = 99;
printf("SELECT COUNT(*) INTO :coun \n");
printf("FROM TEST6740A NATURAL FULL JOIN TEST6740B;\n");
EXEC SQL SELECT COUNT(*) INTO :coun
         FROM TEST6740A NATURAL FULL JOIN TEST6740B;
CHCKOK();
printf("Coun should be 0 its value is  %ld\n",coun);
if (coun != 0)
   flag = 0;
printf("\n");

/* Insert alpha row of non null values into TEST6740A */
printf("INSERT INTO TEST6740A VALUES (1,'AA');\n");
EXEC SQL INSERT INTO TEST6740A VALUES (1,'AA');
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* To my immense surprise, this is legal.  You don't need the SELECT */
/* if it's a <joined table>. -- DWF */

printf("DECLARE alpha CURSOR\n");
printf("FOR TEST6740A NATURAL FULL JOIN TEST6740B FOR READ ONLY;\n\n");
EXEC SQL DECLARE alpha CURSOR
         FOR TEST6740A NATURAL FULL JOIN TEST6740B FOR READ ONLY;

/* Result should be: */
/* TNUM TCHARA TCHARB */
/* ---- ------ ------ */
/*   1    AA    NULL  */

printf("OPEN alpha;\n");
EXEC SQL OPEN alpha;
CHCKOK();
printf("\n");

/* Initialise host variables */
xtnum1 = 999;
indic1 = 999;
strcpy(xtchar1,"xxxxxxxxxx");

printf("FETCH alpha INTO :xtnum1, :xtchar1, :xtchar2:indic1;\n");
EXEC SQL FETCH alpha 
         INTO :xtnum1, :xtchar1, :xtchar2:indic1;
CHCKOK();
printf("xtnum1 should be 1; its value is %ld\n", xtnum1);
printf("xtchar1 should be AA; its value is %s\n", xtchar1);
printf("indic1 should be -1; its value is %d\n", indic1);
if (xtnum1 != 1 || strncmp(xtchar1,"AA",2) != 0)
  flag = 0;
if (indic1 != -1)
  flag = 0;
printf("\n");

printf("CLOSE alpha;\n");
EXEC SQL CLOSE alpha;
CHCKOK();
printf("\n");

printf("DECLARE beta CURSOR\n");
printf("FOR TEST6740B NATURAL FULL JOIN TEST6740A FOR READ ONLY;\n\n");
EXEC SQL DECLARE beta CURSOR
         FOR TEST6740B NATURAL FULL JOIN TEST6740A FOR READ ONLY;

/* Result should be: */
/* TNUM TCHARB TCHARA */
/* ---- ------ ------ */
/*   1   NULL    AA   */

printf("OPEN beta;\n");
EXEC SQL OPEN beta;
CHCKOK();
printf("\n");

/* Initialise host variables */
xtnum1 = 999;
indic1 = 999;
strcpy(xtchar2,"xxxxxxxxxx");

printf("FETCH beta INTO :xtnum1, :xtchar1:indic1, :xtchar2;\n");
EXEC SQL FETCH beta 
         INTO :xtnum1, :xtchar1:indic1, :xtchar2;
CHCKOK();
printf("xtnum1 should be 1; its value is %ld\n", xtnum1);
printf("xtchar2 should be AA; its value is %s\n", xtchar2);
printf("indic1 should be -1; its value is %d\n", indic1);
if (xtnum1 != 1 || strncmp (xtchar2,"AA",2) != 0)
  flag = 0;
if (indic1 != -1)
  flag = 0;
printf("\n");

printf("CLOSE beta;\n");
EXEC SQL CLOSE beta;
CHCKOK();
printf("\n");

/* Insert two rows of non null values into TEST6740B. */
printf("INSERT INTO TEST6740B VALUES (1,'WW');\n");
EXEC SQL INSERT INTO TEST6740B VALUES (1,'WW');
CHCKOK();
printf("\n");

printf("INSERT INTO TEST6740B VALUES (3,'ZZ');\n");
EXEC SQL INSERT INTO TEST6740B VALUES (3,'ZZ');
CHCKOK();
printf("\n");

/* TEST6740A NATURAL FULL OUTER JOIN TEST6740B is now */
/* TNUM TCHARA TCHARB */
/* ---- ------ ------ */
/*   1    AA     WW   */
/*   3   NULL    ZZ   */

coun = 99;
printf("SELECT COUNT(*) INTO :coun \n");
printf("FROM TEST6740A NATURAL FULL OUTER JOIN TEST6740B;\n");
EXEC SQL SELECT COUNT(*) INTO :coun
         FROM TEST6740A NATURAL FULL OUTER JOIN TEST6740B;
CHCKOK();
printf("coun should be 2; its value is %ld\n",coun);
if (coun != 2)
   flag = 0;
printf("\n");

coun = 99;
printf("SELECT COUNT(*) INTO :coun \n");
printf("FROM TEST6740B NATURAL FULL JOIN TEST6740A;\n");
EXEC SQL SELECT COUNT(*) INTO :coun
         FROM TEST6740B NATURAL FULL JOIN TEST6740A;
CHCKOK();
printf("coun should be 2; its value is %ld\n",coun);
if (coun != 2)
   flag = 0;
printf("\n");

/* Insert two rows into TEST6740C. */
printf("INSERT INTO TEST6740C VALUES(6,'PP');\n");
EXEC SQL INSERT INTO TEST6740C VALUES(6,'PP');
CHCKOK();
printf("\n");

printf("INSERT INTO TEST6740C VALUES(7,'QQ');\n");
EXEC SQL INSERT INTO TEST6740C VALUES(7,'QQ');
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* Create view TESTV6740 */
printf("CREATE VIEW TESTV6740 (VNUM1, VCHAR1, VNUM2, VCHAR2)\n");
printf("AS TEST6740C NATURAL FULL OUTER JOIN TEST6740A;\n");
EXEC SQL CREATE VIEW TESTV6740 (VNUM1, VCHAR1, VNUM2, VCHAR2)
         AS TEST6740C NATURAL FULL OUTER JOIN TEST6740A;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* Contents of TESTV6740: */
/* VNUM1 VCHAR1 VNUM2 VCHAR2 */
/* ----- ------ ----- ------ */
/*   6     PP     1     AA   */
/*   7     QQ     1     AA   */

printf("DECLARE gamma CURSOR\n");
printf("FOR SELECT * FROM TESTV6740 ORDER BY VNUM1;\n\n");
EXEC SQL DECLARE gamma CURSOR
         FOR SELECT * FROM TESTV6740 ORDER BY VNUM1;

printf("OPEN gamma;\n");
EXEC SQL OPEN gamma;
CHCKOK();
printf("\n");

xtnum1 = 999;
xtnum2 = 999;
strcpy(xtchar1,"xxxxxxxxxx");
strcpy(xtchar2,"xxxxxxxxxx");

printf("FETCH gamma INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2;\n");
EXEC SQL FETCH gamma INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2;
CHCKOK();
printf("xtnum1 should be   6; its value is %ld\n", xtnum1);
printf("xtchar1 should be PP; its value is %s\n", xtchar1);
printf("xtnum2 should be   1; its value is %ld\n", xtnum2);
printf("xtchar2 should be AA; its value is %s\n", xtchar2);
if (xtnum1 != 6 || strncmp(xtchar1,"PP",2) != 0)
   flag = 0;
if (xtnum2 != 1 || strncmp(xtchar2,"AA",2) != 0)
   flag = 0;
printf("\n");

xtnum1 = 999;
xtnum2 = 999;
strcpy(xtchar1,"xxxxxxxxxx");
strcpy(xtchar2,"xxxxxxxxxx");

printf("FETCH gamma INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2;\n");
EXEC SQL FETCH gamma INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2;
CHCKOK();
printf("xtnum1 should be   7; its value is %ld\n", xtnum1);
printf("xtchar1 should be QQ; its value is %s\n", xtchar1);
printf("xtnum2 should be   1; its value is %ld\n", xtnum2);
printf("xtchar2 should be AA; its value is %s\n", xtchar2);
if ( xtnum1 != 7  || strncmp(xtchar1,"QQ",2) != 0 )
   flag = 0;
if (xtnum2 != 1 || strncmp(xtchar2,"AA",2) != 0 )
   flag = 0;
printf("\n");

printf("CLOSE gamma;\n");
EXEC SQL CLOSE gamma;
CHCKOK();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

printf("DELETE FROM TEST6740A;\n");
EXEC SQL DELETE FROM TEST6740A;
CHCKOK();
printf("\n");

printf("DELETE FROM TEST6740B;\n");
EXEC SQL DELETE FROM TEST6740B;
CHCKOK();
printf("\n");

printf("DELETE FROM TEST6740C;\n");
EXEC SQL DELETE FROM TEST6740C;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DROP VIEW TESTV6740 CASCADE;\n");
EXEC SQL DROP VIEW TESTV6740 CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

 /* now record results */

     if ( flag == 1 )
       {
          printf("\n\n       xts732.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7032','pass','PC');
       }
     else
       {
          printf("\n\n       xts732.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7032','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

EXEC SQL COMMIT WORK;

/******************** END TEST7032 *********************/

exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

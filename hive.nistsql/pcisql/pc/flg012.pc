/*  EMBEDDED C (file "FLG012.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1994/12/27 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  FLG012.PC                                                    */
/*  WRITTEN BY:  David W. Flater                                 */
/*                                                               */
/*  This routine tests an extension to FIPS SQL.                 */
/*                                                               */
/*  REFERENCES                                                   */
/*    XOP703.PC -- X/O,CREATE INDEX on existent/non-existent     */
/*      tables (Colin O'Driscoll)                                */
/*    X/Open CAE SQL 5.3.3                                       */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"FLATER            ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;

printf("SQL Test Suite, V6.0, Embedded C, flg012.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0832 ********************/
flag = 2;

     /* If this test will not compile the result is 'nogo'. */

     printf("                  TEST0832 \n");
     printf("        FIPS Flagger - CREATE INDEX\n");
     printf("References:\n");
     printf("    X/Open CAE SQL 5.3.3\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf ("The next statement should be flagged or rejected.\n\n");

printf("CREATE INDEX II1 ON USIG(C1);\n");
EXEC SQL CREATE INDEX II1 ON USIG(C1);
printf ("SQLCODE is %ld\n", SQLCODE);
SQLSTATE[5] = '\0';
printf ("SQLSTATE is %s\n\n", SQLSTATE);

if (SQLCODE < 0)
  flag = flag - 1;

printf ("The next statement should be flagged or rejected.\n\n");

printf("CREATE UNIQUE INDEX II2 ON USIG(C_1);\n");
EXEC SQL CREATE UNIQUE INDEX II2 ON USIG(C_1);
printf ("SQLCODE is %ld\n", SQLCODE);
SQLSTATE[5] = '\0';
printf ("SQLSTATE is %s\n\n", SQLSTATE);

if (SQLCODE < 0)
  flag = flag - 1;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;

  if (flag == 0)
  {
    printf ("\n\n  The extension does not appear to be supported.\n");
    printf ("  Support for CREATE INDEX is not required.\n");
    EXEC SQL INSERT INTO HU.TESTREPORT
    VALUES('0832','nogo','PC');
    errcnt = errcnt + 1;
  }
  else
  {
    printf ("\n\n  SQL extension CREATE INDEX executed successfully\n");
    printf ("  (2 tries, %d worked).\n", flag);
    printf ("  Vendor must demonstrate FIPS flagger WARNING.\n");
    EXEC SQL INSERT INTO HU.TESTREPORT
    VALUES('0832','pass','PC');
  }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0832 *********************/

     exit(errcnt);
}

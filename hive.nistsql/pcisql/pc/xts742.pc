/*  EMBEDDED C (file " XTS742.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS742.PC       TEST7042                                    */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  COUNT ALL <literal>                                          */ 
/*                                                               */
/*  REFERENCES                                                   */
/*    6.5  --  <set function specification>                      */
/*    6.5  GR.1b                                                 */
/*    5.3  --  <Literal>                                         */
/*    F#44 --  Intermediate set function                         */
/*                                                               */ 
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 08/12/95                    */
/*         Print timestamp                                       */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*                                                               */
/*  QA STATUS : FC                                               */
/*                                                               */
/*  Revised by DWF 1996-02-09                                    */
/*    Harmonized printouts with statements                       */
/*    Fixed expected results                                     */
/*    Fixed coding rules violations                              */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 long cound;
 long counst;
 long counum;
 long cnall;
 long cncol1;
 long cncol2;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts742.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf(" \n Time Run :  %s \n ", ctime(&cal));

/******************** BEGIN TEST7042 ********************/

flag = 1;
printf("           TEST7042  \n");
printf("    COUNT ALL <literal> \n");
printf("References:\n");
printf("    6.5  -- <set function specification>\n");
printf("    6.5  GR.1b\n");
printf("    5.3  -- <Literal>\n");
printf("    F#44 -- Intermediate set function\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* Initialise host variables */
counst=0;
cound=0;
counum=0;
cnall=0;
cncol1=0;
cncol2=0;

printf("SELECT COUNT(ALL 115.5),COUNT(ALL 'ATHINA'), COUNT(ALL 255),\n");
printf("COUNT(*) INTO :counst, :cound, :counum, :cnall FROM CL_DATA_TYPE; \n");
EXEC SQL SELECT COUNT(ALL 115.5), COUNT(ALL 'ATHINA'), COUNT(ALL 255), 
         COUNT(*) INTO :counst,:cound,:counum,:cnall FROM CL_DATA_TYPE;
CHCKOK();
printf("counst should be 6; its value is %ld \n", counst);
printf("cound  should be 6; its value is %ld \n", cound);
printf("counum should be 6; its value is %ld \n", counum);
printf("cnall  should be 6; its value is %ld \n", cnall);
if (counst != 6 || cound != 6 || counum != 6 || cnall != 6)
    flag = 0;
printf("\n");

/* insert two more rows in the table CL_DATA_TYPE */
printf("INSERT INTO CTS1.CL_DATA_TYPE VALUES(NULL,55,225,10);\n");
EXEC SQL INSERT INTO CTS1.CL_DATA_TYPE VALUES(NULL,55,225,10);
CHCKOK();
printf("\n");

printf("INSERT INTO CTS1.CL_DATA_TYPE VALUES(NULL,15,140,NULL);\n");
EXEC SQL INSERT INTO CTS1.CL_DATA_TYPE VALUES(NULL,15,140,NULL);
CHCKOK();
printf("\n");

/* Initialise host variables */
counst=0;
cound=0;
counum=0;
cnall=0;
cncol1=0;
cncol2=0;

printf("SELECT COUNT(*),COUNT(ALL 119),COUNT(ALL 'GIORGOS'),COUNT(CL_CHAR)\n");
printf("COUNT(CL_REAL) INTO : cnall, : counum, :counst, :cncol1,"); 
printf(":cncol2 FROM CL_DATA_TYPE;\n");
EXEC SQL SELECT COUNT(*),COUNT(ALL 119), COUNT(ALL 'GIORGOS') ,COUNT(CL_CHAR),
         COUNT(CL_REAL) INTO :cnall, :counum, :counst, :cncol1, :cncol2 
         FROM CL_DATA_TYPE;
printf("cnall  should be 8; its value is %ld \n", cnall);
printf("counum should be 8; its value is %ld \n", counum);
printf("counst should be 8; its value is %ld \n", counst);
printf("cncol1 should be 6; its value is %ld \n", cncol1);
printf("cncol2 should be 7; its value is %ld \n", cncol2);
printf("SQLSTATE should be 01003; its value is %s\n",SQLSTATE);
if (counst != 8 || counum != 8 || cnall != 8)
  flag = 0;
if (cncol1 != 6 || cncol2 != 7)
    flag = 0;
if (strncmp(SQLSTATE,"01003",5) != 0)
  flag = 0;
printf("\n");

/* insert one row with null values in the table */ 
printf("INSERT INTO CTS1.CL_DATA_TYPE VALUES(NULL,0,0,NULL);\n");
EXEC SQL INSERT INTO CTS1.CL_DATA_TYPE VALUES(NULL,0,0,NULL);
CHCKOK();
printf("\n");

/* Initialise host variables */
counst=0;
cound=0;
counum=0;
cnall=0;
cncol1=0;
cncol2=0;

printf("SELECT COUNT(*),COUNT(ALL 1000),COUNT(ALL'STEFOS'),COUNT(CL_CHAR)\n");
printf("COUNT(CL_REAL) INTO :cnall, :counum, :counst, :cncol1, :cncol2"); 
printf("FROM CL_DATA_TYPE;\n");
EXEC SQL SELECT COUNT(*), COUNT(ALL 1000), COUNT(ALL 'STEFOS'),COUNT(CL_CHAR),
         COUNT(CL_REAL) INTO : cnall, :counum, :counst, :cncol1, :cncol2
         FROM CL_DATA_TYPE;
printf("counst should be 9; its value is %ld \n", counst);
printf("counum should be 9; its value is %ld \n", counum);
printf("cnall  should be 9; its value is %ld \n", cnall);
printf("cncol1 should be 6; its value is %ld \n", cncol1);
printf("cncol2 should be 7; its value is %ld \n", cncol2);
printf("SQLSTATE should be 01003; its value is %s\n",SQLSTATE);
if (counst != 9 || counum != 9 || cnall != 9)
  flag = 0;
if (cncol1 != 6 || cncol2 != 7)
    flag = 0;
if (strncmp(SQLSTATE,"01003",5) != 0)
  flag = 0;
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

   if (flag == 1 )
       {
          printf("\n\n       xts742.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7042','pass','PC');
       }
     else
       {
          printf("\n\n       xts742.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7042','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;

/******************** END TEST7042 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

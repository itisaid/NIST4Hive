/*  EMBEDDED C (file " XTS728.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS728.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*   Flagging Full SQL - <null predicate> with two-col row       */
/*                                                               */
/*  REFERENCES                                                   */
/*    8.6  -- <null predicate>                                   */
/*    7.1  -- <row value constructor>                            */
/*    7.1 LR.1a -- Intermediate SQL restriction which prohibits  */
/*                 the use of more than one <row value           */
/*                 constructor element> in a <row value          */
/*                 constructor> that is not simply contained in  */
/*                 a <table value constructor>                   */
/*    F#37 -- Intermediate SQL Flagging.                         */
/*                                                               */
/*  DATE LAST ALTERED  12/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 04/12/95                    */
/*                                                               */
/*  QA Status: QA Check                                          */
/*                                                               */
/*  Revised by DWF 1996-02-01                                    */
/*    Fixed char string lengths                                  */
/*    Deleted extraneous reference to 7.1 SR.1                   */
/*    Removed CHCKOK after no data delete                        */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 char c_ch1[11];
 char c_ch2[11];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts728.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run:  %s\n",  ctime(&cal));

/******************** BEGIN TEST7028 ********************/
 flag = 1;
 printf("               TEST7028\n"); 
 printf("    Flagging,Full SQL,<null predicate> with two-col row\n");
 printf(" References \n");
 printf("    8.6 --    <null predicate>\n");
 printf("    7.1 --    <row value constructor>\n");
 printf("    7.1 LR.1a Intermediate SQL restriction which prohibits\n");
 printf("              the use of more than one <row value constructor\n");
 printf("              element> in a <row value constructor> that is not\n");
 printf("              simply contained in a <table value constructor>\n");
 printf("    F#37 --   Intermediate SQL Flagging.\n");
 printf("   - - - - - - - - - - - - - - - - - - -\n\n"); 

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

/* use tables TABLE728a and TABLE728b from the standard schema */
/* Make sure that table728b is empty */
printf("DELETE FROM CTS1.TABLE728b;\n\n");
EXEC SQL DELETE FROM CTS1.TABLE728b;

/* execute the following query */
/* if a syntax error does not occur then all the */
/* columns of TABLE728a that are not NULL **/
/* will be copied in TABLE728b */
printf("INSERT INTO CTS1.TABLE728b\n");
printf("SELECT * FROM CTS1.TABLE728a\n");
printf("WHERE (C1,C2) IS NOT NULL;\n");
EXEC SQL INSERT INTO CTS1.TABLE728b
         SELECT * FROM CTS1.TABLE728a
         WHERE (C1,C2) IS NOT NULL;
CHCKOK();
printf("\n");

/* initialise host variables */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");

/* Use two select statement(s):single row and examine the */
/* contents of table CTS1.728b */
/* 1st select */
printf("SELECT COL_1,COL_2 INTO :c_ch1, :c_ch2\n");
printf("FROM CTS1.TABLE728b\n");  
printf("WHERE COL_1 = 'NICKOS' AND COL_2 = 'GEORGE';\n");
EXEC SQL SELECT COL_1,COL_2 INTO :c_ch1,:c_ch2
         FROM CTS1.TABLE728b
         WHERE COL_1 = 'NICKOS' AND COL_2 = 'GEORGE';
CHCKOK();
printf("COL_1 should be NICKOS; its value is %s\n",c_ch1);
printf("COL_2 should be GEORGE; its value is %s\n",c_ch2);
if (strncmp(c_ch1,"NICKOS",6)!=0 || strncmp(c_ch2,"GEORGE",6)!=0)
   flag = 0;
printf("\n");

/* initialise host variables */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");

/* 2nd SELECT  */ 
printf("SELECT COL_1,COL_2 INTO :c_ch1, :c_ch2\n");
printf("FROM CTS1.TABLE728b\n");  
printf("WHERE COL_1 = 'HARRY' AND COL_2 = 'TANIA';\n");
EXEC SQL SELECT COL_1,COL_2 INTO :c_ch1,:c_ch2
         FROM CTS1.TABLE728b
         WHERE COL_1 = 'HARRY' AND COL_2 = 'TANIA';
CHCKOK();
printf("COL_1 should be HARRY; its value is %s\n",c_ch1);
printf("COL_2 should be TANIA; its value is %s\n",c_ch2);
if (strncmp(c_ch1,"HARRY",5)!=0 || strncmp(c_ch2,"TANIA",5)!=0)
   flag = 0;
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* record results */

     if ( flag == 1 )
       {
        printf("\n\n       xts728.pc  *** pass *** \n");
        EXEC SQL INSERT INTO CTS1.TESTREPORT
        VALUES('7028','pass','PC');
        printf("Intermediate SQL extension\n");
        printf("<Null predicate> with two-col row\n");
        printf("executed successfully.\n");
        printf("Vendor must demonstrate Intermediate Flagger WARNING\n");
       }
     else
       {
        printf("\n\n       xts728.pc  *** NOGO *** \n");
        EXEC SQL INSERT INTO CTS1.TESTREPORT
        VALUES('7028','NOGO','PC');
        printf("Vendor does not support fully \n");
        printf("Intermediate SQL extension \n");
        printf("Support <null predicate> with two-col row is not required\n");
       }
     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7028 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

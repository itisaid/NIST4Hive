/*  EMBEDDED C (file "YTS810.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS810.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  This routine tests FULL OUTER JOIN <table ref> ON            */
/*  <search condition> -- Dynamic                                */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    7.5      <joined table>                                    */
/*    7.5 SR5                                                    */
/*    7.5 GR1c                                                   */
/*    7.5 GR5d                                                   */
/*    7.5 GR6b                                                   */
/*    17.1     Description of SQL item descriptor area           */
/*    17.2     <allocate descriptor statement>                   */
/*    17.3     <deallocate descriptor statement>                 */
/*    17.4     <get descriptor statement>                        */
/*    17.6     <prepare statement>                               */
/*    17.7     <deallocate prepared statement>                   */
/*    17.8     <describe statement>                              */
/*    17.9     <using clause>                                    */
/*    17.12    <dynamic declare cursor>                          */
/*    17.14    <dynamic open statement>                          */
/*    17.15    <dynamic fetch statement>                         */
/*    17.16    <dynamic close statement>                         */
/*    F#4      Joined table.                                     */
/*    F#40     Full outer join                                   */
/*    F#1      Dynamic SQL                                       */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*  13th December 1995 strings initialised to their exact length */
/*  variables of type long printed out using %ld                 */
/*  typo in print statements removed                             */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-04-01                                    */
/*    Added rollback after authid                                */
/*    Removed EXEC SQL from printfs                              */
/*    Replaced inserts to provide primary key                    */
/*    Fixed type clashes                                         */
/*    Fixed coding rule violations                               */
/*    Fixed wrong printouts                                      */
/*    Fixed broken join                                          */
/*    Fixed descriptor usage                                     */
/*    Fixed char string lengths                                  */
/*    Fixed syntax errors                                        */
/*    Fixed SDL transactions                                     */
/*    Dropped views when done                                    */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char colnam[26];
long coltyp;
long grd;
char eno[4];
short grpno;
short indic1;
char uid[19];
char uidx[19];
char longst[241];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
short i;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts810.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7567 ********************/
flag = 1;

     printf("                  TEST7567 \n");
     printf("  FULL OUTER JOIN<table ref>ON<search condition> dyn\n"); 
     printf("References:\n");
     printf("    7.5     <joined table>\n");
     printf("    7.5 SR5\n");
     printf("    7.5 GR1c\n");
     printf("    7.5 GR5d\n");
     printf("    7.5 GR6b\n");
     printf("    17.1  Description of SQL item descriptor areas\n");
     printf("    17.2  <allocate descriptor statement\n");
     printf("    17.3  <deallocate descriptor statement\n");
     printf("    17.4  <get descriptor statement>\n");
     printf("    17.6  <prepare statement>\n");
     printf("    17.7  <deallocate prepared statement>\n");
     printf("    17.8  <describe statement>\n");
     printf("    17.9  <using clause>\n");
     printf("    17.12 <dynamic declare cursor>\n");
     printf("    17.14 <dynamic open statement>\n");
     printf("    17.15 <dynamic fetch statement>\n");
     printf("    17.16 <dynamic close statement>\n");
     printf("    F#4   Joined table\n");
     printf("    F#40  Full outer join\n");
     printf("    F#1   Dynamic SQL\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("CREATE VIEW TA\n");
printf("AS SELECT GRADE, DEPTNO, LOC, HOURS\n");
printf("FROM CTS1.CL_EMPLOYEE;\n");
EXEC SQL CREATE VIEW TA
AS SELECT GRADE, DEPTNO, LOC, HOURS
FROM CTS1.CL_EMPLOYEE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("CREATE VIEW TB\n");
printf("AS SELECT EMPNAME, HOURS, EMPNUM, SALARY, PNUM\n");
printf("FROM CTS1.STAFFa;\n");
EXEC SQL CREATE VIEW TB
AS SELECT EMPNAME, HOURS, EMPNUM, SALARY, PNUM
FROM CTS1.STAFFa;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* Prepare database for test */
/* insert values into view */

printf("DELETE FROM CTS1.staffa;\n");
EXEC SQL DELETE FROM CTS1.staffa;
CHCKOK ();
printf("\n");

printf("DELETE FROM CL_EMPLOYEE;\n\n");
EXEC SQL DELETE FROM CL_EMPLOYEE;

printf("INSERT INTO CL_EMPLOYEE VALUES (\n");
printf("1, 'abc', 'Susan', NULL, NULL, 1, 100);\n");
EXEC SQL INSERT INTO CL_EMPLOYEE VALUES (
1, 'abc', 'Susan', NULL, NULL, 1, 100);
CHCKOK ();
printf("\n");

printf("INSERT INTO CL_EMPLOYEE VALUES (\n");
printf("2, 'abc', 'Matthew', NULL, NULL, 7, 100);\n");
EXEC SQL INSERT INTO CL_EMPLOYEE VALUES (
2, 'abc', 'Matthew', NULL, NULL, 7, 100);
CHCKOK ();
printf("\n");

printf("INSERT INTO CL_EMPLOYEE VALUES (\n");
printf("3, 'abc', 'Peter', NULL, NULL, 2, 100);\n");
EXEC SQL INSERT INTO CL_EMPLOYEE VALUES (
3, 'abc', 'Peter', NULL, NULL, 2, 100);
CHCKOK ();
printf("\n");

printf("INSERT INTO CL_EMPLOYEE VALUES (\n");
printf("4, 'abc', 'Rosemary', NULL, NULL, 8, 100);\n");
EXEC SQL INSERT INTO CL_EMPLOYEE VALUES (
4, 'abc', 'Rosemary', NULL, NULL, 8, 100);
CHCKOK ();
printf("\n");

printf("INSERT INTO TB VALUES\n");
printf("('Praze-an-beeble    ',1,'aaa',100,3);\n");
EXEC SQL INSERT INTO TB VALUES
('Praze-an-beeble    ',1,'aaa',100,3);
CHCKOK ();
printf("\n");

printf("INSERT INTO TB VALUES\n");
printf("('Chy-an-gwel        ',2,'abc',100,4);\n");
EXEC SQL INSERT INTO TB VALUES
('Chy-an-gwel        ',2,'abc',100,4);
CHCKOK ();
printf("\n");

printf("INSERT INTO TB VALUES\n");
printf("('Ponsonooth         ',3,'abc',100,5);\n");
EXEC SQL INSERT INTO TB VALUES
('Ponsonooth         ',3,'abc',100,5);
CHCKOK ();
printf("\n");

printf("INSERT INTO TB VALUES\n");
printf("('Tregwedyn          ',4,'abc',100,6);\n");
EXEC SQL INSERT INTO TB VALUES
('Tregwedyn          ',4,'abc',100,6);
CHCKOK ();
printf("\n");

/* set up host variable */

     EXEC SQL DELETE FROM CONCATBUF;
     EXEC SQL INSERT INTO CONCATBUF VALUES (
       'SELECT GRADE, COUNT (*) AS CC, EMPNUM'              ||
       '  FROM TA FULL OUTER JOIN TB ON GRADE > PNUM'       ||
       '  AND EMPNUM = DEPTNO WHERE'                        ||
       '  GRADE IS NOT NULL GROUP BY GRADE, EMPNUM'         ||
       '  ORDER BY CC DESC, GRADE'
     );
     EXEC SQL SELECT ZZ INTO :longst FROM CONCATBUF;
     printf("longst=\"%s\"\n", longst);

/* prepare descriptor */

printf("PREPARE sn FROM :longst;\n");
EXEC SQL PREPARE sn FROM :longst;
CHCKOK ();
printf("\n");

/* allocate descriptor */

printf("ALLOCATE DESCRIPTOR 'dn' WITH MAX 3;\n");
EXEC SQL ALLOCATE DESCRIPTOR 'dn' WITH MAX 3;
CHCKOK ();
printf("\n");

printf("DESCRIBE sn USING SQL DESCRIPTOR 'dn';\n");
EXEC SQL DESCRIBE sn USING SQL DESCRIPTOR 'dn';
CHCKOK ();
printf("\n");

strcpy(colnam,"xxxxxxxxxxxxxxxxxxxxxxxxx");
coltyp = 99;

printf("GET DESCRIPTOR 'dn' VALUE 1 :colnam = NAME, :coltyp = TYPE;\n");
EXEC SQL GET DESCRIPTOR 'dn' VALUE 1
:colnam = NAME, :coltyp = TYPE;
CHCKOK ();
printf ("colnam should be GRADE; its value is %s\n", colnam);
printf ("coltyp should be 3 (DECIMAL); its value is %ld\n\n", coltyp);
if (strncmp(colnam,"GRADE",5) != 0 || coltyp != 3)
  flag = 0;

strcpy(colnam,"xxxxxxxxxxxxxxxxxxxxxxxxx");
coltyp = 99;

printf("GET DESCRIPTOR 'dn' VALUE 2 :colnam = NAME, :coltyp = TYPE;\n");
EXEC SQL GET DESCRIPTOR 'dn' VALUE 2
:colnam = NAME, :coltyp = TYPE;
CHCKOK ();
printf ("colnam should be CC; its value is %s\n", colnam);
printf ("coltyp should be 2, 3, 4, or 5; its value is %ld\n\n", coltyp);
if (strncmp(colnam,"CC",2) != 0 || coltyp < 2 || coltyp > 5)
  flag = 0;

strcpy(colnam,"xxxxxxxxxxxxxxxxxxxxxxxxx");
coltyp = 99;

printf("GET DESCRIPTOR 'dn' VALUE 3 :colnam = NAME, :coltyp = TYPE;\n");
EXEC SQL GET DESCRIPTOR 'dn' VALUE 3
:colnam = NAME, :coltyp = TYPE;
CHCKOK ();
printf ("colnam should be EMPNUM; its value is %s\n", colnam);
printf ("coltyp should be 1 (CHAR); its value is %ld\n\n", coltyp);
if (strncmp(colnam,"EMPNUM",6) != 0 || coltyp != 1)
  flag = 0;

/* execute a <dynamic declare cursor> for statement sn */

printf("DECLARE cn CURSOR FOR sn;\n\n");
EXEC SQL DECLARE cn CURSOR FOR sn;

printf("OPEN cn;\n");
EXEC SQL OPEN cn;
CHCKOK ();
printf("\n");

/* return each row identified by the cursor */

grpno = -10;
strcpy (eno, "xxx");
grd = -10;
indic1 = 99;

printf("FETCH cn INTO :grd, :grpno, :eno:indic1;\n");
EXEC SQL FETCH cn INTO :grd, :grpno, :eno:indic1;
CHCKOK ();
printf ("grd should be 7; its value is %ld\n", grd);
printf ("grpno should be 3; its value is %d\n", grpno);
printf ("eno should be 'abc'; its value is '%s'\n\n", eno);
if (grd != 7 || grpno != 3 || strcmp (eno, "abc") != 0)
  flag = 0;

grpno = -10;
strcpy (eno, "xxx");
grd = -10;
indic1 = 99;

printf("FETCH cn INTO :grd, :grpno, :eno:indic1;\n");
EXEC SQL FETCH cn INTO :grd, :grpno, :eno:indic1;
CHCKOK ();
printf ("grd should be 8; its value is %ld\n", grd);
printf ("grpno should be 3; its value is %d\n", grpno);
printf ("eno should be 'abc'; its value is '%s'\n\n", eno);
if (grd != 8 || grpno != 3 || strcmp (eno, "abc") != 0)
  flag = 0;

grpno = -10;
strcpy (eno, "xxx");
grd = -10;
indic1 = 99;

printf("FETCH cn INTO :grd, :grpno, :eno:indic1;\n");
EXEC SQL FETCH cn INTO :grd, :grpno, :eno:indic1;
CHCKOK ();
printf ("grd should be 1; its value is %ld\n", grd);
printf ("grpno should be 1; its value is %d\n", grpno);
printf ("indic1 should be -1; its value is %d\n\n", indic1);
if (grd != 1 || grpno != 1 || indic1 != -1)
  flag = 0;

grpno = -10;
strcpy (eno, "xxx");
grd = -10;
indic1 = 99;

printf("FETCH cn INTO :grd, :grpno, :eno:indic1;\n");
EXEC SQL FETCH cn INTO :grd, :grpno, :eno:indic1;
CHCKOK ();
printf ("grd should be 2; its value is %ld\n", grd);
printf ("grpno should be 1; its value is %d\n", grpno);
printf ("indic1 should be -1; its value is %d\n\n", indic1);
if (grd != 2 || grpno != 1 || indic1 != -1)
  flag = 0;

printf("FETCH cn INTO :grd, :grpno, :eno:indic1;\n");
EXEC SQL FETCH cn INTO :grd, :grpno, :eno:indic1;

/* That should generate a no data exception */
/* which is SQLSTATE 02000 */

printf("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;
printf("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

/* CLOSE the cursor */

printf("CLOSE cn;\n");
EXEC SQL CLOSE cn;
CHCKOK ();
printf("\n");

/*deallocate the prepared statement */

printf("DEALLOCATE PREPARE sn;\n");
EXEC SQL DEALLOCATE PREPARE sn;
CHCKOK ();
printf("\n");

/* deallocate descriptor */

printf("DEALLOCATE DESCRIPTOR 'dn';\n");
EXEC SQL DEALLOCATE DESCRIPTOR 'dn';
CHCKOK ();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP VIEW TA CASCADE;\n");
EXEC SQL DROP VIEW TA CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("DROP VIEW TB CASCADE;\n");
EXEC SQL DROP VIEW TB CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");


     if ( flag == 1 )
       {
          printf("\n\n       yts810.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7567','pass','PC');
       }
     else
       {
          printf("\n\n       yts810.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7567','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7567 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


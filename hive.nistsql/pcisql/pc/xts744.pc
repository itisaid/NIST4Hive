/*  EMBEDDED C (file " XTS744.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS744.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis   TEST7044                     */
/*                                                               */
/*  This routine tests                                           */ 
/*  Presence of SQL_CHARACTER in CHARACTER_SETS view             */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    21.2.18 -- CHARACTER_SETS view                             */
/*    21.3.23 -- CHARACTER_SETS base table                       */
/*    F#2  -- Basic Information schema                           */
/*    F#46 -- Named character sets                               */
/*                                                               */
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 08/12/95                    */
/*         Print timestamp                                       */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*                                                               */
/*  QA STATUS : QA CHECK                                         */
/*                                                               */
/*  Revised by DWF 1996-02-21                                    */
/*    Added FIPS notice                                          */
/*    Removed status checks after cursor definition              */
/*    Shortened init strings                                     */
/*    Removed field widths in printfs                            */
/*    Clean up status check                                      */
/*    Corrected expected results                                 */
/*    Changed ind? to indic? for consistency                     */
/*    Fixed references to non-existent columns                   */
/*    Shortened variable names to meet coding rules              */
/*    Fixed print formats                                        */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long  SQLCODE;
 char  SQLSTATE[6];
 char  uid[19];
 char  uidx[19];
 char  cssche[129];
 char  csname[129];
 long  nofcha;
 char  ch_cat[129];
 char  colcat[129];
 char  colsch[129];
 char  colnam[129];
 short indic1;
 short indic2;
 short indic3;
 short indic4;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts744.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run :  %s\n", ctime(&cal));

/******************** BEGIN TEST7044 ********************/
flag = 1;
printf("            FIPS TEST7044\n");
printf("    Presence of SQL_CHARACTER in CHARACTER_SETS view\n");
printf(" References:\n");
printf("    FIPS 16.7 -- Character set support\n");
printf("    21.2.18 -- CHARACTER_SETS view\n");
printf("    21.3.23 -- CHARACTER_SETS base table\n");
printf("    F#2  -- Basic Information schema\n");
printf("    F#46 -- Named character sets\n"); 
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

printf("Support for SQL_CHARACTER is only required by FIPS 127-2,\n");
printf("not by SQL-92.\n\n");

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

/* initialise host variables */
strcpy(cssche,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(csname,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(ch_cat,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(colcat,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(colsch,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(colnam,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
nofcha=0;
indic1 = 99;
indic2 = 99;
indic3 = 99;
indic4 = 99;
 
printf("DECLARE F CURSOR FOR SELECT CHARACTER_SET_SCHEMA,\n");
printf("CHARACTER_SET_NAME,NUMBER_OF_CHARACTERS,CHARACTER_SET_CATALOG,\n");
printf("DEFAULT_COLLATE_CATALOG, DEFAULT_COLLATE_SCHEMA,\n");
printf("DEFAULT_COLLATE_NAME FROM INFORMATION_SCHEMA.CHARACTER_SETS\n");
printf("WHERE CHARACTER_SET_SCHEMA = 'INFORMATION_SCHEMA'\n");
printf("AND CHARACTER_SET_NAME = 'SQL_CHARACTER';\n\n");
EXEC SQL DECLARE F CURSOR FOR SELECT CHARACTER_SET_SCHEMA,
         CHARACTER_SET_NAME,NUMBER_OF_CHARACTERS,CHARACTER_SET_CATALOG,
         DEFAULT_COLLATE_CATALOG, DEFAULT_COLLATE_SCHEMA,
         DEFAULT_COLLATE_NAME FROM INFORMATION_SCHEMA.CHARACTER_SETS
         WHERE CHARACTER_SET_SCHEMA = 'INFORMATION_SCHEMA'
         AND CHARACTER_SET_NAME = 'SQL_CHARACTER';

printf("OPEN F;\n");
EXEC SQL OPEN F;
CHCKOK();
printf("\n");

/* Collation for SQL_CHARACTER is implementation-defined */

/* Now fetch the row from the view */
printf("FETCH F INTO :cssche,:csname,:nofcha,:ch_cat:indic1,\n");
printf(":colcat:indic2, :colsch, :colnam;\n");
EXEC SQL FETCH F INTO :cssche,:csname,:nofcha,:ch_cat:indic1,
:colcat:indic2, :colsch:indic3, :colnam:indic4;
CHCKOK();
printf("cssche should be INFORMATION_SCHEMA; its value is %s\n",cssche);
printf("csname should be SQL_CHARACTER; its value is %s\n",csname);
printf("nofcha should be 83; its value is %ld\n",nofcha);
printf("indic1 should be 0; its value is %d\n", indic1);
printf("indic2 should be 0; its value is %d\n", indic2);
printf("indic3 should be 0; its value is %d\n", indic3);
printf("indic4 should be 0; its value is %d\n", indic4);
printf("ch_cat is %s\n",ch_cat);
printf("colcat is %s\n",colcat);
printf("colsch is %s\n",colsch);
printf("colnam is %s\n",colnam);

if (strncmp (cssche, "INFORMATION_SCHEMA", 18) != 0)
  flag = 0;
if (strncmp (csname, "SQL_CHARACTER", 13) != 0)
  flag = 0;
if (indic1 != 0 || indic2 != 0 || nofcha != 83)
  flag = 0;
if (indic3 != 0 || indic4 != 0)
  flag = 0;
printf("\n");

/* now close the cursor */
printf("CLOSE F;\n");
EXEC SQL CLOSE F;
CHCKOK();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

 /* record results */

     if ( flag == 1 )
       {
          printf("\n\n       xts744.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7044','pass','PC');
       }
     else
       {
          printf("\n\n       xts744.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7044','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;

/******************** END TEST7044 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

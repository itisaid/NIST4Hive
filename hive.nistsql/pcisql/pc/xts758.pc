/*  EMBEDDED C (file " XTS758.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS758.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  Scrolled cursor FETCH ABSOLUTE non-literal after last row    */
/*                                                               */
/*  REFERENCES                                                   */
/*    13.1    -- <Declare cursor>                                */
/*    13.3    -- <Fetch statement>                               */
/*    13.3 GR.5b                                                 */
/*    F#24    -- Keyword relaxations                             */
/*    F#43    -- Scrolled cursors                                */
/*                                                               */
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 15/12/95                    */
/*         Print timestamp                                       */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*                                                               */
/*  QA STATUS : QA CHECK                                         */
/*                                                               */
/*  Revised by DWF 1996-02-20                                    */
/*    Removed status checks after cursor definition              */
/*    Shortened variable names to 6 chars                        */
/*    Removed field width from printf                            */
/*    Fixed string lengths                                       */
/*    Fixed wrong SQLCODE expected                               */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
long num1;
char chr1[11];
long rowptr;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if(strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts758.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run :  %s\n", ctime(&cal));

/******************** BEGIN TEST7058 ********************/
flag = 1; 
printf("                  TEST7058\n");
printf("    Scrolled cursor FETCH ABSOLUTE non-literal, after last row\n");
printf(" References\n");
printf("    13.1    -- <Declare cursor>\n");
printf("    13.3    -- <Fetch statement>\n");
printf("    13.3    GR.5b \n");
printf("    F#24    -- Keyword relaxations\n");
printf("    F#43    -- Scrolled cursors \n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

/* create a table under the current schema */
printf("CREATE TABLE TAB758\n"); 
printf("(COL1 NUMERIC(5) PRIMARY KEY UNIQUE,\n");
printf(" COL2 CHAR(10));\n");
EXEC SQL CREATE TABLE TAB758
         (COL1 NUMERIC(5) PRIMARY KEY UNIQUE,
          COL2 CHAR(10));
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* now insert five rows in the table */
printf("INSERT INTO TAB758 VALUES(101,'NICKOS');\n");
EXEC SQL INSERT INTO TAB758 VALUES(101,'NICKOS');
CHCKOK();
printf("\n");

printf("INSERT INTO TAB758 VALUES(103,'LUNA');\n");
EXEC SQL INSERT INTO TAB758 VALUES(103,'LUNA');
CHCKOK();
printf("\n");

printf("INSERT INTO TAB758 VALUES(105,'LOLA');\n");
EXEC SQL INSERT INTO TAB758 VALUES(105,'LOLA');
CHCKOK();
printf("\n");

printf("INSERT INTO TAB758 VALUES(102,'LILIAN');\n");
EXEC SQL INSERT INTO TAB758 VALUES(102,'LILIAN');
CHCKOK();
printf("\n");

printf("INSERT INTO TAB758 VALUES(104,'MARION');\n");
EXEC SQL INSERT INTO TAB758 VALUES(104,'MARION');
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DECLARE SCRCURS SCROLL CURSOR FOR SELECT COL1,COL2\n");
printf("FROM TAB758\n");
printf("ORDER BY COL1;\n\n");
EXEC SQL DECLARE SCRCURS SCROLL CURSOR FOR SELECT COL1,COL2
         FROM TAB758
         ORDER BY COL1;

printf("OPEN SCRCURS;\n");
EXEC SQL OPEN SCRCURS;
CHCKOK();
printf("\n");
 
/* initialise host variables */
num1 = 0;
strcpy(chr1,"xxxxxxxxxx");
rowptr = 5;

/* now fetch the last row of the cursor row */
printf("FETCH ABSOLUTE :rowptr FROM SCRCURS INTO :num1,:chr1;\n");
EXEC SQL FETCH ABSOLUTE :rowptr FROM SCRCURS INTO :num1,:chr1;  
CHCKOK();
printf("COL1 should be  105; its value is %ld\n",num1);
printf("COL2 should be LOLA; its value is %s\n",chr1);
if(strncmp(chr1,"LOLA",4)!=0 || num1 != 105)
    flag = 0;
printf("\n");

/* initialise host variables */
num1 = 0;
strcpy(chr1,"xxxxxxxxxx");
printf("Non literal is incremented by 1\n");
rowptr = rowptr + 1;

printf("FETCH ABSOLUTE :rowptr FROM SCRCURS INTO :num1,:chr1;\n");
EXEC SQL FETCH ABSOLUTE :rowptr FROM SCRCURS INTO :num1,:chr1;  
/* Check that an exception condition no data is raised     */
/* indicated in the value of SQLSTATE which should be 02000*/
printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
printf ("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (SQLCODE != 100 || strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

 /* now decrement the host variable by 1 */
 /* this should return the fifth row of the table */

/* initialise host variables */
num1 = 0;
strcpy(chr1,"xxxxxxxxxx");
printf("Non literal host variable is decremented by 1\n");
rowptr = rowptr - 1;

printf("FETCH ABSOLUTE :rowptr FROM SCRCURS INTO :num1,:chr1;\n");
EXEC SQL FETCH ABSOLUTE :rowptr FROM SCRCURS INTO :num1,:chr1;  
CHCKOK();
printf("COL1 should be  105; its value is %ld\n",num1);
printf("COL2 should be LOLA; its value is %s\n",chr1);
if(strncmp(chr1,"LOLA",4)!=0 || num1 != 105)
     flag = 0;
printf("\n");

printf("CLOSE SCRCURS;\n");
EXEC SQL CLOSE SCRCURS;
CHCKOK();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* restore database in its original state */
printf("DROP TABLE TAB758 CASCADE;\n");
EXEC SQL DROP TABLE TAB758 CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

 /* record results */
     if( flag == 1 )
       {
          printf("\n\n       xts758.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7058','pass','PC');
       }
     else
       {
          printf("\n\n       xts758.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7058','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7058 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

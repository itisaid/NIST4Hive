/*  EMBEDDED C (file "DML166.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1996-04-30 EMBEDDED C LANGUAGE                          */
/*  SQL VALIDATION TEST SUITE V6.0                          */
/* DISCLAIMER:                                                  */
/* This program was written by employees of NIST to test SQL    */
/* implementations for conformance to the SQL standards.        */
/* NIST assumes no responsibility for any party's use of        */
/* this program.                                                */
/*                                                               */
/*  DML166.PC                                                    */
/*  WRITTEN BY:  David Flater                                    */
/*                                                               */
/*  This routine tests Intermediate SQL.                         */
/*                                                               */
/*  REFERENCES                                                   */
/*    FIPS PUB 127-2 14.2 Intermediate SQL                       */
/*    ANSI SQL-1992                                              */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
char xlngst[551];
char regst[27];
long int1;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"FLATER            ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, dml166.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0873 ********************/
flag = 1;

     printf("                  TEST0873\n");
     printf("           Dynamic schema creation\n");
     printf("References:\n");
     printf("    F#31 -- Schema definition statement\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("SELECT\n");
printf("  'CREATE SCHEMA SYNCH2'\n");
printf("  '  CREATE DOMAIN PIDTYP AS NUMERIC(15)'\n");
printf("  '    CONSTRAINT PIDNONNULL CHECK (VALUE IS NOT NULL)'\n");
printf("  '  CREATE TABLE SYTAB ('\n");
printf("  '    TEST CHAR (4)'\n");
printf("  '      CONSTRAINT SYTABKEY PRIMARY KEY,'\n");
printf("  '    TOKEN PIDTYP'\n");
printf("  '      CONSTRAINT PIDREF REFERENCES REGISTRY (PID)'\n");
printf("  '      ON DELETE CASCADE)'\n");
printf("  '  CREATE TABLE REGISTRY ('\n");
printf("  '    TEST CHAR (4) NOT NULL,'\n");
printf("  '    PID PIDTYP UNIQUE)'\n");
printf("  '  CREATE VIEW IDLES AS'\n");
printf("  '    SELECT PID FROM REGISTRY'\n");
printf("  '    WHERE PID NOT IN (SELECT TOKEN'\n");
printf("  '    FROM SYTAB)'\n");
printf("INTO :xlngst\n");
printf("FROM HU.ECCO;\n");
EXEC SQL SELECT
  'CREATE SCHEMA SYNCH2'
  '  CREATE DOMAIN PIDTYP AS NUMERIC(15)'
  '    CONSTRAINT PIDNONNULL CHECK (VALUE IS NOT NULL)'
  '  CREATE TABLE SYTAB ('
  '    TEST CHAR (4)'
  '      CONSTRAINT SYTABKEY PRIMARY KEY,'
  '    TOKEN PIDTYP'
  '      CONSTRAINT PIDREF REFERENCES REGISTRY (PID)'
  '      ON DELETE CASCADE)'
  '  CREATE TABLE REGISTRY ('
  '    TEST CHAR (4) NOT NULL,'
  '    PID PIDTYP UNIQUE)'
  '  CREATE VIEW IDLES AS'
  '    SELECT PID FROM REGISTRY'
  '    WHERE PID NOT IN (SELECT TOKEN'
  '    FROM SYTAB)'
INTO :xlngst
FROM HU.ECCO;
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

printf ("xlngst = %s\n", xlngst);

printf("EXECUTE IMMEDIATE :xlngst;\n");
EXEC SQL EXECUTE IMMEDIATE :xlngst;
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

printf("INSERT INTO SYNCH2.SYTAB VALUES ('0000', 67);\n");
EXEC SQL INSERT INTO SYNCH2.SYTAB VALUES ('0000', 67);
printf ("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;
printf ("SQLSTATE should be 23000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "23000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "23000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf ("\n");

printf("INSERT INTO SYNCH2.REGISTRY\n");
printf("  VALUES ('0000', 67);\n");
EXEC SQL INSERT INTO SYNCH2.REGISTRY
  VALUES ('0000', 67);
CHCKOK ();
printf ("\n");

int1 = 0;
printf("SELECT PID INTO :int1 FROM SYNCH2.IDLES;\n");
EXEC SQL SELECT PID INTO :int1 FROM SYNCH2.IDLES;
CHCKOK ();
printf ("int1 should be 67; its value is %ld\n\n", int1);
if (int1 != 67)
  flag = 0;

printf("INSERT INTO SYNCH2.SYTAB VALUES ('0000', 67);\n");
EXEC SQL INSERT INTO SYNCH2.SYTAB VALUES ('0000', 67);
CHCKOK ();
printf ("\n");

printf("SELECT PID INTO :int1 FROM SYNCH2.IDLES;\n");
EXEC SQL SELECT PID INTO :int1 FROM SYNCH2.IDLES;
printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
printf ("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (SQLCODE != 100 || strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

printf("DELETE FROM SYNCH2.REGISTRY;\n");
EXEC SQL DELETE FROM SYNCH2.REGISTRY;
CHCKOK ();
printf ("\n");

printf("SELECT TOKEN INTO :int1 FROM SYNCH2.SYTAB;\n");
EXEC SQL SELECT TOKEN INTO :int1 FROM SYNCH2.SYTAB;
printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
printf ("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (SQLCODE != 100 || strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

printf("regst = \"DROP SCHEMA SYNCH2 CASCADE\"\n");
strcpy (regst, "DROP SCHEMA SYNCH2 CASCADE");

printf("EXECUTE IMMEDIATE :regst;\n");
EXEC SQL EXECUTE IMMEDIATE :regst;
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0873','pass','PC');
       }
     else
       {
          printf("\n\n       dml166.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0873','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0873 *********************/
     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

/*  EMBEDDED C (file " XTS736.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS736.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  Update NCHAR VARYING column with value from NCHAR domain     */ 
/*                                                               */
/*  REFERENCES                                                   */
/*    11.21   -- <Domain definition>                             */
/*    11.5    -- <default clause>                                */
/*    6.1     -- <data type>                                     */
/*    6.1 SR.2                                                   */
/*    6.1 SR.9b                                                  */
/*    5.3     -- <Literal>                                       */
/*    11.3    -- <Table definition>                              */
/*    11.4    -- <column definition>                             */
/*    13.10   -- <update statement: searched>                    */
/*    F#3     -- Basic schema manipulation                       */
/*    F#6     -- VARCHAR data type                               */         
/*    F#25    -- Domain definition                               */
/*    F#22    -- Explicit defaults                               */ 
/*    F#42    -- National Character                              */ 
/*                                                               */
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 07/12/95                    */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*         print timestamp                                       */
/*                                                               */
/*  QA STATUS : QA CHECK 2                                       */
/*                                                               */
/*  Revised by DWF 1996-02-08                                    */
/*    Fixed SDL transactions                                     */
/*    Removed status checks after cursor definition              */
/*    Fixed nchar literals                                       */
/*    Fixed C variable declarations                              */
/*    Corrected expected result                                  */
/*    Fixed SQL syntax error                                     */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 long colnum;
 char CHARACTER SET VANGELIS c1[20];
 char CHARACTER SET VANGELIS c2[20];
 char CHARACTER SET VANGELIS c3[20];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if(strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts736.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf(" \n Time Run :  %s \n ", ctime(&cal));

/******************** BEGIN TEST7036 ********************/
flag = 1;
printf("                 TEST7036\n");
printf("    Update NCHAR VARYING column with value from NCHAR domain\n");
printf("References\n");        
printf("    11.21   -- <Domain definition>\n");
printf("    11.5    -- <default clause>\n");
printf("    6.1     -- <data type>\n");
printf("    6.1 SR.2\n");
printf("    6.1 SR.9b \n");
printf("    5.3     -- <Literal>\n");
printf("    11.3    -- <Table definition>\n");
printf("    11.4    -- <column definition>\n");
printf("    13.10   -- <update statement: searched>\n");
printf("    F#3     -- Basic schema manipulation\n");
printf("    F#6     -- VARCHAR data type\n");
printf("    F#25    -- Domain definition\n");
printf("    F#22    -- Explicit defaults\n");
printf("    F#42    -- National Character\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n"); 

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

printf("\n");
printf("When the character set name of NATIONAL CHARACTER is known\n");
printf("please use TED hooks to replace VANGELIS with the \n");
printf("implementation dependent national <character set name>\n");
printf("and the values used in nat. char. literals with permissible\n");
printf("values from that specific character set repertoire.\n");
printf("\n");

/* create three domains under the current schema */
printf("CREATE DOMAIN DOM1 AS NATIONAL CHARACTER VARYING(10)\n");
printf("DEFAULT _VANGELIS 'KILLER'\n");  
EXEC SQL CREATE DOMAIN DOM1 AS NATIONAL CHARACTER VARYING(10)
         DEFAULT _VANGELIS 'KILLER';
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("CREATE DOMAIN DOM2 AS NATIONAL CHAR VARYING(12)\n");
printf("DEFAULT _VANGELIS 'HELLAS';\n");
EXEC SQL CREATE DOMAIN DOM2 AS NATIONAL CHAR VARYING(12)
         DEFAULT _VANGELIS 'HELLAS';
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("CREATE DOMAIN DOM3 AS NCHAR VARYING(16)\n");
printf("CHECK (VALUE IN (_VANGELIS 'NEW YORK', _VANGELIS 'ATHENS',\n");
printf("_VANGELIS 'ZANTE'));\n");
EXEC SQL CREATE DOMAIN DOM3 AS NCHAR VARYING(16)
         CHECK (VALUE IN (_VANGELIS 'NEW YORK', _VANGELIS 'ATHENS',
                          _VANGELIS 'ZANTE'));
CHCKOK();
printf("\n");

/* commit the action */
printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* now create a table under the current schema consisted */
/* of columns based on values from the above domains     */ 
printf("CREATE TABLE TAB736\n");
printf("(COLK DECIMAL(4) PRIMARY KEY,\n");
printf(" COL1 DOM1,\n");
printf(" COL2 DOM2,\n");
printf(" COL3 DOM3);\n");
EXEC SQL CREATE TABLE TAB736
         (COLK DECIMAL(4) PRIMARY KEY,
          COL1 DOM1,
          COL2 DOM2,
          COL3 DOM3);
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* now insert two rows in the table */
/* replace the strings with strings of type NATIONAL */
/* CHARACTER as soon as an implementation supports them*/

printf("INSERT INTO TAB736 VALUES(1,DEFAULT,DEFAULT,N'ATHENS');\n");
EXEC SQL INSERT INTO TAB736 VALUES(1,DEFAULT,DEFAULT,N'ATHENS');  
CHCKOK();
printf("\n");

printf("INSERT INTO TAB736 VALUES(2,DEFAULT,DEFAULT,N'ZANTE');\n");
EXEC SQL INSERT INTO TAB736 VALUES(2,DEFAULT,DEFAULT,N'ZANTE');  
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* now update the row where COLK = 2 using an <update */
/* statement :searched> */
printf("UPDATE TAB736 \n");
printf("SET COL1 = DEFAULT,\n");
printf("COL2 = DEFAULT,\n");
printf("COL3 = N'NEW YORK'\n");
printf("WHERE COLK = 2;\n");
EXEC SQL UPDATE TAB736 
         SET COL1 = DEFAULT,
         COL2 = DEFAULT,
         COL3 = N'NEW YORK'
         WHERE COLK = 2;
CHCKOK();
printf("\n");

/* use an ordered cursor and retrieve the rows of TAB736*/
/* and check if the update was successful */
/* and that the rows are returned */
printf("DECLARE V CURSOR FOR SELECT COLK,COL1,COL2,COL3\n");
printf("FROM TAB736 \n");
printf("ORDER BY COLK DESC;\n\n");
EXEC SQL DECLARE V CURSOR FOR SELECT COLK,COL1,COL2,COL3
         FROM TAB736 
         ORDER BY COLK DESC;

/* Results should be: */
/* 2  KILLER  HELLAS  NEW YORK */
/* 1  KILLER  HELLAS  ATHENS */
/* (All char strings are national char) */

printf("OPEN V;\n");
EXEC SQL OPEN V;
CHCKOK();
printf("\n");

/* initialise host variables */
colnum = 0;
strcpy(c1,"xxxxxxxxxxxxxxxxxxx");
strcpy(c2,"xxxxxxxxxxxxxxxxxxx");
strcpy(c3,"xxxxxxxxxxxxxxxxxxx");

/* now fetch the two rows */
printf("FETCH V INTO :colnum, :c1, :c2, :c3;\n");
EXEC SQL FETCH V INTO :colnum, :c1, :c2, :c3;   
CHCKOK();
printf("colnum should be    2; its value is %ld\n",colnum);
printf("c1 should be   KILLER; its value is %s\n",c1);
printf("c2 should be   HELLAS; its value is %s\n",c2);
printf("c3 should be NEW YORK; its value is %s\n",c3);
if(colnum!=2 || strncmp(c1,"KILLER",6)!=0)
    flag = 0;
if(strncmp(c2,"HELLAS",6)!=0 || strncmp(c3,"NEW YORK",8)!=0)
    flag = 0;
printf("\n");

colnum = 0;
strcpy(c1,"xxxxxxxxxxxxxxxxxxx");
strcpy(c2,"xxxxxxxxxxxxxxxxxxx");
strcpy(c3,"xxxxxxxxxxxxxxxxxxx");

printf("FETCH V INTO :colnum, :c1, :c2, :c3;\n");
EXEC SQL FETCH V INTO :colnum, :c1, :c2, :c3;   
CHCKOK();
printf("colnum should be  1; its value is %ld\n",colnum);
printf("c1 should be KILLER; its value is %s\n",c1);
printf("c2 should be HELLAS; its value is %s\n",c2);
printf("c3 should be ATHENS; its value is %s\n",c3);
if(colnum!=1 || strncmp(c1,"KILLER",6)!=0)
    flag = 0;
if(strncmp(c2,"HELLAS",6)!=0 || strncmp(c3,"ATHENS",6)!=0)
    flag = 0;
printf("\n");

printf("CLOSE V;\n");
EXEC SQL CLOSE V;
CHCKOK();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* now restore the database in its original contents */
printf("DROP TABLE TAB736 CASCADE;\n");
EXEC SQL DROP TABLE TAB736 CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DROP DOMAIN DOM1 CASCADE;\n");
EXEC SQL DROP DOMAIN DOM1 CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DROP DOMAIN DOM2 CASCADE;\n");
EXEC SQL DROP DOMAIN DOM2 CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DROP DOMAIN DOM3 CASCADE;\n");
EXEC SQL DROP DOMAIN DOM3 CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

  /* record results */

     if( flag == 1 )
       {
          printf("\n\n       xts736.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7036','pass','PC');
       }
     else
       {
          printf("\n\n       xts736.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7036','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7036 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

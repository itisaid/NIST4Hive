/*  EMBEDDED C (file "MPA013.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1995/03/27 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  MPA013.PC                                                    */
/*  WRITTEN BY:  David W. Flater                                 */
/*                                                               */
/*  This routine tests SET TRANSACTION ISOLATION LEVEL for       */
/*  static SQL.  This is part A of a two-part program.           */
/*                                                               */
/*  References:                                                  */
/*    FIPS PUB 127-2 14.1 Transitional SQL                       */
/*    ANSI SQL-1992 14.1 <set transaction statement>             */
/*                                                               */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

void
SLEEEP (int);

EXEC SQL BEGIN DECLARE SECTION;
char uid[19];
char uidx[19];
long SQLCODE;
char SQLSTATE[6];
long int1;
long int2;
long int3;
long progno;
EXEC SQL END DECLARE SECTION;
long pauze;
long repcnt;
long iii;
long fails;
long maxfls;
long oldtok;
long waitin;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/*  Debugging is turned on by setting debug1 = 1 */
long  debug1;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"SULLIVAN1         ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,9) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, mpa013.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

printf ("This is part A of a two-part test.  It should be started\n");
printf ("BEFORE mpb013.  Table TOKENS must exist in schema HU.\n\n");

/* to debug program, set debug1 = 1 */
debug1 = 0;
maxfls = 100;
pauze = 100;
progno = 12;

/******************** BEGIN TEST0589 ********************/
flag = 1;

/* SQL-92 14.1 GR.5 says that a transaction at a particular */
/* isolation level must not exhibit phenomena which are not */
/* supposed to be possible at that level, but does not      */
/* require transactions to exhibit those phenomena which    */
/* are possible.  A conforming implementation could simply  */
/* ignore all SET TRANSACTION ISOLATION LEVEL statements    */
/* and treat all transactions as SERIALIZABLE.  The         */
/* phenomena are defined in SQL-92 4.28.                    */

     printf("                  TEST0589 \n");
     printf("       SET TR ISOLATION LEVEL (static)\n");
     printf("Reference:\n");
     printf("  F# 11 -- Transaction Isolation\n");
     printf("  14.1 -- <set transaction statement>\n");
     printf("  4.28 -- SQL-transactions\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

fails = 0;
printf ("Checking for extraneous tokens....\n\n");

P100:
if (debug1 != 0)
  printf("Debug trace: P100\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM HU.TOKENS WHERE PROG_NO = :progno;
if (SQLCODE < 0)
{
  /* Waste time and try again */
  printf ("SQLCODE = %ld   SQLSTATE = '%s'\n", SQLCODE, SQLSTATE);
  fails = fails + 1;
  if (fails > maxfls)
    goto P199;
/* TEd hook for fixing delays:  000 */
  EXEC SQL ROLLBACK WORK;
  SLEEEP (1);
  EXEC SQL ROLLBACK WORK;
  goto P100;
}
if (int1 == 0)
  goto P101;

fails = 0;
printf ("Extraneous tokens found!\n\n");

P102:
if (debug1 != 0)
  printf("Debug trace: P102\n");
EXEC SQL DELETE FROM HU.TOKENS WHERE PROG_NO = :progno;
if (SQLCODE < 0)
{
  /* Waste time and try again */
  printf ("SQLCODE = %ld   SQLSTATE = '%s'\n", SQLCODE, SQLSTATE);
  fails = fails + 1;
  if (fails > maxfls)
    goto P199;
/* TEd hook for fixing delays:  001 */
  EXEC SQL ROLLBACK WORK;
  SLEEEP (1);
  EXEC SQL ROLLBACK WORK;
  goto P102;
}
EXEC SQL COMMIT WORK;
if (SQLCODE < 0)
{
  /* Waste time and try again */
  printf ("SQLCODE = %ld   SQLSTATE = '%s'\n", SQLCODE, SQLSTATE);
  fails = fails + 1;
  if (fails > maxfls)
    goto P199;
/* TEd hook for fixing delays:  002 */
  EXEC SQL ROLLBACK WORK;
  SLEEEP (1);
  EXEC SQL ROLLBACK WORK;
  goto P102;
}
goto P199;

P101:
if (debug1 != 0)
  printf("Debug trace: P101\n");
/* No extraneous tokens */

printf ("Setting up table USG102\n\n");

printf("DELETE FROM USG102;\n");
EXEC SQL DELETE FROM USG102;

printf("INSERT INTO USG102 VALUES (589, 600);\n");
EXEC SQL INSERT INTO USG102 VALUES (589, 600);
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

fails = 0;
printf ("Setting token = 1\n");

P163:
if (debug1 != 0)
  printf("Debug trace: P163\n");
EXEC SQL INSERT INTO HU.TOKENS VALUES (:progno, 1);
if (SQLCODE < 0)
{
  /* Waste time and try again */
  printf ("SQLCODE = %ld   SQLSTATE = '%s'\n", SQLCODE, SQLSTATE);
  fails = fails + 1;
  if (fails > maxfls)
    goto P199;
/* TEd hook for fixing delays:  012 */
  EXEC SQL ROLLBACK WORK;
  SLEEEP (1);
  EXEC SQL ROLLBACK WORK;
  goto P163;
}
EXEC SQL COMMIT WORK;
if (SQLCODE < 0)
{
  /* Waste time and try again */
  printf ("SQLCODE = %ld   SQLSTATE = '%s'\n", SQLCODE, SQLSTATE);
  fails = fails + 1;
  if (fails > maxfls)
    goto P199;
/* TEd hook for fixing delays:  013 */
  EXEC SQL ROLLBACK WORK;
  SLEEEP (1);
  EXEC SQL ROLLBACK WORK;
  goto P163;
}

printf ("START PROGRAM B if you haven't already!\n");
waitin = 2;

fails = 0;
oldtok = -1;
printf ("Waiting for the token to reach %ld.\n", waitin);

P165:
if (debug1 != 0)
  printf("Debug trace: P165\n");
int1 = -1;
EXEC SQL SELECT TOKEN_NO INTO :int1 FROM HU.TOKENS
  WHERE PROG_NO = :progno;
if (SQLCODE < 0)
{
  printf ("SQLCODE = %ld   SQLSTATE = '%s'\n", SQLCODE, SQLSTATE);
}
if (int1 != oldtok && SQLCODE >= 0 && SQLCODE != 100 )
{
  printf ("Token = %ld\n", int1);
  oldtok = int1;
  fails = 0;
}
if (SQLCODE < 0 || int1 != waitin)
{
  /* Waste time and try again */
  NOSUBCLASS ();
  if (strcmp (NORMSQ, "21000") == 0)
    goto P198;
  fails = fails + 1;
  if (fails > maxfls)
    goto P199;
/* TEd hook for fixing delays:  014 */
  EXEC SQL ROLLBACK WORK;
  SLEEEP (2);
  EXEC SQL ROLLBACK WORK;
  goto P165;
}



/* Check for dirty read */
P137:
if (debug1 != 0)
  printf("Debug trace: P137\n");

printf("SET TRANSACTION ISOLATION LEVEL READ COMMITTED;\n");
EXEC SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
if (SQLCODE < 0)
{
  printf ("SQLCODE is %ld\n", SQLCODE);
  printf ("Failure on transaction statement = failure on test\n");
  flag = 0;
}
/* Give 'B' a chance to do its damage. */
printf ("Begin SLEEEP (5)\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
SLEEEP (5);
printf ("End SLEEEP (5)\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
/* Check for dirty read. */
int1 = -1;

printf("SELECT C1 INTO :int1 FROM USG102 WHERE C_1 = 985;\n");
EXEC SQL SELECT C1 INTO :int1 FROM USG102 WHERE C_1 = 985;
if (SQLCODE < 0)
  goto P138;
printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;

printf ("Committing transaction....\n");
EXEC SQL COMMIT WORK;
if (SQLCODE < 0)
{
  printf ("Transaction voided.\n");
  goto P138;
}

fails = 0;
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
printf ("Passing token to 'B'....\n");
goto P169;

P138:
if (debug1 != 0)
  printf("Debug trace: P138\n");
printf("SQLCODE is %ld\n",SQLCODE);
EXEC SQL ROLLBACK WORK;
fails = fails + 1;
if (fails > maxfls)
  goto P199;
if (fails > 3)
  SLEEEP (20);
goto P137;

P169:
if (debug1 != 0)
  printf("Debug trace: P169\n");
EXEC SQL UPDATE HU.TOKENS SET TOKEN_NO = TOKEN_NO + 1
  WHERE PROG_NO = :progno;
if (SQLCODE < 0)
{
  /* Waste time and try again */
  printf ("SQLCODE = %ld   SQLSTATE = '%s'\n", SQLCODE, SQLSTATE);
  fails = fails + 1;
  if (fails > maxfls)
    goto P199;
/* TEd hook for fixing delays:  015 */
  EXEC SQL ROLLBACK WORK;
  SLEEEP (1);
  EXEC SQL ROLLBACK WORK;
  goto P169;
}
EXEC SQL COMMIT WORK;
if (SQLCODE < 0)
{
  /* Waste time and try again */
  printf ("SQLCODE = %ld   SQLSTATE = '%s'\n", SQLCODE, SQLSTATE);
  fails = fails + 1;
  if (fails > maxfls)
    goto P199;
/* TEd hook for fixing delays:  016 */
  EXEC SQL ROLLBACK WORK;
  SLEEEP (1);
  EXEC SQL ROLLBACK WORK;
  goto P169;
}
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

waitin = 4;
fails = 0;
oldtok = -1;
printf ("Waiting for the token to reach %ld.\n", waitin);

P167:
if (debug1 != 0)
  printf("Debug trace: P167\n");
int1 = -1;
EXEC SQL SELECT TOKEN_NO INTO :int1 FROM HU.TOKENS
  WHERE PROG_NO = :progno;
if (SQLCODE < 0)
{
  printf ("SQLCODE = %ld   SQLSTATE = '%s'\n", SQLCODE, SQLSTATE);
}
if (int1 != oldtok && SQLCODE >= 0 && SQLCODE != 100 )
{
  printf ("Token = %ld\n", int1);
  oldtok = int1;
  fails = 0;
}
if (SQLCODE < 0 || int1 != waitin)
{
  /* Waste time and try again */
  NOSUBCLASS ();
  if (strcmp (NORMSQ, "21000") == 0)
    goto P198;
  fails = fails + 1;
  if (fails > maxfls)
    goto P199;
/* TEd hook for fixing delays:  017 */
  EXEC SQL ROLLBACK WORK;
  SLEEEP (2);
  EXEC SQL ROLLBACK WORK;
  goto P167;
}


/* Check for non-repeatable read */

P153:
if (debug1 != 0)
  printf("Debug trace: P153\n");

printf("SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;\n");
EXEC SQL SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
if (SQLCODE < 0)
{
  printf ("SQLCODE is %ld\n", SQLCODE);
  printf ("Failure on transaction statement = failure on test\n");
  flag = 0;
}
/* Check for non-repeatable read. */
int1 = -1;
printf("SELECT C1 INTO :int1 FROM USG102 WHERE C_1 = 600;\n");
EXEC SQL SELECT C1 INTO :int1 FROM USG102 WHERE C_1 = 600;
if (SQLCODE < 0)
  goto P152;
printf ("int1 is %ld\n", int1);
printf ("Waiting for 'B' to commit....\n");
printf ("Begin SLEEEP (20)\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
SLEEEP (20);
printf ("End SLEEEP (20)\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

int2 = -2;
printf("SELECT C1 INTO :int2 FROM USG102 WHERE C_1 = 600;\n");
EXEC SQL SELECT C1 INTO :int2 FROM USG102 WHERE C_1 = 600;
if (SQLCODE < 0)
  goto P152;
printf ("int2 is %ld\n", int2);
printf ("You fail if int1 != int2.\n");
if (int1 != int2)
  flag = 0;

printf ("Committing transaction....\n");
EXEC SQL COMMIT WORK;
if (SQLCODE < 0)
{
  printf ("Transaction voided.\n");
  goto P152;
}
goto P176;

P152:
if (debug1 != 0)
  printf("Debug trace: P152\n");
printf ("SQLCODE is %ld\n", SQLCODE);
EXEC SQL ROLLBACK WORK;
fails = fails + 1;
if (fails > maxfls)
  goto P199;
goto P153;


P176:
if (debug1 != 0)
  printf("Debug trace: P176\n");
fails = 0;
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
printf ("Passing token to 'B'....\n");

P170:
if (debug1 != 0)
  printf("Debug trace: P170\n");
EXEC SQL UPDATE HU.TOKENS SET TOKEN_NO = TOKEN_NO + 1
  WHERE PROG_NO = :progno;
if (SQLCODE < 0)
{
  /* Waste time and try again */
  printf ("SQLCODE = %ld   SQLSTATE = '%s'\n", SQLCODE, SQLSTATE);
  fails = fails + 1;
  if (fails > maxfls)
    goto P199;
/* TEd hook for fixing delays:  018 */
  EXEC SQL ROLLBACK WORK;
  SLEEEP (1);
  EXEC SQL ROLLBACK WORK;
  goto P170;
}
EXEC SQL COMMIT WORK;
if (SQLCODE < 0)
{
  /* Waste time and try again */
  printf ("SQLCODE = %ld   SQLSTATE = '%s'\n", SQLCODE, SQLSTATE);
  fails = fails + 1;
  if (fails > maxfls)
    goto P199;
/* TEd hook for fixing delays:  019 */
  EXEC SQL ROLLBACK WORK;
  SLEEEP (1);
  EXEC SQL ROLLBACK WORK;
  goto P170;
}
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

waitin = 6;
fails = 0;
oldtok = -1;
printf ("Waiting for the token to reach %ld.\n", waitin);

P171:
if (debug1 != 0)
  printf("Debug trace: P171\n");
int1 = -1;
EXEC SQL SELECT TOKEN_NO INTO :int1 FROM HU.TOKENS
  WHERE PROG_NO = :progno;
if (SQLCODE < 0)
{
  printf ("SQLCODE = %ld   SQLSTATE = '%s'\n", SQLCODE, SQLSTATE);
}
if (int1 != oldtok && SQLCODE >= 0 && SQLCODE != 100 )
{
  printf ("Token = %ld\n", int1);
  oldtok = int1;
  fails = 0;
}
if (SQLCODE < 0 || int1 != waitin)
{
  /* Waste time and try again */
  NOSUBCLASS ();
  if (strcmp (NORMSQ, "21000") == 0)
    goto P198;
  fails = fails + 1;
  if (fails > maxfls)
    goto P199;
/* TEd hook for fixing delays:  030 */
  EXEC SQL ROLLBACK WORK;
  SLEEEP (2);
  EXEC SQL ROLLBACK WORK;
  goto P171;
}


/* Check for phantom read */
P173:
if (debug1 != 0)
  printf("Debug trace: P173\n");
printf("SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n");
EXEC SQL SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
if (SQLCODE < 0)
{
  printf ("SQLCODE is %ld\n", SQLCODE);
  printf ("Failure on transaction statement = failure on test\n");
  flag = 0;
}
int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM USG102;\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM USG102;
if (SQLCODE < 0)
  goto P177;
printf ("int1 is %ld\n", int1);
printf ("Waiting for 'B' to commit....\n");
printf ("Begin SLEEEP (20)\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
SLEEEP (20);
printf ("End SLEEEP (20)\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

int2 = -2;
printf("SELECT COUNT(*) INTO :int2 FROM USG102;\n");
EXEC SQL SELECT COUNT(*) INTO :int2 FROM USG102;
if (SQLCODE < 0)
  goto P177;
printf ("int2 is %ld\n", int2);
printf ("You fail if int1 != int2.\n");
if (int1 != int2)
  flag = 0;

printf ("Committing transaction....\n");
EXEC SQL COMMIT WORK;
if (SQLCODE < 0)
{
  printf ("Transaction voided.\n");
  goto P177;
}
goto P179;

P177:
if (debug1 != 0)
  printf("Debug trace: P177\n");
  printf ("SQLCODE is %ld\n", SQLCODE);
  fails = fails + 1;
  if (fails > maxfls)
    goto P199;
  EXEC SQL ROLLBACK WORK;
  goto P173;

P179:
/* Make sure syntax of READ UNCOMMITTED is accepted.  There's nothing */
/* else to test since its semantics allow ANYTHING.                   */
if (debug1 != 0)
  printf("Debug trace: P179\n");
printf("The following syntax should be accepted.\n");
printf("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n");
EXEC SQL SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
if (SQLCODE < 0)
{
  printf ("SQLCODE is %ld\n", SQLCODE);
  printf ("Failure on transaction statement = failure on test\n");
  flag = 0;
}

P150:
if (debug1 != 0)
  printf("Debug trace: P150\n");
printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0589','pass','PC');
       }
     else
       {
          printf("\n\n       mpa013.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0589','fail','PC');
          errcnt = errcnt + 1;
       }
     EXEC SQL COMMIT WORK;

     printf("===============================================\n\n");

EXEC SQL DELETE FROM HU.TOKENS WHERE PROG_NO = :progno;
EXEC SQL COMMIT WORK;
exit (errcnt);

/******************** END TEST0589 *********************/

P198:
if (debug1 != 0)
  printf("Debug trace: P198\n");
printf ("CARDINALITY VIOLATION\n");

P199:
EXEC SQL ROLLBACK WORK;
if (debug1 != 0)
  printf("Debug trace: P199\n");
if (fails > maxfls) {
  printf("The number of attempts (fails) exceeds variable maxfls.\n");
  printf("Increase the value of variable maxfls, if needed.\n");
  printf("Or, increase the value of variable pauze.\n");
  }
printf ("MAYDAY    MAYDAY    PROGRAM ABORTING\n");
printf ("You will have to start this test over.\n");
printf ("Trying to kill token (no retries)....\n");
EXEC SQL DELETE FROM HU.TOKENS WHERE PROG_NO = :progno;
EXEC SQL COMMIT WORK;
exit (-1);
}

void
SLEEEP (int plen)
{
  /* TEd hook to replace SLEEEP routine #1 */
  repcnt = pauze * plen;
  iii = 1;
P133: 
  int3 = -1;
  EXEC SQL UPDATE HU.STAFF3
           SET EMPNAME = NULL WHERE GRADE = :int3;
  iii = iii + 1;
  if (iii < repcnt)
    goto P133;
  /* TEd hook to replace SLEEEP routine #2 */
}


void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

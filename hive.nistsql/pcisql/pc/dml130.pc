/*  EMBEDDED C (file "DML130.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1994/7/28 EMBEDDED C LANGUAGE                           */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  DML130.PC                                                    */
/*  WRITTEN BY:  David W. Flater                                 */
/*                                                               */
/*  This routine tests data type semantics with NULL and NOT     */
/*  NULL and the Information Schema.                             */
/*                                                               */
/*  REFERENCES                                                   */
/*    FIPS PUB 127-2 14.1 Transitional SQL                       */
/*    ANSI SQL-1992                                              */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
long int1;
char x1[11];
char x2[2];
char x3[11];
char x5[5];
long y1;
long y2;
long y3;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"FLATER            ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, dml130.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0678 ********************/
flag = 1;

     printf("                  TEST0678 \n");
     printf("Data type semantics with NULL / NOT NULL\n");
     printf("References:\n");
     printf("    F# 10 -- Implicit character casting\n");
     printf("    6.1 -- <data type>\n");
     printf("    12.4 -- Calls to a <procedure>\n");
     printf("    9 -- Data assignment rules\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* This is a repeat of TEST0567 and TEST0576, but with NOT NULL and */
/* in non-dynamic SQL                                               */

printf("CREATE TABLE CH1 (\n");
printf("  CH1A CHARACTER (10) NOT NULL,\n");
printf("  CH1B CHARACTER NOT NULL,\n");
printf("  CH1C CHAR (10) NOT NULL);\n");
EXEC SQL CREATE TABLE CH1 (
  CH1A CHARACTER (10) NOT NULL,
  CH1B CHARACTER NOT NULL,
  CH1C CHAR (10) NOT NULL);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("CREATE TABLE NUM1 (\n");
printf("  NUM1C1 NUMERIC (3, 2) NOT NULL,\n");
printf("  NUM1C2 NUMERIC (2) NOT NULL,\n");
printf("  NUM1C3 NUMERIC NOT NULL);\n");
EXEC SQL CREATE TABLE NUM1 (
  NUM1C1 NUMERIC (3, 2) NOT NULL,
  NUM1C2 NUMERIC (2) NOT NULL,
  NUM1C3 NUMERIC NOT NULL);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("INSERT INTO CH1 VALUES ('FOO', '', '0123456789');\n");
EXEC SQL INSERT INTO CH1 VALUES ('FOO', '', '0123456789');
CHCKOK ();
printf("\n");

strcpy (x1, "xxxxxxxxxx");
strcpy (x2, "x");
strcpy (x3, "xxxxxxxxxx");
printf("SELECT CH1A, CH1B, CH1C\n");
printf("  INTO :x1, :x2, :x3 FROM CH1;\n");
EXEC SQL SELECT CH1A, CH1B, CH1C
  INTO :x1, :x2, :x3 FROM CH1;
x1[10] = '\0';
x2[1] = '\0';
x3[10] = '\0';

CHCKOK ();
printf("\n");

/* 9.1 GR.3.c */

printf ("x1 should be 'FOO       '; its value is '%s'\n", x1);
printf ("x2 should be ' '; its value is '%s'\n", x2);
printf ("x3 should be '0123456789'; its value is '%s'\n\n", x3);

if (strcmp (x1, "FOO       ") != 0)
  flag = 0;
if (strcmp (x2, " ") != 0)
  flag = 0;
if (strcmp (x3, "0123456789") != 0)
  flag = 0;

/* 9.1 GR.3.e */

strcpy (x1, "xxxxxxxxxx");
strcpy (x2, "x");
strcpy (x5, "xxxx");

printf("x5 is too short.\n");
printf("SELECT CH1A, CH1B, CH1C\n");
printf("  INTO :x1, :x2, :x5 FROM CH1;\n");
EXEC SQL SELECT CH1A, CH1B, CH1C
  INTO :x1, :x2, :x5 FROM CH1;
x1[10] = '\0';
x2[1] = '\0';
x5[4] = '\0';

printf("SQLCODE should be >= 0; its value is %ld\n", SQLCODE);
if (SQLCODE < 0)
  flag = 0;

SQLSTATE[5] = '\0';
printf("SQLSTATE should be 01004; its value is %s\n\n", SQLSTATE);
if (strncmp (SQLSTATE, "01004", 5) != 0)
  flag = 0;

printf ("x1 should be 'FOO       '; its value is '%s'\n", x1);
printf ("x2 should be ' '; its value is '%s'\n", x2);
printf ("x5 should be '0123'; its value is '%s'\n\n", x5);

if (strcmp (x1, "FOO       ") != 0)
  flag = 0;
if (strcmp (x2, " ") != 0)
  flag = 0;
if (strcmp (x5, "0123") != 0)
  flag = 0;

/* 9.2 GR.3.b.ii */

printf("INSERT INTO CH1 VALUES ('FOO',\n");
printf("  'F', 'LITTLETOOLONG');\n");
EXEC SQL INSERT INTO CH1 VALUES ('FOO',
  'F', 'LITTLETOOLONG');

printf ("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;

/* 22001 = string data, right truncation */
SQLSTATE[5] = '\0';
printf ("SQLSTATE should be 22001; its value is %s\n\n", SQLSTATE);
/* The subclass is significant! */
if (strncmp (SQLSTATE, "22001", 5) != 0)
  flag = 0;

/* 9.2 GR.3.b.i */

printf("DELETE FROM CH1;\n");
EXEC SQL DELETE FROM CH1;
CHCKOK ();
printf("\n");

printf("INSERT INTO CH1 VALUES ('FOO',\n");
printf("  'F', 'BLANKS       ');\n");
EXEC SQL INSERT INTO CH1 VALUES ('FOO',
  'F', 'BLANKS       ');
CHCKOK ();
printf("\n");

strcpy (x1, "xxxxxxxxxx");
strcpy (x2, "x");
strcpy (x3, "xxxxxxxxxx");
printf("SELECT CH1A, CH1B, CH1C\n");
printf("  INTO :x1, :x2, :x3 FROM CH1;\n");
EXEC SQL SELECT CH1A, CH1B, CH1C
  INTO :x1, :x2, :x3 FROM CH1;
x1[10] = '\0';
x2[1] = '\0';
x3[10] = '\0';

CHCKOK ();
printf("\n");

printf ("x1 should be 'FOO       '; its value is '%s'\n", x1);
printf ("x2 should be 'F'; its value is '%s'\n", x2);
printf ("x3 should be 'BLANKS    '; its value is '%s'\n\n", x3);

if (strcmp (x1, "FOO       ") != 0)
  flag = 0;
if (strcmp (x2, "F") != 0)
  flag = 0;
if (strcmp (x3, "BLANKS    ") != 0)
  flag = 0;

/* 9.2 GR.3.k */
printf("INSERT INTO NUM1 VALUES (9.99, -99, 9);\n");
EXEC SQL INSERT INTO NUM1 VALUES (9.99, -99, 9);
CHCKOK ();
printf("\n");

y1 = -1;
y2 = -1;
y3 = -1;
printf("SELECT NUM1C1 * 100, NUM1C2, NUM1C3\n");
printf("  INTO :y1, :y2, :y3 FROM NUM1;\n");
EXEC SQL SELECT NUM1C1 * 100, NUM1C2, NUM1C3
  INTO :y1, :y2, :y3 FROM NUM1;
CHCKOK ();
printf("\n");

printf ("y1 should be 999; its value is %ld\n", y1);
printf ("y2 should be -99; its value is %ld\n", y2);
printf ("y3 should be 9; its value is %ld\n\n", y3);

if (y1 != 999 || y2 != -99 || y3 != 9)
  flag = 0;

printf("DELETE FROM NUM1;\n");
EXEC SQL DELETE FROM NUM1;
CHCKOK ();
printf("\n");

printf("INSERT INTO NUM1 VALUES (-10, 0, 0);\n");
EXEC SQL INSERT INTO NUM1 VALUES (-10, 0, 0);

printf ("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;

/* 22003 = numeric value out of range */
SQLSTATE[5] = '\0';
printf ("SQLSTATE should be 22003; its value is %s\n\n", SQLSTATE);
/* The subclass is significant! */
if (strncmp (SQLSTATE, "22003", 5) != 0)
  flag = 0;

printf("INSERT INTO NUM1 VALUES (0, 100, 0);\n");
EXEC SQL INSERT INTO NUM1 VALUES (0, 100, 0);

printf ("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;

SQLSTATE[5] = '\0';
printf ("SQLSTATE should be 22003; its value is %s\n\n", SQLSTATE);
/* The subclass is significant! */
if (strncmp (SQLSTATE, "22003", 5) != 0)
  flag = 0;

/* This one is tricky.  9.2 GR.3.k */

printf("INSERT INTO NUM1 VALUES (0, 0, 0.1);\n");
EXEC SQL INSERT INTO NUM1 VALUES (0, 0, 0.1);
CHCKOK ();
printf("\n");

y1 = -1;
y2 = -1;
y3 = -1;
printf("SELECT NUM1C1 * 100, NUM1C2, NUM1C3\n");
printf("  INTO :y1, :y2, :y3 FROM NUM1;\n");
EXEC SQL SELECT NUM1C1 * 100, NUM1C2, NUM1C3
  INTO :y1, :y2, :y3 FROM NUM1;
CHCKOK ();
printf("\n");

printf ("y1 should be 0; its value is %ld\n", y1);
printf ("y2 should be 0; its value is %ld\n", y2);
printf ("y3 should be 0; its value is %ld\n\n", y3);

if (y1 != 0 || y2 != 0 || y3 != 0)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP TABLE NUM1 CASCADE;\n");
EXEC SQL DROP TABLE NUM1 CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("DROP TABLE CH1 CASCADE;\n");
EXEC SQL DROP TABLE CH1 CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0678','pass','PC');
       }
     else
       {
          printf("\n\n       dml130.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0678','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0678 *********************/
/******************** BEGIN TEST0679 ********************/
flag = 1;

     printf("                  TEST0679 \n");
     printf("        INFO_SCHEM:  Table data types\n");
     printf("References:\n");
     printf("    F# 2 -- Basic information schema\n");
     printf("    FIPS Change Notice #1 -- Shortened identifiers\n");
     printf("      in INFO_SCHEM\n");
     printf("    TC #2 21.2.9 -- Interval columns in COLUMNS view\n\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("CREATE TABLE LOTSA_TYPES (\n");
printf("  FLAAG CHAR DEFAULT 'Y', KODE CHAR (5) NOT NULL,\n");
printf("  AMPL REAL DEFAULT 3,\n");
printf("  COORD DOUBLE PRECISION, SWAY FLOAT, REVS INTEGER,\n");
printf("  PITCH SMALLINT, DEGREE NUMERIC (3, 2), RUDDER DECIMAL (2));\n");
EXEC SQL CREATE TABLE LOTSA_TYPES (
  FLAAG CHAR DEFAULT 'Y', KODE CHAR (5) NOT NULL,
  AMPL REAL DEFAULT 3,
  COORD DOUBLE PRECISION, SWAY FLOAT, REVS INTEGER,
  PITCH SMALLINT, DEGREE NUMERIC (3, 2), RUDDER DECIMAL (2));
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND TABLE_TYPE = 'BASE TABLE';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND TABLE_TYPE = 'BASE TABLE';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = -2;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.VIEWS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.VIEWS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

/* NOTE:  FIPS Change #1 has INTERVAL_CODE where it should have */
/* INTERVAL_TYPE. */

/* See check constraints in DATA_TYPE_DESCRIPTOR, 21.3.5, */
/* for NUM_PREC_RADIX */

/*  FLAAG CHAR DEFAULT 'Y' */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'FLAAG' AND ORDINAL_POSITION = 1\n");
printf("  AND COLUMN_DEF = '''Y''' AND DATA_TYPE = 'CHARACTER'\n");
printf("  AND CHAR_MAX_LENGTH = 1 AND CHAR_OCTET_LENGTH\n");
printf("  > 0 AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS\n");
printf("  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS\n");
printf("  NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'FLAAG' AND ORDINAL_POSITION = 1
  AND COLUMN_DEF = '''Y''' AND DATA_TYPE = 'CHARACTER'
  AND CHAR_MAX_LENGTH = 1 AND CHAR_OCTET_LENGTH
  > 0 AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS
  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS
  NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  KODE CHAR (5) NOT NULL */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'KODE' AND ORDINAL_POSITION = 2\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'CHARACTER'\n");
printf("  AND CHAR_MAX_LENGTH = 5 AND CHAR_OCTET_LENGTH\n");
printf("  > 3 AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS\n");
printf("  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS\n");
printf("  NULL AND IS_NULLABLE = 'NO';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'KODE' AND ORDINAL_POSITION = 2
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'CHARACTER'
  AND CHAR_MAX_LENGTH = 5 AND CHAR_OCTET_LENGTH
  > 3 AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS
  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS
  NULL AND IS_NULLABLE = 'NO';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  AMPL REAL DEFAULT 3 */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'AMPL' AND ORDINAL_POSITION = 3\n");
printf("  AND COLUMN_DEF IS NOT NULL AND DATA_TYPE = 'REAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC >= 8 AND NUM_PREC_RADIX\n");
printf("  = 2 AND NUM_SCALE IS NULL AND DATETIME_PREC IS\n");
printf("  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS\n");
printf("  NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'AMPL' AND ORDINAL_POSITION = 3
  AND COLUMN_DEF IS NOT NULL AND DATA_TYPE = 'REAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC >= 8 AND NUM_PREC_RADIX
  = 2 AND NUM_SCALE IS NULL AND DATETIME_PREC IS
  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS
  NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  COORD DOUBLE PRECISION */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'COORD' AND ORDINAL_POSITION = 4\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'DOUBLE PRECISION'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC > 8 AND NUM_PREC_RADIX\n");
printf("  = 2 AND NUM_SCALE IS NULL AND DATETIME_PREC IS\n");
printf("  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS\n");
printf("  NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'COORD' AND ORDINAL_POSITION = 4
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'DOUBLE PRECISION'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC > 8 AND NUM_PREC_RADIX
  = 2 AND NUM_SCALE IS NULL AND DATETIME_PREC IS
  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS
  NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  SWAY FLOAT */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'SWAY' AND ORDINAL_POSITION = 5\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'FLOAT'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC >= 8 AND NUM_PREC_RADIX\n");
printf("  = 2 AND NUM_SCALE IS NULL AND DATETIME_PREC IS\n");
printf("  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS\n");
printf("  NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'SWAY' AND ORDINAL_POSITION = 5
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'FLOAT'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC >= 8 AND NUM_PREC_RADIX
  = 2 AND NUM_SCALE IS NULL AND DATETIME_PREC IS
  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS
  NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  REVS INTEGER */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'REVS' AND ORDINAL_POSITION = 6\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTEGER'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC > 0 AND NUM_SCALE = 0 AND\n");
printf("  (NUM_PREC_RADIX = 2 OR NUM_PREC_RADIX = 10)\n");
printf("  AND DATETIME_PREC IS NULL AND INTERVAL_TYPE IS NULL AND\n");
printf("  INTERVAL_PREC IS NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'REVS' AND ORDINAL_POSITION = 6
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTEGER'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC > 0 AND NUM_SCALE = 0 AND
  (NUM_PREC_RADIX = 2 OR NUM_PREC_RADIX = 10)
  AND DATETIME_PREC IS NULL AND INTERVAL_TYPE IS NULL AND
  INTERVAL_PREC IS NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  PITCH SMALLINT */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'PITCH' AND ORDINAL_POSITION = 7\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'SMALLINT'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC > 0 AND NUM_SCALE = 0 AND\n");
printf("  (NUM_PREC_RADIX = 2 OR NUM_PREC_RADIX = 10)\n");
printf("  AND DATETIME_PREC IS NULL AND INTERVAL_TYPE IS NULL AND\n");
printf("  INTERVAL_PREC IS NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'PITCH' AND ORDINAL_POSITION = 7
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'SMALLINT'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC > 0 AND NUM_SCALE = 0 AND
  (NUM_PREC_RADIX = 2 OR NUM_PREC_RADIX = 10)
  AND DATETIME_PREC IS NULL AND INTERVAL_TYPE IS NULL AND
  INTERVAL_PREC IS NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  DEGREE NUMERIC (3, 2) */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'DEGREE' AND ORDINAL_POSITION = 8\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'NUMERIC'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC = 3 AND NUM_SCALE = 2\n");
printf("  AND NUM_PREC_RADIX = 10\n");
printf("  AND DATETIME_PREC IS NULL AND INTERVAL_TYPE IS NULL AND\n");
printf("  INTERVAL_PREC IS NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'DEGREE' AND ORDINAL_POSITION = 8
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'NUMERIC'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC = 3 AND NUM_SCALE = 2
  AND NUM_PREC_RADIX = 10
  AND DATETIME_PREC IS NULL AND INTERVAL_TYPE IS NULL AND
  INTERVAL_PREC IS NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  RUDDER DECIMAL (2) */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'RUDDER' AND ORDINAL_POSITION = 9\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'DECIMAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC >= 2 AND NUM_SCALE = 0\n");
printf("  AND NUM_PREC_RADIX = 10\n");
printf("  AND DATETIME_PREC IS NULL AND INTERVAL_TYPE IS NULL AND\n");
printf("  INTERVAL_PREC IS NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'RUDDER' AND ORDINAL_POSITION = 9
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'DECIMAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC >= 2 AND NUM_SCALE = 0
  AND NUM_PREC_RADIX = 10
  AND DATETIME_PREC IS NULL AND INTERVAL_TYPE IS NULL AND
  INTERVAL_PREC IS NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP TABLE LOTSA_TYPES CASCADE;\n");
EXEC SQL DROP TABLE LOTSA_TYPES CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0679','pass','PC');
       }
     else
       {
          printf("\n\n       dml130.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0679','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0679 *********************/
/******************** BEGIN TEST0680 ********************/
flag = 1;

     printf("                  TEST0680 \n");
     printf("        INFO_SCHEM:  View data types\n");
     printf("References:\n");
     printf("    F# 2 -- Basic information schema\n");
     printf("    FIPS Change Notice #1 -- Shortened identifiers\n");
     printf("      in INFO_SCHEM\n");
     printf("    TC #1 21.2.9 -- Interval columns in COLUMNS view\n\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("CREATE TABLE LT1 (\n");
printf("  FLAAG CHAR DEFAULT 'Y', KODE CHAR (5) NOT NULL,\n");
printf("  AMPL REAL DEFAULT 3,\n");
printf("  COORD DOUBLE PRECISION, SWAY FLOAT, REVS INTEGER);\n");
EXEC SQL CREATE TABLE LT1 (
  FLAAG CHAR DEFAULT 'Y', KODE CHAR (5) NOT NULL,
  AMPL REAL DEFAULT 3,
  COORD DOUBLE PRECISION, SWAY FLOAT, REVS INTEGER);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("CREATE TABLE LT2 (\n");
printf("  PITCH SMALLINT, DEGREE NUMERIC (3, 2), RUDDER DECIMAL (2));\n");
EXEC SQL CREATE TABLE LT2 (
  PITCH SMALLINT, DEGREE NUMERIC (3, 2), RUDDER DECIMAL (2));
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("CREATE VIEW LOTSA_TYPES AS\n");
printf("  SELECT * FROM LT1, LT2;\n");
EXEC SQL CREATE VIEW LOTSA_TYPES AS
  SELECT * FROM LT1, LT2;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND TABLE_TYPE = 'VIEW';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND TABLE_TYPE = 'VIEW';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.VIEWS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.VIEWS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  FLAAG CHAR DEFAULT 'Y' */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'FLAAG' AND ORDINAL_POSITION = 1\n");
printf("  AND COLUMN_DEF = '''Y''' AND DATA_TYPE = 'CHARACTER'\n");
printf("  AND CHAR_MAX_LENGTH = 1 AND CHAR_OCTET_LENGTH\n");
printf("  > 0 AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS\n");
printf("  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS\n");
printf("  NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'FLAAG' AND ORDINAL_POSITION = 1
  AND COLUMN_DEF = '''Y''' AND DATA_TYPE = 'CHARACTER'
  AND CHAR_MAX_LENGTH = 1 AND CHAR_OCTET_LENGTH
  > 0 AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS
  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS
  NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  KODE CHAR (5) NOT NULL */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'KODE' AND ORDINAL_POSITION = 2\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'CHARACTER'\n");
printf("  AND CHAR_MAX_LENGTH = 5 AND CHAR_OCTET_LENGTH\n");
printf("  > 0 AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS\n");
printf("  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS\n");
printf("  NULL AND IS_NULLABLE = 'NO';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'KODE' AND ORDINAL_POSITION = 2
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'CHARACTER'
  AND CHAR_MAX_LENGTH = 5 AND CHAR_OCTET_LENGTH
  > 0 AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS
  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS
  NULL AND IS_NULLABLE = 'NO';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  AMPL REAL DEFAULT 3 */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'AMPL' AND ORDINAL_POSITION = 3\n");
printf("  AND COLUMN_DEF IS NOT NULL AND DATA_TYPE = 'REAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC >= 8 AND NUM_PREC_RADIX\n");
printf("  = 2 AND NUM_SCALE IS NULL AND DATETIME_PREC IS\n");
printf("  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS\n");
printf("  NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'AMPL' AND ORDINAL_POSITION = 3
  AND COLUMN_DEF IS NOT NULL AND DATA_TYPE = 'REAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC >= 8 AND NUM_PREC_RADIX
  = 2 AND NUM_SCALE IS NULL AND DATETIME_PREC IS
  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS
  NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  COORD DOUBLE PRECISION */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'COORD' AND ORDINAL_POSITION = 4\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'DOUBLE PRECISION'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC > 8 AND NUM_PREC_RADIX\n");
printf("  = 2 AND NUM_SCALE IS NULL AND DATETIME_PREC IS\n");
printf("  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS\n");
printf("  NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'COORD' AND ORDINAL_POSITION = 4
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'DOUBLE PRECISION'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC > 8 AND NUM_PREC_RADIX
  = 2 AND NUM_SCALE IS NULL AND DATETIME_PREC IS
  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS
  NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  SWAY FLOAT */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'SWAY' AND ORDINAL_POSITION = 5\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'FLOAT'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC >= 8 AND NUM_PREC_RADIX\n");
printf("  = 2 AND NUM_SCALE IS NULL AND DATETIME_PREC IS\n");
printf("  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS\n");
printf("  NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'SWAY' AND ORDINAL_POSITION = 5
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'FLOAT'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC >= 8 AND NUM_PREC_RADIX
  = 2 AND NUM_SCALE IS NULL AND DATETIME_PREC IS
  NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS
  NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  REVS INTEGER */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'REVS' AND ORDINAL_POSITION = 6\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTEGER'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC > 0 AND NUM_SCALE = 0 AND\n");
printf("  (NUM_PREC_RADIX = 2 OR NUM_PREC_RADIX = 10)\n");
printf("  AND DATETIME_PREC IS NULL AND INTERVAL_TYPE IS NULL AND\n");
printf("  INTERVAL_PREC IS NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'REVS' AND ORDINAL_POSITION = 6
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTEGER'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC > 0 AND NUM_SCALE = 0 AND
  (NUM_PREC_RADIX = 2 OR NUM_PREC_RADIX = 10)
  AND DATETIME_PREC IS NULL AND INTERVAL_TYPE IS NULL AND
  INTERVAL_PREC IS NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  PITCH SMALLINT */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'PITCH' AND ORDINAL_POSITION = 7\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'SMALLINT'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC > 0 AND NUM_SCALE = 0 AND\n");
printf("  (NUM_PREC_RADIX = 2 OR NUM_PREC_RADIX = 10)\n");
printf("  AND DATETIME_PREC IS NULL AND INTERVAL_TYPE IS NULL AND\n");
printf("  INTERVAL_PREC IS NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'PITCH' AND ORDINAL_POSITION = 7
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'SMALLINT'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC > 0 AND NUM_SCALE = 0 AND
  (NUM_PREC_RADIX = 2 OR NUM_PREC_RADIX = 10)
  AND DATETIME_PREC IS NULL AND INTERVAL_TYPE IS NULL AND
  INTERVAL_PREC IS NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  DEGREE NUMERIC (3, 2) */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'DEGREE' AND ORDINAL_POSITION = 8\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'NUMERIC'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC = 3 AND NUM_SCALE = 2\n");
printf("  AND NUM_PREC_RADIX = 10\n");
printf("  AND DATETIME_PREC IS NULL AND INTERVAL_TYPE IS NULL AND\n");
printf("  INTERVAL_PREC IS NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'DEGREE' AND ORDINAL_POSITION = 8
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'NUMERIC'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC = 3 AND NUM_SCALE = 2
  AND NUM_PREC_RADIX = 10
  AND DATETIME_PREC IS NULL AND INTERVAL_TYPE IS NULL AND
  INTERVAL_PREC IS NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  RUDDER DECIMAL (2) */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'\n");
printf("  AND COLUMN_NAME = 'RUDDER' AND ORDINAL_POSITION = 9\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'DECIMAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC >= 2 AND NUM_SCALE = 0\n");
printf("  AND NUM_PREC_RADIX = 10\n");
printf("  AND DATETIME_PREC IS NULL AND INTERVAL_TYPE IS NULL AND\n");
printf("  INTERVAL_PREC IS NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_TYPES'
  AND COLUMN_NAME = 'RUDDER' AND ORDINAL_POSITION = 9
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'DECIMAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC >= 2 AND NUM_SCALE = 0
  AND NUM_PREC_RADIX = 10
  AND DATETIME_PREC IS NULL AND INTERVAL_TYPE IS NULL AND
  INTERVAL_PREC IS NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP TABLE LT1 CASCADE;\n");
EXEC SQL DROP TABLE LT1 CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("DROP TABLE LT2 CASCADE;\n");
EXEC SQL DROP TABLE LT2 CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0680','pass','PC');
       }
     else
       {
          printf("\n\n       dml130.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0680','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0680 *********************/
/******************** BEGIN TEST0682 ********************/
flag = 1;

     printf("                  TEST0682 \n");
     printf("     INFO_SCHEM:  Datetime data types\n");
     printf("References:\n");
     printf("    F# 2 -- Basic information schema\n");
     printf("    F# 5 -- DATETIME data types\n");
     printf("    FIPS Change Notice #1 -- Shortened identifiers\n");
     printf("      in INFO_SCHEM\n");
     printf("    TC #1 21.2.9 -- Interval columns in COLUMNS view\n\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("CREATE TABLE LOTSA_DATETIMES (\n");
printf("  C1 DATE, C2 TIME, C3 TIMESTAMP,\n");
printf("  C4 INTERVAL YEAR, C5 INTERVAL MONTH, C6 INTERVAL DAY,\n");
printf("  C7 INTERVAL HOUR, C8 INTERVAL MINUTE, C9 INTERVAL SECOND,\n");
printf("  C10 INTERVAL YEAR TO MONTH,\n");
printf("  C11 INTERVAL DAY TO HOUR,\n");
printf("  C12 INTERVAL DAY TO MINUTE,\n");
printf("  C13 INTERVAL DAY TO SECOND,\n");
printf("  C14 INTERVAL HOUR TO MINUTE,\n");
printf("  C15 INTERVAL HOUR TO SECOND,\n");
printf("  C16 INTERVAL MINUTE TO SECOND);\n");
EXEC SQL CREATE TABLE LOTSA_DATETIMES (
  C1 DATE, C2 TIME, C3 TIMESTAMP,
  C4 INTERVAL YEAR, C5 INTERVAL MONTH, C6 INTERVAL DAY,
  C7 INTERVAL HOUR, C8 INTERVAL MINUTE, C9 INTERVAL SECOND,
  C10 INTERVAL YEAR TO MONTH,
  C11 INTERVAL DAY TO HOUR,
  C12 INTERVAL DAY TO MINUTE,
  C13 INTERVAL DAY TO SECOND,
  C14 INTERVAL HOUR TO MINUTE,
  C15 INTERVAL HOUR TO SECOND,
  C16 INTERVAL MINUTE TO SECOND);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER'\n");
printf("  AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND TABLE_TYPE = 'BASE TABLE';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES
  WHERE TABLE_SCHEM = 'FLATER'
  AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND TABLE_TYPE = 'BASE TABLE';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/* The Standard specifies that DATETIME_PREC is not null      */
/* for the DATE type.  We have had some discussions regarding */
/* the value that DATETIME_PREC should have for types that    */
/* have no seconds field, such as DATE.  It was decided that  */
/* it should be zero.  We plan to test for the value zero in  */
/* the next release.                                          */

/*  C1 DATE */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND COLUMN_NAME = 'C1' AND ORDINAL_POSITION = 1\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'DATE'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS\n");
printf("  NOT NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS\n");
printf("  NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND COLUMN_NAME = 'C1' AND ORDINAL_POSITION = 1
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'DATE'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS
  NOT NULL AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS
  NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/* Precisions are specified by 6.1 SR.25 */

/*  C2 TIME */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND COLUMN_NAME = 'C2' AND ORDINAL_POSITION = 2\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'TIME'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC = 0\n");
printf("  AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS\n");
printf("  NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND COLUMN_NAME = 'C2' AND ORDINAL_POSITION = 2
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'TIME'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC = 0
  AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS
  NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/* 10.1 SR.6: If SECOND is specified without a precision then 6 is implicit. */

/*  C3 TIMESTAMP */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND COLUMN_NAME = 'C3' AND ORDINAL_POSITION = 3\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'TIMESTAMP'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC = 6\n");
printf("  AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS\n");
printf("  NULL AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND COLUMN_NAME = 'C3' AND ORDINAL_POSITION = 3
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'TIMESTAMP'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC = 6
  AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS
  NULL AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/* Interval leading field precision:  10.1 SR.5 */

/*  C4 INTERVAL YEAR */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND COLUMN_NAME = 'C4' AND ORDINAL_POSITION = 4\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL\n");
printf("  AND INTERVAL_TYPE = 'YEAR' AND INTERVAL_PREC = 2\n");
printf("  AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND COLUMN_NAME = 'C4' AND ORDINAL_POSITION = 4
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL
  AND INTERVAL_TYPE = 'YEAR' AND INTERVAL_PREC = 2
  AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  C5 INTERVAL MONTH */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND COLUMN_NAME = 'C5' AND ORDINAL_POSITION = 5\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL\n");
printf("  AND INTERVAL_TYPE = 'MONTH' AND INTERVAL_PREC = 2\n");
printf("  AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND COLUMN_NAME = 'C5' AND ORDINAL_POSITION = 5
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL
  AND INTERVAL_TYPE = 'MONTH' AND INTERVAL_PREC = 2
  AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  C6 INTERVAL DAY */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND COLUMN_NAME = 'C6' AND ORDINAL_POSITION = 6\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL\n");
printf("  AND INTERVAL_TYPE = 'DAY' AND INTERVAL_PREC = 2\n");
printf("  AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND COLUMN_NAME = 'C6' AND ORDINAL_POSITION = 6
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL
  AND INTERVAL_TYPE = 'DAY' AND INTERVAL_PREC = 2
  AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  C7 INTERVAL HOUR */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND COLUMN_NAME = 'C7' AND ORDINAL_POSITION = 7\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL\n");
printf("  AND INTERVAL_TYPE = 'HOUR' AND INTERVAL_PREC = 2\n");
printf("  AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND COLUMN_NAME = 'C7' AND ORDINAL_POSITION = 7
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL
  AND INTERVAL_TYPE = 'HOUR' AND INTERVAL_PREC = 2
  AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  C8 INTERVAL MINUTE */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND COLUMN_NAME = 'C8' AND ORDINAL_POSITION = 8\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL\n");
printf("  AND INTERVAL_TYPE = 'MINUTE' AND INTERVAL_PREC = 2\n");
printf("  AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND COLUMN_NAME = 'C8' AND ORDINAL_POSITION = 8
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL
  AND INTERVAL_TYPE = 'MINUTE' AND INTERVAL_PREC = 2
  AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  C9 INTERVAL SECOND */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND COLUMN_NAME = 'C9' AND ORDINAL_POSITION = 9\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC = 6\n");
printf("  AND INTERVAL_TYPE = 'SECOND' AND INTERVAL_PREC = 2\n");
printf("  AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND COLUMN_NAME = 'C9' AND ORDINAL_POSITION = 9
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC = 6
  AND INTERVAL_TYPE = 'SECOND' AND INTERVAL_PREC = 2
  AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  C10 INTERVAL YEAR TO MONTH */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND COLUMN_NAME = 'C10' AND ORDINAL_POSITION = 10\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL\n");
printf("  AND INTERVAL_TYPE = 'YEAR TO MONTH' AND INTERVAL_PREC = 2\n");
printf("  AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND COLUMN_NAME = 'C10' AND ORDINAL_POSITION = 10
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL
  AND INTERVAL_TYPE = 'YEAR TO MONTH' AND INTERVAL_PREC = 2
  AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  C11 INTERVAL DAY TO HOUR */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND COLUMN_NAME = 'C11' AND ORDINAL_POSITION = 11\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL\n");
printf("  AND INTERVAL_TYPE = 'DAY TO HOUR' AND INTERVAL_PREC = 2\n");
printf("  AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND COLUMN_NAME = 'C11' AND ORDINAL_POSITION = 11
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL
  AND INTERVAL_TYPE = 'DAY TO HOUR' AND INTERVAL_PREC = 2
  AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  C12 INTERVAL DAY TO MINUTE */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND COLUMN_NAME = 'C12' AND ORDINAL_POSITION = 12\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL\n");
printf("  AND INTERVAL_TYPE = 'DAY TO MINUTE' AND INTERVAL_PREC = 2\n");
printf("  AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND COLUMN_NAME = 'C12' AND ORDINAL_POSITION = 12
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL
  AND INTERVAL_TYPE = 'DAY TO MINUTE' AND INTERVAL_PREC = 2
  AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  C13 INTERVAL DAY TO SECOND */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND COLUMN_NAME = 'C13' AND ORDINAL_POSITION = 13\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC = 6\n");
printf("  AND INTERVAL_TYPE = 'DAY TO SECOND' AND INTERVAL_PREC = 2\n");
printf("  AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND COLUMN_NAME = 'C13' AND ORDINAL_POSITION = 13
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC = 6
  AND INTERVAL_TYPE = 'DAY TO SECOND' AND INTERVAL_PREC = 2
  AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  C14 INTERVAL HOUR TO MINUTE */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND COLUMN_NAME = 'C14' AND ORDINAL_POSITION = 14\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL\n");
printf("  AND INTERVAL_TYPE = 'HOUR TO MINUTE' AND INTERVAL_PREC = 2\n");
printf("  AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND COLUMN_NAME = 'C14' AND ORDINAL_POSITION = 14
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC IS NOT NULL
  AND INTERVAL_TYPE = 'HOUR TO MINUTE' AND INTERVAL_PREC = 2
  AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  C15 INTERVAL HOUR TO SECOND */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND COLUMN_NAME = 'C15' AND ORDINAL_POSITION = 15\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC = 6\n");
printf("  AND INTERVAL_TYPE = 'HOUR TO SECOND' AND INTERVAL_PREC = 2\n");
printf("  AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND COLUMN_NAME = 'C15' AND ORDINAL_POSITION = 15
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC = 6
  AND INTERVAL_TYPE = 'HOUR TO SECOND' AND INTERVAL_PREC = 2
  AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/*  C16 INTERVAL MINUTE TO SECOND */
int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'\n");
printf("  AND COLUMN_NAME = 'C16' AND ORDINAL_POSITION = 16\n");
printf("  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'\n");
printf("  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH\n");
printf("  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX\n");
printf("  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC = 6\n");
printf("  AND INTERVAL_TYPE = 'MINUTE TO SECOND' AND INTERVAL_PREC = 2\n");
printf("  AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'LOTSA_DATETIMES'
  AND COLUMN_NAME = 'C16' AND ORDINAL_POSITION = 16
  AND COLUMN_DEF IS NULL AND DATA_TYPE = 'INTERVAL'
  AND CHAR_MAX_LENGTH IS NULL AND CHAR_OCTET_LENGTH
  IS NULL AND NUM_PREC IS NULL AND NUM_PREC_RADIX
  IS NULL AND NUM_SCALE IS NULL AND DATETIME_PREC = 6
  AND INTERVAL_TYPE = 'MINUTE TO SECOND' AND INTERVAL_PREC = 2
  AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP TABLE LOTSA_DATETIMES CASCADE;\n");
EXEC SQL DROP TABLE LOTSA_DATETIMES CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0682','pass','PC');
       }
     else
       {
          printf("\n\n       dml130.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0682','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0682 *********************/
     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

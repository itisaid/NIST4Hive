/*  EMBEDDED C (file "YTS802.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS802.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  Support of SQL_FEATURES table in documentation schema        */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    Support of SQL_FEATURES table in documentation schema      */
/*    F# 50 Documentation schema                                 */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-26                                    */
/*    Added rollback after authid                                */
/*    Removed EXEC SQL from printf                               */
/*    Added FIPS printout                                        */
/*    Removed syntax errors (C language and SQL)                 */
/*    Reduced severity of coding rule violations                 */
/*    Removed reference to non-existent table                    */
/*    Fixed logic errors                                         */
/*    Added check for existence of FEATURE_COMMENTS column       */
/*    Fixed typos in feature names                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short co;
short co2;
short fid;
char fnam[51];
char iss[4];
char isv[4];
char clas[13];
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
char tr[13];
char ntrm[13];
char rd[4];
char fl[5];
/* The arrays below are required for storing feature name text */
/* for comparison with FEATURE_NAME values fetched by cursor data802 */
char FIPS1[51];
char FIPS2[51];
char FIPS3[51];
char FIPS4[51];
char FIPS5[51];
char FIPS6[51];
char FIPS7[51];
char FIPS8[51];
char FIPS9[51];
char FIPS10[51];
char FIPS11[51];
char FIPS12[51];
char FIPS13[51];
char FIPS14[51];
char FIPS15[51];
char FIPS16[51];
char FIPS17[51];
char FIPS18[51];
char FIPS19[51];
char FIPS20[51];
char FIPS21[51];
char FIPS22[51];
char FIPS23[51];
char FIPS24[51];
char FIPS25[51];
char FIPS26[51];
char FIPS27[51];
char FIPS28[51];
char FIPS29[51];
char FIPS30[51];
char FIPS31[51];
char FIPS32[51];
char FIPS33[51];
char FIPS34[51];
char FIPS35[51];
char FIPS36[51];
char FIPS37[51];
char FIPS38[51];
char FIPS39[51];
char FIPS40[51];
char FIPS41[51];
char FIPS42[51];
char FIPS43[51];
char FIPS44[51];
char FIPS45[51];
char FIPS46[51];
char FIPS47[51];
char FIPS48[51];
char FIPS49[51];
char FIPS50[51];
char FIPS51[51];
char FIPS52[51];
char FIPS53[51];
char FIPS54[51];
char FIPS55[51];
char FIPS56[51];
char FIPS57[51];
char FIPS58[51];
char FIPS59[51];
char FIPS60[51];
char FIPS61[51];
char FIPS62[51];
char FIPS63[51];
char FIPS64[51];
char FIPS65[51];
char FIPS66[51];
char FIPS67[51];
char FIPS68[51];
char FIPS69[51];
char FIPS70[51];
char FIPS71[51];
char FIPS72[51];
char FIPS73[51];
char FIPS74[51];
char FIPS75[51];
char FIPS76[51];
char FIPS77[51];
char FIPS78[51];
char FIPS79[51];
char FIPS80[51];
char FIPS81[51];
char FIPS82[51];
char FIPS83[51];
char FIPS84[51];
char FIPS85[51];
char FIPS86[51];
char FIPS87[51];
char FIPS88[51];
char FIPS89[51];
long norm1;
long norm2;
short i;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;
long     flag2;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts802.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7548 ********************/
flag = 1;
flag2 = 1;

     printf("            FIPS TEST7548 \n");
     printf("   Support of SQL_FEATURES tab. in documentatn schema\n");
     printf("References:\n");
     printf("    FIPS15.1  SQL_FEATURES table\n");
     printf("    F# 50 Documentation schema\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* This test will need modification if the list of features is ever */
/* extended for SQL3. */

SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* initialise variables */
co = 0;
co2 = 99;
i = 1;

/* set up classification types */

strcpy(tr,"TRANSITIONAL");
strcpy(ntrm,"INTERMEDIATE");
strcpy(rd,"RDA");
strcpy(fl,"FULL");

/*set up arrays for FIPS Feature Names */

strcpy(FIPS1,"Dynamic SQLxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS2,"Basic information schemaxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS3,"Basic schema manipulationxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS4,"Joined tablexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS5,"DATETIME data typesxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS6,"VARCHAR data typexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS7,"TRIM functionxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS8,"UNION in viewsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS9,"Implicit numeric castingxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS10,"Implicit character castingxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS11,"Transaction isolationxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS12,"Get diagnosticsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS13,"Grouped operationsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS14,"Qualified * in select listxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS15,"Lowercase identifiersxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS16,"PRIMARY KEY enhancementxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS17,"Multiple schemas per userxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS18,"Multiple module supportxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS19,"Referential delete actionsxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS20,"CAST functionsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS21,"INSERT expressionsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS22,"Explicit defaultsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS23,"Privilege tablesxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS24,"Keyword relaxationsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS25,"Domain definitionxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS26,"CASE expressionxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS27,"Compound character literalsxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS28,"LIKE enhancementsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS29,"UNIQUE predicatexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS30,"Table operationsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS31,"Schema definition statementxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS32,"User authorizationxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS33,"Constraint tablesxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS34,"Usage tablesxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS35,"Intermediate information schemaxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS36,"Subprogram supportxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS37,"Intermediate SQL Flaggingxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS38,"Schema manipulationxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS39,"Long identifiersxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS40,"Full outer joinxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS41,"Time zone specificationxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS42,"National characterxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS43,"Scrolled cursorsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS44,"Intermediate set functionxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS45,"Character set definitionxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS46,"Named character setsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS47,"Scalar subquery valuesxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS48,"Expanded null predicatexxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS49,"Constraint managementxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS50,"Documentation schemaxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS51,"BIT data typexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS52,"Assertion constraintsxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS53,"Temporary tablesxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS54,"Full dynamic SQLxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS55,"Full DATETIMExxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS56,"Full value expressionsxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS57,"Truth value testsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS58,"Full character functionsxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS59,"Derived tables in FROMxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS60,"Trailing underscorexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS61,"Indicator data typesxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS62,"Referential name orderxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS63,"Full SQL Flaggingxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS64,"Row and table constructorsxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS65,"Catalog name qualifiersxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS66,"Simple tablesxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS67,"Subqueries in CHECKxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS68,"Union and Cross joinxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS69,"Collation and translationxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS70,"Referential update actionsxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS71,"ALTER domainxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS72,"Deferrable constraintsxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS73,"INSERT column privilegesxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS74,"Referential MATCH typesxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS75,"View CHECK enhancementsxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS76,"Session managementxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS77,"Connection managementxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS78,"Self-referencing operationsxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS79,"Insensitive cursorsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS80,"Full set functionxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS81,"Catalog flaggingxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS82,"Local table referencesxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS83,"Full cursor updatexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS84,"RDA/SQL-Clientxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS85,"RDA/SQL-Serverxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS86,"RDA Stored Executionxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS87,"RDA Cancelxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS88,"RDA Statusxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(FIPS89,"RDA TP Application Contextxxxxxxxxxxxxxxxxxxxxxxxx");

printf("DECLARE data802 CURSOR FOR\n");
printf("SELECT FEATURE_ID, FEATURE_NAME, CLASSIFICATION,\n");
printf("IS_SUPPORTED, IS_VERIFIED\n");
printf("FROM FIPS_DOCUMENTATION.SQL_FEATURES\n");
printf("ORDER BY FEATURE_ID;\n\n");

EXEC SQL DECLARE data802 CURSOR FOR
SELECT FEATURE_ID, FEATURE_NAME, CLASSIFICATION,
IS_SUPPORTED, IS_VERIFIED
FROM FIPS_DOCUMENTATION.SQL_FEATURES
ORDER BY FEATURE_ID;

printf("OPEN data802;\n");
EXEC SQL OPEN data802;
CHCKOK ();
printf("\n");

/* ensure there are 89 rows i.e. one for each feature */

printf("SELECT COUNT (*) INTO :co\n");
printf("FROM FIPS_DOCUMENTATION.SQL_FEATURES;\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM FIPS_DOCUMENTATION.SQL_FEATURES;
CHCKOK ();
printf ("co should be 89; its value is %d\n\n", co);
if (co != 89)
  flag = 0;

/* Make sure that FEATURE_COMMENTS exists */

co = 0;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM FIPS_DOCUMENTATION.SQL_FEATURES\n");
printf("WHERE FEATURE_COMMENTS IS NOT NULL\n");
printf("OR FEATURE_ID BETWEEN 1 AND 89;\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM FIPS_DOCUMENTATION.SQL_FEATURES
WHERE FEATURE_COMMENTS IS NOT NULL
OR FEATURE_ID BETWEEN 1 AND 89;
CHCKOK ();
printf ("co should be 89; its value is %d\n\n", co);
if (co != 89)
  flag = 0;

/* return and check all values of the cursor */
/* The feature id, name and classification are checked */

P100:

/* initialise all host variables before fetch */
   fid = 0;
   strcpy(fnam,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
   strcpy(clas,"xxxxxxxxxxxx");
   strcpy(iss,"xxx");
   strcpy(isv,"xxx");

   printf("FETCH data802 INTO :fid, :fnam, :clas, :iss, :isv;\n");
   EXEC SQL FETCH data802 
     INTO :fid, :fnam, :clas, :iss, :isv;
   if (SQLCODE != 0)
     goto P102;
   CHCKOK ();

   /* check the Feature referenced was the one expected */
P101:
  if (fid != i && i < 90)
   {
      printf("********** ERROR -- FEATURE NUMBER %d IS MISSING\n", i);
      i = i + 1;
      flag = 0;
      goto P101;
   }

   /* check correct values are returned for each FIPS feature */
   if (fid == 1)
   {
    if (strncmp(fnam,FIPS1,11) != 0 || strncmp(clas,tr,12) != 0)
     {
        printf("********** ERROR -- Reference to FIPS FEATURE #1 incorrect\n");
        flag = 0;
     }
   }
   if (fid == 2)
   {
     if (strncmp(fnam,FIPS2,24) != 0 || strncmp(clas,tr,12) != 0)
     {
       printf("********** ERROR -- Reference to FIPS FEATURE #2 incorrect\n");
         flag = 0;
     }
   }
   if (fid == 3)
   { if (strncmp(fnam,FIPS3,25) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #3 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 4)
   { if (strncmp(fnam,FIPS4,12) != 0  || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #4 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 5)
   { if (strncmp(fnam,FIPS5,19) != 0  || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #5 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 6)
   { if (strncmp(fnam,FIPS6,17) != 0  || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #6 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 7)
   { if (strncmp(fnam,FIPS7,13) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #7 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 8)
   { if (strncmp(fnam,FIPS8,14) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #8 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 9)
   { if (strncmp(fnam,FIPS9,24) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #9 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 10)
   { if (strncmp(fnam,FIPS10,26) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #10 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 11)
   { if (strncmp(fnam,FIPS11,21) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #11 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 12)
   { if (strncmp(fnam,FIPS12,15) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #12 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 13)
   { if (strncmp(fnam,FIPS13,18) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #13 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 14)
   { if (strncmp(fnam,FIPS14,26) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #14 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 15)
   { if (strncmp(fnam,FIPS15,21) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #15 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 16)
   { if (strncmp(fnam,FIPS16,23) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #16 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 17)
   { if (strncmp(fnam,FIPS17,25) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #17 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 18)
   { if (strncmp(fnam,FIPS18,23) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #18 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 19)
   { if (strncmp(fnam,FIPS19,26) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #19 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 20)
   { if (strncmp(fnam,FIPS20,14) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #20 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 21)
   { if (strncmp(fnam,FIPS21,18) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #21 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 22)
   { if (strncmp(fnam,FIPS22,17) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #22 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 23)
   { if (strncmp(fnam,FIPS23,16) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #23 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 24)
   { if (strncmp(fnam,FIPS24,19) != 0 || strncmp(clas,tr,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #24 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 25)
   { if (strncmp(fnam,FIPS25,17) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #25 incorrect\n");
         flag = 0; 
         }
   }
   if (fid == 26)
   { if (strncmp(fnam,FIPS26,15) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #26 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 27)
   { if (strncmp(fnam,FIPS27,27) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #27 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 28)
   { if (strncmp(fnam,FIPS28,17) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #28 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 29)
   { if (strncmp(fnam,FIPS29,16) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #29 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 30)
   { if (strncmp(fnam,FIPS30,16) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #30 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 31)
   { if (strncmp(fnam,FIPS31,27) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #31 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 32)
   { if (strncmp(fnam,FIPS32,18) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #32 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 33)
   { if (strncmp(fnam,FIPS33,17) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #33 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 34)
   { if (strncmp(fnam,FIPS34,12) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #34 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 35)
   { if (strncmp(fnam,FIPS35,31) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #35 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 36)
   { if (strncmp(fnam,FIPS36,18) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #36 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 37)
   { if (strncmp(fnam,FIPS37,25) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #37 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 38)
   { if (strncmp(fnam,FIPS38,19) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #38 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 39)
   { if (strncmp(fnam,FIPS39,16) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #39 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 40)
   { if (strncmp(fnam,FIPS40,15) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #40 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 41)
   { if (strncmp(fnam,FIPS41,23) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #41 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 42)
   { if (strncmp(fnam,FIPS42,18) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #42 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 43)
   { if (strncmp(fnam,FIPS43,16) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #43 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 44)
   { if (strncmp(fnam,FIPS44,25) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #44 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 45)
   { if (strncmp(fnam,FIPS45,24) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #45 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 46)
   { if (strncmp(fnam,FIPS46,20) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #46 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 47)
   { if (strncmp(fnam,FIPS47,22) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #47 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 48)
   { if (strncmp(fnam,FIPS48,23) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #48 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 49)
   { if (strncmp(fnam,FIPS49,21) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #49 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 50)
   { if (strncmp(fnam,FIPS50,20) != 0 || strncmp(clas,ntrm,12) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #50 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 51)
   { if (strncmp(fnam,FIPS51,13) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #51 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 52)
   { if (strncmp(fnam,FIPS52,21) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #52 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 53)
   { if (strncmp(fnam,FIPS53,16) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #53 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 54)
   { if (strncmp(fnam,FIPS54,16) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #54 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 55)
   { if (strncmp(fnam,FIPS55,13) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #55 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 56)
   { if (strncmp(fnam,FIPS56,22) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #56 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 57)
   { if (strncmp(fnam,FIPS57,17) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #57 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 58)
   { if (strncmp(fnam,FIPS58,24) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #58 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 59)
   { if (strncmp(fnam,FIPS59,22) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #59 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 60)
   { if (strncmp(fnam,FIPS60,19) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #60 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 61)
   { if (strncmp(fnam,FIPS61,20) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #61 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 62)
   { if (strncmp(fnam,FIPS62,22) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #62 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 63)
   { if (strncmp(fnam,FIPS63,17) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #63 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 64)
   { if (strncmp(fnam,FIPS64,26) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #60 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 65)
   { if (strncmp(fnam,FIPS65,23) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #65 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 66)
   { if (strncmp(fnam,FIPS66,13) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #66 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 67)
   { if (strncmp(fnam,FIPS67,19) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #67 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 68)
   { if (strncmp(fnam,FIPS68,20) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #68 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 69)
   { if (strncmp(fnam,FIPS69,25) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #69 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 70)
   { if (strncmp(fnam,FIPS70,26) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #70 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 71)
   { if (strncmp(fnam,FIPS71,12) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #71 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 72)
   { if (strncmp(fnam,FIPS72,12) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #72 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 73)
   { if (strncmp(fnam,FIPS73,24) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #73 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 74)
   { if (strncmp(fnam,FIPS74,23) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #74 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 75)
   { if (strncmp(fnam,FIPS75,23) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #75 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 76)
   { if (strncmp(fnam,FIPS76,18) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #76 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 77)
   { if (strncmp(fnam,FIPS77,21) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #77 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 78)
   { if (strncmp(fnam,FIPS78,27) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #78 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 79)
   { if (strncmp(fnam,FIPS79,19) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #79 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 80)
   { if (strncmp(fnam,FIPS80,17) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #80 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 81)
   { if (strncmp(fnam,FIPS81,16) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #80 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 82)
   { if (strncmp(fnam,FIPS82,22) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #82 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 83)
   { if (strncmp(fnam,FIPS83,18) != 0 || strncmp(clas,fl,4) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #83 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 84)
   { if (strncmp(fnam,FIPS84,14) != 0 || strncmp(clas,rd,3) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #84 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 85)
   { if (strncmp(fnam,FIPS85,14) != 0 || strncmp(clas,rd,3) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #85 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 86)
   { if (strncmp(fnam,FIPS86,20) != 0 || strncmp(clas,rd,3) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #86 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 87)
   { if (strncmp(fnam,FIPS87,10) != 0 || strncmp(clas,rd,3) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #87 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 88)
   { if (strncmp(fnam,FIPS88,10) != 0 || strncmp(clas,rd,3) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #88 incorrect\n");
         flag = 0;
         }
   }
   if (fid == 89)
   { if (strncmp(fnam,FIPS89,26) != 0 || strncmp(clas,rd,3) != 0)
         {
       printf("********** ERROR -- Reference to FIPS FEATURE #89 incorrect\n");
         flag = 0;
         }
   }
   if (fid < 1 || fid > 89)
   { printf("Incorrect value for FEATURE_ID\n");
     flag = 0;
   }

  i = i + 1;
  goto P100;

P102:
printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
printf ("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (SQLCODE != 100 || strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");
  if (i != 90)
     {
       printf("Incorrect number of rows returned!\n\n");
       flag = 0;
     }

printf("SELECT COUNT (*) INTO :co2\n");
printf("FROM FIPS_DOCUMENTATION.SQL_FEATURES\n");
printf("WHERE IS_VERIFIED = 'YES' AND\n");
printf("NOT IS_SUPPORTED = 'YES';\n");

EXEC SQL SELECT COUNT (*) INTO :co2
FROM FIPS_DOCUMENTATION.SQL_FEATURES
WHERE IS_VERIFIED = 'YES' AND
NOT IS_SUPPORTED = 'YES';

CHCKOK ();
printf("co2 should be 0; its value is %d\n\n", co2);

if (co2 != 0)
  flag = 0;

printf("CLOSE data802\n");
EXEC SQL CLOSE data802;
CHCKOK ();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts802.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7548','pass','PC');
       }
     else
       {
          printf("\n\n       yts802.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7548','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7548 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


/*  EMBEDDED C (file " XTS756.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS756.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  ALTER TABLE DROP COLUMN CASCADE                              */ 
/*                                                               */
/*  REFERENCES                                                   */
/*    11.10   -- <Alter table statement>                         */
/*    11.10   AR.1                                               */
/*    11.15   -- <Drop column definition>                        */
/*    11.15   SR.4                                               */
/*    11.15   GR.2                                               */ 
/*    11.37   -- <Revoke statement>                              */
/*    F#2     -- Basic Information Schema                        */
/*    F#25    -- Domain definition                               */
/*    F#38    -- Schema manipulation                             */
/*                                                               */ 
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 15/12/95                    */
/*         Print timestamp                                       */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*                                                               */
/*  QA STATUS : QA CHECK                                         */
/*                                                               */
/*  Revised by DWF 1996-02-20                                    */
/*    Fixed SQL syntax errors, keys on non-unique columns, etc.  */
/*    Fixed SDL transactions                                     */
/*    Matched up printout with statements                        */
/*    Upcased info schem identifiers                             */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
long coun;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long  flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts756.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run :  %s\n", ctime(&cal));

/******************** BEGIN TEST7056 ********************/
flag = 1;
printf("                   TEST7056\n");
printf("    ALTER TABLE DROP COLUMN CASCADE \n"); 
printf(" References:\n");
printf("    11.10   -- <Alter table statement>\n");
printf("    11.10   AR.1 \n");
printf("    11.15   -- <Drop column definition> \n");
printf("    11.15   SR.4 \n");
printf("    11.15   GR.2 \n");
printf("    11.37   -- <Revoke statement>       \n");
printf("    F#2     -- Basic Information Schema \n");
printf("    F#25    -- Domain definition        \n");
printf("    F#38    -- Schema manipulation \n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* create a domain under the current schema named */
/* CHARDOMAIN with VARCHAR <data type>            */
printf("CREATE DOMAIN CHARDOMAIN AS CHAR (15)\n");
printf("CONSTRAINT cons_strdom\n"); 
printf("CHECK (VALUE IN ('ATHENS','CORFU','RHODES'));\n");
EXEC SQL CREATE DOMAIN CHARDOMAIN AS CHAR (15)
         CONSTRAINT cons_strdom CHECK (VALUE IN ('ATHENS','CORFU','RHODES'));
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* access the DOMAINS view from the Information schema */
/* and check that there is a row identifying domain */
/* CHARDOMAIN */
coun = 0;
printf("SELECT COUNT(*) INTO :coun\n"); 
printf("FROM INFORMATION_SCHEMA.DOMAINS \n");
printf("WHERE DOMAIN_SCHEMA = 'CTS1' AND DOMAIN_NAME = 'CHARDOMAIN';\n");   
EXEC SQL SELECT COUNT(*) INTO :coun FROM INFORMATION_SCHEMA.DOMAINS
         WHERE DOMAIN_SCHEMA = 'CTS1' AND DOMAIN_NAME = 'CHARDOMAIN';
CHCKOK();
printf("coun should be 1; its value is %ld\n",coun);
if (coun != 1)
  flag = 0;
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* create two tables under the current schema */
/* create table TAB756a */
printf("CREATE TABLE TAB756a \n");
printf("(T756a_COL1  NUMERIC(3) PRIMARY KEY,\n");
printf(" DNAME      CHAR(15),\n");
printf(" LOC        CHARDOMAIN UNIQUE);\n");
EXEC SQL CREATE TABLE TAB756a
         (T756a_COL1  NUMERIC(3) PRIMARY KEY,
          DNAME      CHAR(15),
          LOC        CHARDOMAIN UNIQUE);
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* create the second table */
printf("CREATE TABLE TAB756b \n");
printf("(T756b_COL_1  NUMERIC(5)  PRIMARY KEY,\n");
printf("ENAME       CHAR(15) NOT NULL,\n");
printf("FOREIGN KEY(ENAME) REFERENCES TAB756a(LOC));\n");
EXEC SQL CREATE TABLE TAB756b
         (T756b_COL_1    NUMERIC(5) PRIMARY KEY,
          ENAME         CHAR(15) NOT NULL,
          FOREIGN KEY(ENAME) REFERENCES TAB756a(LOC));
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* now create two views under the current schema */
/* that reference in their <query expression> column LOC */
/* from the table CTS1.TAB756a */
/* create view V_756a */
printf("CREATE VIEW V_756a AS SELECT LOC,DNAME \n");
printf("FROM CTS1.TAB756a;\n");
EXEC SQL CREATE VIEW V_756a
         AS SELECT LOC,DNAME FROM CTS1.TAB756a;
CHCKOK(); 
printf("\n");
   
printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* create view V_756b */
printf("CREATE VIEW V_756b AS SELECT LOC,T756a_COL1 \n");
printf("FROM CTS1.TAB756a;\n");
EXEC SQL CREATE VIEW V_756b
         AS SELECT LOC,T756a_COL1 FROM CTS1.TAB756a;
CHCKOK(); 
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK(); 
printf("\n");

/* Now drop column LOC from the table CTS1.TAB756a */ 
printf("ALTER TABLE TAB756a DROP COLUMN LOC CASCADE;\n");
EXEC SQL ALTER TABLE TAB756a DROP COLUMN LOC CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* access the COLUMNS view and check that a row that */
/* identifies the column LOC is not present */
coun = 10;
printf("SELECT COUNT(*) INTO :coun\n"); 
printf("FROM INFORMATION_SCHEMA.COLUMNS \n");
printf("WHERE TABLE_SCHEMA = 'CTS1' AND TABLE_NAME = 'TAB756A'\n");
printf("AND COLUMN_NAME = 'LOC';\n");
EXEC SQL SELECT COUNT(*) INTO :coun FROM INFORMATION_SCHEMA.COLUMNS
         WHERE TABLE_SCHEMA = 'CTS1' AND TABLE_NAME = 'TAB756A'
         AND COLUMN_NAME = 'LOC';
CHCKOK();
printf("coun should be 0; its value is %ld\n",coun);
if (coun != 0)
  flag = 0;
printf("\n");
   
/* now access the VIEWS view twice and check that there */   
/* no rows present describing views V_756a & V_756b */
/* check for view V_756a**/
coun = 10;
printf("SELECT COUNT(*) INTO :coun FROM INFORMATION_SCHEMA.VIEWS\n");
printf("WHERE TABLE_SCHEMA = 'CTS1' AND TABLE_NAME = 'V_756A';\n");
EXEC SQL SELECT COUNT(*) INTO :coun FROM INFORMATION_SCHEMA.VIEWS
         WHERE TABLE_SCHEMA = 'CTS1' AND TABLE_NAME = 'V_756A';
CHCKOK();
printf("coun should be 0; its value is %ld\n",coun);
if (coun != 0)
  flag = 0;
printf("\n");

/* now check for view V_756b */ 
coun = 10;
printf("SELECT COUNT(*) INTO :coun FROM INFORMATION_SCHEMA.VIEWS\n");
printf("WHERE TABLE_SCHEMA = 'CTS1' AND TABLE_NAME = 'V_756B';\n");
EXEC SQL SELECT COUNT(*) INTO :coun FROM INFORMATION_SCHEMA.VIEWS
         WHERE TABLE_SCHEMA = 'CTS1' AND TABLE_NAME = 'V_756B';
CHCKOK();
printf("coun should be 0 its value is : %ld\n",coun);
if (coun != 0)
  flag = 0;
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* now restore the database in its original state by */ 
/* dropping both tables */
 
printf("DROP TABLE TAB756a CASCADE;\n");
EXEC SQL DROP TABLE TAB756a CASCADE;
CHCKOK();
printf("\n");
 
printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DROP TABLE TAB756b CASCADE;\n");
EXEC SQL DROP TABLE TAB756b CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DROP DOMAIN CHARDOMAIN CASCADE;\n");
EXEC SQL DROP DOMAIN CHARDOMAIN CASCADE; 
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

 /* record results */

     if ( flag == 1 )
       {
          printf("\n\n       xts756.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7056','pass','PC');
       }
     else
       {
          printf("\n\n       xts756.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7056','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7056 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

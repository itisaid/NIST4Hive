/*  EMBEDDED C (file " XTS731.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS731.PC                                                   */
/*  WRITTEN BY: Manolis Megaloikonomou                           */
/*                                                               */
/*  View name with 128 characters - delimited.                   */
/*                                                               */
/*  REFERENCES                                                   */
/*    11.19 -- <view definition>                                 */
/*    5.4   -- <Names and identifiers>                           */
/*    5.4   GR.1                                                 */
/*    5.2   -- <Token and separator>                             */
/*    5.2   SR.9                                                 */
/*    5.2   SR.13                                                */
/*    5.2   SR.14                                                */
/*    F#2   -- Basic information schema.                         */
/*    F#3   -- Basic schema manipulation.                        */
/*    F#39  -- Long identifiers.                                 */
/*                                                               */
/*  DATE LAST ALTERED  14/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 05/12/95                    */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*         Define cal variable                                   */
/*         Fix Syntax errors                                     */
/*         Add ROLLBACK after AUTHID                             */
/*         print timestamp                                       */
/*         delete multiple SQLCODE and SQLSTATE initialisation   */
/*         change string initialisation                          */
/*         Clean-up database at the end of the test              */
/*                                                               */
/*  QA STATUS :   FC                                             */
/*                                                               */
/* Revised by DWF 1996-02-05                                     */
/*    Fixed SDL transactions                                     */
/*    Removed trailing garbage                                   */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
    long aa;
    char bb[130];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
short int1;
/* date_time declaration */
time_t cal;
long  flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if(strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts731.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf( "\n Time Run:  %s\n", ctime(&cal));

/******************** BEGIN TEST7031 ********************/

flag = 1;
printf("                  TEST7031 \n");
printf("    View name with 128 characters - delimited.\n");
printf(" References:\n");
printf("    11.19 -- <view definition>\n");
printf("     5.4  -- <Names and identifiers >\n");
printf("     5.4  GR.1\n");
printf("     5.2  -- <Token and separator>\n");
printf("     5.2  SR.9\n");
printf("     5.2  SR.13\n");
printf("     5.2  SR.14\n");
printf("    F#2   -- Basic information schema.\n");
printf("    F#3   -- Basic schema manipulation.\n");
printf("    F#39  -- Long identifiers.\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

printf("Note:  This test will need some changes if your collating\n");
printf("sequence is not ASCII.\n\n");

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

/* Create views */
printf("CREATE VIEW \"LONGIDENTIFIERSAAAAABBBBBBBBBBCCCCCCCCCCDDDD\n");
printf("DDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJ\n");
printf("JJJJJJJJJKKKKKKKKKKAAAAAAAA\" AS SELECT * FROM STAFF;\n");
EXEC SQL CREATE VIEW "LONGIDENTIFIERSAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKAAAAAAAA" AS SELECT * FROM STAFF;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("CREATE VIEW \"longidentifiersaaaaabbbbbbbbbbccccccccccdddd\n");
printf("ddddddeeeeeeeeeeffffffffffgggggggggghhhhhhhhhhiiiiiiiiiij\n");
printf("jjjjjjjjjkkkkkkkkkkaaaaaaab\" AS SELECT * FROM WORKS;\n");
EXEC SQL CREATE VIEW "longidentifiersaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeffffffffffgggggggggghhhhhhhhhhiiiiiiiiiijjjjjjjjjjkkkkkkkkkkaaaaaaab" AS SELECT * FROM WORKS;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("CREATE VIEW \"0\"\"LONGIDENTIFIERSWWWAAAAAAAAAABBBBBBBBBBCCC\n");
printf("CCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHH\n");
printf("IIIIIIIIIIJJJJJJJJJJWWWWWW_1\" AS SELECT * FROM VTABLE;\n");
EXEC SQL CREATE VIEW "0""LONGIDENTIFIERSWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWWWWWW_1" AS SELECT * FROM VTABLE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("CREATE VIEW \"0\"\"LONGIDENTIFIERSWWWAAAAAAAAAABBBBBBBBBBCCC\n");
printf("CCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHH\n");
printf("IIIIIIIIIIJJJJJJJJJJWWWWWW_1\" AS SELECT * FROM STAFF_CTS;\n");
EXEC SQL CREATE VIEW "0""LONGIDENTIFIERSWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWWWWWW_2" AS SELECT * FROM STAFF_CTS;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("CREATE VIEW \"longIDENTIFIERSWWWWWAAAAAAAAAABBBBBBBBBBCCC\n");
printf("CCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHH\n");
printf("IIIIIIIIIIJJJJJJJJJJWW%% .,()\" AS SELECT CITY FROM STAFF;\n");
EXEC SQL CREATE VIEW "longIDENTIFIERSWWWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWW% .,()" AS SELECT CITY FROM STAFF;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DECLARE a CURSOR\n");
printf("FOR SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS\n");
printf("WHERE TABLE_SCHEMA = 'CTS1'\n");
printf(" AND (TABLE_NAME = 'LONGIDENTIFIERSAAAAABBBBBBBBBBCCCCCCCC\n");
printf("CCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJ\n");
printf("JJJJJJKKKKKKKKKKAAAAAAAA'\n");
printf("   OR TABLE_NAME = 'longidentifiersaaaaabbbbbbbbbbccccc\n");
printf("cccccddddddddddeeeeeeeeeeffffffffffgggggggggghhhhhhhhhhiiiiiiiiiij\n");
printf("jjjjjjjjjkkkkkkkkkkaaaaaaab'\n");
printf("   OR TABLE_NAME = '0\"LONGIDENTIFIERSWWWAAAAAAAAAABBBB\n");
printf("BBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHH\n");
printf("IIIIIIIIIIJJJJJJJJJJWWWWWW_1'\n");
printf("   OR TABLE_NAME = '0\"LONGIDENTIFIERSWWWAAAAAAAAAABBBB\n");
printf("BBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHH\n");
printf("IIIIIIIIIIJJJJJJJJJJWWWWWW_2'\n");
printf("   OR TABLE_NAME = 'longIDENTIFIERSWWWWWAAAAAAAAAABBBBB\n");
printf("BBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHI\n");
printf("IIIIIIIIIJJJJJJJJJJWW%% .,()' )\n");
printf("   ORDER BY TABLE_NAME;\n\n");

EXEC SQL DECLARE a CURSOR
          FOR SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS
               WHERE TABLE_SCHEMA = 'CTS1'
               AND (TABLE_NAME = 'LONGIDENTIFIERSAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKAAAAAAAA'
                 OR TABLE_NAME = 'longidentifiersaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeffffffffffgggggggggghhhhhhhhhhiiiiiiiiiijjjjjjjjjjkkkkkkkkkkaaaaaaab'
                 OR TABLE_NAME = '0"LONGIDENTIFIERSWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWWWWWW_1'
                 OR TABLE_NAME = '0"LONGIDENTIFIERSWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWWWWWW_2'
                 OR TABLE_NAME = 'longIDENTIFIERSWWWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWW% .,()' )
                 ORDER BY TABLE_NAME;

printf("OPEN a;\n");
EXEC SQL OPEN a;
CHCKOK();
printf("\n");

/* Initialise host variables */
strcpy(bb,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcat(bb,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcat(bb,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("FETCH a INTO :bb;\n");
EXEC SQL FETCH a INTO :bb;
CHCKOK();
printf("bb should be:\n");
printf("0\"LONGIDENTIFIERSWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEE\n");
printf("EEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWWWWWW_1\n");
printf("Its value is: \n");
for(int1 = 0; int1 < 64; int1++)
    printf("%c",bb[int1]);
printf("\n");
for(int1 = 64; int1 < 128; int1++)
    printf("%c",bb[int1]);
printf("\n");
if(strncmp(bb,"0\"LONGIDENTIFIERSWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWWWWWW_1",128) != 0)
   flag = 0;
printf("\n");

strcpy(bb,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcat(bb,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcat(bb,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("FETCH a INTO :bb;\n");
EXEC SQL FETCH a INTO :bb;
CHCKOK();
printf("bb should be:\n");
printf("0\"LONGIDENTIFIERSWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEE\n");
printf("EEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWWWWWW_2\n");
printf("Its value is: \n");
for(int1 = 0; int1 < 64; int1++)
    printf("%c",bb[int1]);
printf("\n");
for(int1 = 64; int1 < 128; int1++)
    printf("%c",bb[int1]);
printf("\n");
if(strncmp(bb,"0\"LONGIDENTIFIERSWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWWWWWW_2",128) != 0)
   flag = 0;
printf("\n");

strcpy(bb,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcat(bb,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcat(bb,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("FETCH a INTO :bb;\n");
EXEC SQL FETCH a INTO :bb;
CHCKOK();
printf("bb should be:\n");
printf("LONGIDENTIFIERSAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFF\n");
printf("FFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKAAAAAAAA\n");
printf("Its value is: \n");
for(int1 = 0; int1 < 64; int1++)
    printf("%c",bb[int1]);
printf("\n");
for(int1 = 64; int1 < 128; int1++)
    printf("%c",bb[int1]);
printf("\n");
if(strncmp(bb,"LONGIDENTIFIERSAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKAAAAAAAA",128) != 0)
   flag = 0;
printf("\n");

strcpy(bb,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcat(bb,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcat(bb,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("FETCH a INTO :bb;\n");
EXEC SQL FETCH a INTO :bb;
CHCKOK();
printf("bb should be:\n");
printf("longIDENTIFIERSWWWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEE\n");
printf("EEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWW%% .,()\n");
printf("Its value is: \n");
for(int1 = 0; int1 < 64; int1++)
    printf("%c",bb[int1]);
printf("\n");
for(int1 = 64; int1 < 128; int1++)
    printf("%c",bb[int1]);
printf("\n");
if(strncmp(bb,"longIDENTIFIERSWWWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWW% .,()",128) != 0)
   flag = 0;
printf("\n");

strcpy(bb,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcat(bb,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcat(bb,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("FETCH a INTO :bb;\n");
EXEC SQL FETCH a INTO :bb;
CHCKOK();
printf("bb should be:\n");
printf("longidentifiersaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeffff\n");
printf("ffffffgggggggggghhhhhhhhhhiiiiiiiiiijjjjjjjjjjkkkkkkkkkkaaaaaaab\n");
printf("Its value is: \n");
for(int1 = 0; int1 < 64; int1++)
    printf("%c",bb[int1]);
printf("\n");
for(int1 = 64; int1 < 128; int1++)
    printf("%c",bb[int1]);
printf("\n");
if(strncmp(bb,"longidentifiersaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeffffffffffgggggggggghhhhhhhhhhiiiiiiiiiijjjjjjjjjjkkkkkkkkkkaaaaaaab",128) != 0)
   flag = 0;
printf("\n");

printf("CLOSE a;\n");
EXEC SQL CLOSE a;
CHCKOK();
printf("\n");

aa=99;
printf("SELECT COUNT(*) INTO :aa FROM INFORMATION_SCHEMA.VIEWS\n");
printf("WHERE TABLE_SCHEMA = 'CTS1'\n");
printf("AND TABLE_NAME = 'LONGIDENTIFIERSAAAAABBBBBBBBBBCCCCCCCCCC\n");
printf("DDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIII\n");
printf("IIJJJJJJJJJJKKKKKKKKKKAAAAAAAa';\n");
EXEC SQL SELECT  COUNT(*) INTO :aa FROM INFORMATION_SCHEMA.VIEWS
         WHERE TABLE_SCHEMA = 'CTS1'
         AND TABLE_NAME = 'LONGIDENTIFIERSAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKAAAAAAAa';
CHCKOK();
printf("aa should be 0 ; its value is %ld\n", aa);
if( aa != 0 )
   flag = 0;
printf("\n");

aa=99;
printf("SELECT COUNT(*) INTO :aa FROM INFORMATION_SCHEMA.VIEWS\n");
printf("WHERE TABLE_SCHEMA = 'CTS1'\n");
printf("AND TABLE_NAME = 'longidentifiersaaaaabbbbbbbbbbcccccccccc\n");
printf("ddddddddddeeeeeeeeeeffffffffffgggggggggghhhhhhhhhhiiiiiiii\n");
printf("iijjjjjjjjjjkkkkkkkkkkaaaaaaaX';\n");
EXEC SQL SELECT  COUNT(*) INTO :aa FROM INFORMATION_SCHEMA.VIEWS
         WHERE TABLE_SCHEMA = 'CTS1'
         AND TABLE_NAME = 'longidentifiersaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeffffffffffgggggggggghhhhhhhhhhiiiiiiiiiijjjjjjjjjjkkkkkkkkkkaaaaaaaX';
CHCKOK();
printf("aa should be 0 ; its value is %ld\n", aa);
if( aa != 0 )
   flag = 0;
printf("\n");

aa=99;
printf("SELECT COUNT(*) INTO :aa FROM INFORMATION_SCHEMA.VIEWS\n");
printf("WHERE TABLE_SCHEMA = 'CTS1'\n");
printf("AND TABLE_NAME = '0\"LONGIDENTIFIERSWWWAAAAAAAAAABBBBBBBBBB\n");
printf("CCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHH\n");
printf("HHIIIIIIIIIIJJJJJJJJJJWWWWWW_3';\n");
EXEC SQL SELECT  COUNT(*) INTO :aa FROM INFORMATION_SCHEMA.VIEWS
           WHERE TABLE_SCHEMA = 'CTS1'
           AND TABLE_NAME = '0"LONGIDENTIFIERSWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWWWWWW_3';
CHCKOK();
printf("aa should be 0 ; its value is %ld\n", aa);
if( aa != 0)
   flag = 0;
printf("\n");

aa=99;
printf("SELECT COUNT(*) INTO :aa FROM INFORMATION_SCHEMA.VIEWS\n");
printf("WHERE TABLE_SCHEMA = 'CTS1'\n");
printf("AND TABLE_NAME = 'longIDENTIFIERSWWWWWAAAAAAAAAABBBBBBBBBB\n");
printf("CCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHH\n");
printf("HHIIIIIIIIIIJJJJJJJJJJWW%% .,((';\n");
EXEC SQL SELECT  COUNT(*) INTO :aa FROM INFORMATION_SCHEMA.VIEWS
           WHERE TABLE_SCHEMA = 'CTS1'
           AND TABLE_NAME = 'longIDENTIFIERSWWWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWW% .,((';
CHCKOK();
printf("aa should be 0 ; its value is %ld\n", aa);
if( aa != 0)
   flag = 0;
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* Clean-up database */
printf("DROP VIEW \"LONGIDENTIFIERSAAAAABBBBBBBBBBCCCCCCCCCC\n");
printf("DDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHI\n");
printf("IIIIIIIIIJJJJJJJJJJKKKKKKKKKKAAAAAAAA\" CASCADE;\n");
EXEC SQL DROP VIEW "LONGIDENTIFIERSAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKAAAAAAAA" CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DROP VIEW \"longidentifiersaaaaabbbbbbbbbbcccccccccc\n");
printf("ddddddddddeeeeeeeeeeffffffffffgggggggggghhhhhhhhhhi\n");
printf("iiiiiiiiijjjjjjjjjjkkkkkkkkkkaaaaaaab\" CASCADE;\n");
EXEC SQL DROP VIEW "longidentifiersaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeffffffffffgggggggggghhhhhhhhhhiiiiiiiiiijjjjjjjjjjkkkkkkkkkkaaaaaaab" CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DROP VIEW \"0\"\"LONGIDENTIFIERSWWWAAAAAAAAAABBBBBBBBBB\n");
printf("CCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGH\n");
printf("HHHHHHHHHIIIIIIIIIIJJJJJJJJJJWWWWWW_1\" CASCADE;\n");
EXEC SQL DROP VIEW "0""LONGIDENTIFIERSWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWWWWWW_1" CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DROP VIEW \"0\"\"LONGIDENTIFIERSWWWAAAAAAAAAABBBBBBBBBB\n");
printf("CCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGH\n");
printf("HHHHHHHHHIIIIIIIIIIJJJJJJJJJJWWWWWW_2\" CASCADE;\n");
EXEC SQL DROP VIEW "0""LONGIDENTIFIERSWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWWWWWW_2" CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DROP VIEW \"longIDENTIFIERSWWWWWAAAAAAAAAABBBBBBBBBB\n");
printf("CCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGH\n");
printf("HHHHHHHHHIIIIIIIIIIJJJJJJJJJJWW%% .,()\" CASCADE;\n");
EXEC SQL DROP VIEW "longIDENTIFIERSWWWWWAAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJWW% .,()" CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* now record results */

     if( flag == 1 )
       {
          printf("\n\n       xts731.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7031','pass','PC');
       }
     else
       {
          printf("\n\n       xts731.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7031','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;

/******************** END TEST7031 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

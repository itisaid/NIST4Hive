/*  EMBEDDED C (file " XTS701.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS701.PC                                                   */
/*  WRITTEN  BY: Manolis Megaloikonomou                          */
/*  REVIEWED BY: Nickos  Backalidis                              */
/*                                                               */
/*  This programs tests                                          */
/*  a).  compound character literal in <comparison predicate>    */
/*  b).  compound character literal as inserted value            */
/*  c).  compound character literal in a <select list>           */
/*                                                               */
/*---------------------------------------------------------------*/
/*                          TEST7004                             */
/*                                                               */
/*               Compound char. literal in <comparison predicate>*/
/*           References:                                         */
/*               5.3 FT.4                                        */
/*               5.3 SR.1                                        */
/*               5.3 SR.4                                        */
/*               5.3 GR.1                                        */
/*               8.2 GR.1                                        */
/*               8.2 GR.3                                        */
/*               8.2 GR.7                                        */
/*               5.3 LR.2.d                                      */
/*               6.5 FT.1  --COUNT set function                  */
/*               6.5 SR.2                                        */
/*               F#27   Compound character literals              */
/*---------------------------------------------------------------*/
/*                          TEST7005                             */
/*                                                               */
/*              Compound character literal as inserted value     */
/*           References:                                         */
/*               5.3 SR.1                                        */
/*               5.3 SR.4                                        */
/*               5.3 GR.1                                        */
/*               5.3 LR.2.d                                      */
/*               13.8 FT.1 <insert statement>                    */
/*               7.2 FT.1  <table value constructor>             */
/*               7.1 FT.3  <row value constructor element>       */
/*               6.11 FT.1 <value expression>                    */
/*               F#27      Compound character literals           */
/*                                                               */
/*---------------------------------------------------------------*/
/*                             TEST7006                          */
/*              Compound character literal in a <select list>    */
/*           References:                                         */
/*               5.3 SR.1                                        */
/*               5.3 SR.4                                        */
/*               5.3 GR.1                                        */
/*               5.3 LR.2.d                                      */
/*               7.9 FT.1  <query specification>                 */
/*               6.11 FT.1 <value expression>                    */
/*               F#27   Compound character literal               */
/*                                                               */
/*---------------------------------------------------------------*/
/*                                                               */
/*  DATE LAST ALTERED  15/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 01/12/95:                   */
/*      Initialization of the ALPNUM string                      */
/*                                                               */
/*  QA Status: QA check                                          */
/*                                                               */
/* Repaired by DWF 1/18/96                                       */
/*    Fixed checks for wrong SQLCODE                             */
/*    Fixed references to non-existent rows                      */
/*    Fixed wrong initializations                                */
/*    Fixed wrong declarations                                   */
/*    Removed extraneous code and variables                      */
/*    Moved initializations                                      */
/*    Output formatting                                          */
/*    Removed checks of invalid results                          */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 long    COUN;
 long    num;
 long    num1;
 char   CCL1[216]; 
 char   CCL2[210]; 
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
short total;
char part1[41];
char part2[49];
char part3[41];
char part4[23];
char part6[22];
char part7[41];
char part8[25];
char part9[41];
char part10[41];
char part11[28];
char str1[89];
char str2[63];
char str3[62];
char str4[65];
char str5[108];
char str6[18];
int errcnt;
long i;
/* date_time declaration */
int  flag;    
time_t cal;

main()
{

strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;

if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts701.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time run:  %s\n", ctime(&cal));

/* Set up long strings for comparison statements */

strcpy(part1,"This is the first fragment of a compound");
strcpy(part2," character literal, and this is the second part.");
strcpy(part3,"This is a compound character literal, in");
strcpy(part4," the second table row.");
strcpy(part6," the third table row.");
strcpy(part7,"First fragment of a compound character l");
strcpy(part8,"iteral, and second part.");
strcpy(part9,"This is the first fragment of a compound");
strcpy(part10," character literal, this is the second, ");
strcpy(part11,"and this is the third part.");

strcpy(str1,part1);
/* please hand translate strcat */
strcat(str1,part2);

strcpy(str2,part3);
strcat(str2,part4);

strcpy(str3,part3);
strcat(str3,part6);

strcpy(str4,part7);
strcat(str4,part8);

strcpy(str5,part9);
strcat(str5,part10);
strcat(str5,part11);

strcpy(str6,"Compound literal.");

/******************** BEGIN TEST7004 ********************/

flag = 1;
printf("                  TEST7004 \n");
printf("    Compound char. literal in <comparison predicate>\n");
printf("References:\n");
printf("    5.3 FT.4\n");
printf("    5.3 SR.1\n");
printf("    5.3 SR.4\n");
printf("    5.3 GR.1\n");
printf("    8.2 GR.1\n");
printf("    8.2 GR.3\n");
printf("    8.2 GR.7\n");
printf("    5.3 LR.2.d\n");
printf("    6.5 FT.1  --COUNT set function\n");
printf("    6.5 SR.2\n");
printf("    F#27   Compound character literals\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

/* Insert compound literals into table T4 */
printf("INSERT INTO T4 \n");
printf("VALUES('This is the first compound character ");
printf("literal.',1,NULL,NULL);\n");
EXEC SQL INSERT INTO T4
         VALUES('This is the first compound character literal.',1,NULL,NULL);
CHCKOK();
printf("\n");

printf("INSERT INTO T4 \n");
printf("VALUES('Second character literal.',2,NULL,NULL);\n");
EXEC SQL INSERT INTO T4
         VALUES('Second character literal.',2,NULL,NULL);
CHCKOK();
printf("\n");

printf("INSERT INTO T4 \n");
printf("VALUES('Third character literal.',3,NULL,NULL);\n");
EXEC SQL INSERT INTO T4
         VALUES('Third character literal.',3,NULL,NULL);
CHCKOK();
printf("\n");

/* Attempt to return row that is not in table */
printf("SELECT NUM6 INTO :num FROM T4\n");
printf("WHERE  STR110 = 'This is the compound '\n");
printf("'character literal.';\n");
EXEC SQL SELECT NUM6
         INTO   :num
         FROM   T4
         WHERE  STR110 = 'This is the compound '
         'character literal.';
/* check for no data condition 02000 */
/* That should generate a no data condition which is SQLSTATE 02000 */
printf("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;
printf("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp(NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp(NORMSQ, "02000", 5) == 0 && strncmp(NORMSQ, SQLSTATE, 5) != 0)
  printf("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

/* check second and third rows inserted correctly */
COUN = 0;    
printf("SELECT COUNT(*) INTO :COUN FROM T4\n");
printf("WHERE  STR110 <> 'This is the first compound '\n");
printf("'character literal.';\n");
EXEC SQL SELECT COUNT(*)
         INTO   :COUN
         FROM   T4
         WHERE  STR110 <> 'This is the first compound '
         'character literal.';
CHCKOK();
printf("Coun should be 2; its value is %ld\n",COUN);
if (COUN != 2)
      flag = 0;
printf("\n");

num = 0;    
printf("SELECT NUM6 INTO :num FROM T4 WHERE  NUM6 = 2\n");
printf("AND STR110 <= 'Second character '--Comments here\n");
printf("'literal.';\n");
EXEC SQL SELECT NUM6
         INTO   :num
         FROM   T4
         WHERE  NUM6 = 2 AND STR110 <= 'Second character '--Comments here
         'literal.';
CHCKOK();
printf("num should be 2; its value is %ld\n",num);
if (num != 2)
   flag = 0;
printf("\n");

/* attempt to return values from row which does not exist*/
printf("SELECT NUM6 INTO :num FROM T4\n");
printf("WHERE STR110 = 'Third character literal.'--Comments here\n");
printf("'second fragment'\n");
printf("'third fragment.';\n");
EXEC SQL SELECT NUM6
         INTO   :num
         FROM   T4
         WHERE  STR110 = 'Third character literal.'--Comments here
         'second fragment'
         'third fragment.';
/* That should generate a no data condition */
/* which is SQLSTATE 02000 */
printf("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;
printf("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp(NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp(NORMSQ, "02000", 5) == 0 && strncmp(NORMSQ, SQLSTATE, 5) != 0)
  printf("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

printf("SELECT NUM6 INTO :num FROM T4 WHERE  STR110 = 'First fragment'\n");
printf("'another fragment'--Comments\n");
printf("'Second character literal.'--Comments here\n");
printf("'fourth fragment.';\n");
EXEC SQL SELECT NUM6
         INTO   :num
         FROM   T4
         WHERE  STR110 = 'First fragment'
         'another fragment'--Comments    
         'Second character literal.'--Comments here
         'fourth fragment.';
/* That should generate a no data condition */
/* which is SQLSTATE 02000 */
printf("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;
printf("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp(NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp(NORMSQ, "02000", 5) == 0 && strncmp(NORMSQ, SQLSTATE, 5) != 0)
  printf("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

num = 0;    
printf("SELECT NUM6 INTO :num FROM T4 WHERE  STR110 <= 'Second '\n");
printf("'chara'--Comments\n");
printf("'cter liter'--Comments here\n");
printf("'al.'\n");
printf("'     ';\n");
EXEC SQL SELECT NUM6
         INTO   :num
         FROM   T4
         WHERE  STR110 <= 'Second '    
         'chara'--Comments    
         'cter liter'--Comments here
         'al.'
         '     ';
CHCKOK();
printf("num should be 2; its value is %ld\n",num);
if (num != 2)
   flag = 0;
printf("\n");

num1 = 99;
num = 99;

printf("SELECT COUNT(*) INTO :num FROM T4 WHERE STR110 <\n");
printf("'An indifferent'--Comments\n");
printf("' charac'\n");
printf("'ter literal.';\n");
EXEC SQL SELECT COUNT(*)
         INTO   :num
         FROM   T4
         WHERE  STR110 < 'An indifferent'--Comments
         ' charac'    
         'ter literal.';
CHCKOK();
printf("\n");

printf("SELECT COUNT(*) INTO :num1 FROM T4 WHERE STR110 >=\n");
printf("'An indifferent'--Comments\n");
printf("' charac'\n");
printf("'ter literal.';\n");
EXEC SQL SELECT COUNT(*)
         INTO   :num1
         FROM   T4
         WHERE  STR110 >= 'An indifferent'--Comments
         ' charac'     
         'ter literal.';
CHCKOK();
printf("\n");
total = num + num1;
printf("num + num1 should be 3, ");
printf("their values are: num = %ld, num1 = %ld\n\n", num, num1);
if (total != 3)
      flag = 0;

num = 0;    
printf("SELECT NUM6 INTO :num FROM T4 WHERE STR110 = 'Second '\n");
printf("'chara'--Comments\n");
printf("'cter liter'--Comments here\n");
printf("'al.'\n");
printf("'     '--Comments\n");
printf("'      ';\n");
EXEC SQL SELECT NUM6
         INTO   :num
         FROM   T4
         WHERE  STR110 = 'Second '    
         'chara'--Comments    
         'cter liter'--Comments here
         'al.'
         '     '--Comments
         '      ';
CHCKOK();
if (num != 2)
  flag = 0;
printf("num should be 2; its value is %ld\n", num);
printf("\n");

printf("SELECT NUM6 INTO :num FROM T4\n");
printf("WHERE NUM6 = 2 AND STR110 < 'Second '\n");
printf("'chara'--Comments\n");
printf("'cter literal.';\n");
EXEC SQL SELECT NUM6
         INTO   :num
         FROM   T4
         WHERE  NUM6 = 2 AND STR110 < 'Second '    
         'chara'--Comments    
         'cter literal.';

/* That should generate a no data condition */
/* which is SQLSTATE 02000 */
printf("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;
printf("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp(NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp(NORMSQ, "02000", 5) == 0 && strncmp(NORMSQ, SQLSTATE, 5) != 0)
  printf("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       xts701.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7004','pass','PC');
       }
     else
       {
          printf("\n\n       xts701.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7004','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;

/******************** END TEST7004 *********************/
/******************** BEGIN TEST7005 ********************/

flag = 1;
printf("                  TEST7005 \n");
printf("    Compound character literal as inserted value\n");
printf(" References:\n");
printf("    5.3 SR.1\n");
printf("    5.3 SR.4\n");
printf("    5.3 GR.1\n");
printf("    5.3 LR.2.d\n");
printf("    13.8 FT.1 <insert statement>\n");
printf("    7.2 FT.1  <table value constructor>\n");
printf("    7.1 FT.3  <row value constructor element>\n");
printf("    6.11 FT.1 <value expression>\n");
printf("    F#27   Compound character literals\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

printf("INSERT INTO T4 \n");
printf("VALUES('This is the first fragment of a compound\n");
printf("character literal,' --Comments\n");
printf("' and this is the second part.',11,NULL,'Compound '  \n");
printf("   \n");
printf("  --Comments   \n");
printf("       \n");
printf("  'literal.');\n");
EXEC SQL INSERT INTO T4
VALUES('This is the first fragment of a compound character literal,' --Comments
       ' and this is the second part.',11,NULL,'Compound '  
          
          --Comments   
                 
       'literal.');       
CHCKOK();
printf("\n");

printf("INSERT INTO T4 \n");
printf("VALUES('This is a comp'\n");
printf("'ound character literal,'\n");
printf("' in the second table row.',12,NULL,NULL);\n");
EXEC SQL INSERT INTO T4
         VALUES('This is a comp'
         'ound character literal,'       
         ' in the second table row.',12,NULL,NULL);
CHCKOK();
printf("\n");

printf("INSERT INTO T4 \n");
printf("VALUES('This is '\n");
printf("('a comp'      \n");
printf(" 'ound '\n");
printf(" 'char'\n");
printf(" 'acter lit' -- Comments\n");
printf(" 'eral, '\n");
printf(" -- Comments\n");
printf("  \n");
printf(" 'in the th'\n");
printf(" 'ird '\n");
printf(" 'table '\n");
printf(" 'row.',13,NULL,NULL);\n");
EXEC SQL INSERT INTO T4
         VALUES('This is '
         'a comp'      
         'ound '
         'char'
         'acter lit' -- Comments
         'eral, ' 
         -- Comments        
           
         'in the th'
         'ird '
         'table '
         'row.',13,NULL,NULL);
CHCKOK();
printf("\n");

strcpy(CCL1, "xxxxxxxxxxxxxx");
strcpy(CCL2, "xxxxxxxxxxxxxx");

printf("SELECT STR110, COL4 INTO :CCL1, :CCL2 FROM T4 WHERE NUM6 = 11;\n");
EXEC SQL SELECT STR110, COL4 INTO :CCL1, :CCL2 FROM T4 WHERE NUM6 = 11;
CHCKOK();
printf ("CCL1 should be %s; its value is %s\n", str1, CCL1);
printf ("CCL2 should be %s; its value is %s\n", str6, CCL2);
if (strncmp(CCL1, str1, 88) != 0 || strncmp(CCL2, str6, 17) != 0)
   flag = 0;
printf("\n");

strcpy(CCL1, "xxxxxxxxxxxxxx");
printf("SELECT STR110 INTO :CCL1 FROM T4 WHERE NUM6 = 12;\n");
EXEC SQL SELECT STR110 INTO :CCL1 FROM T4 WHERE  NUM6 = 12;
CHCKOK();
if (strncmp(CCL1, str2, 62) != 0)
  flag = 0;
printf ("CCL1 should be %s; its value is %s\n", str2, CCL1);
printf("\n");

strcpy(CCL1, "xxxxxxxxxxxxxx");
printf("SELECT STR110 INTO :CCL1 FROM T4 WHERE NUM6 = 13;\n");
EXEC SQL SELECT STR110
         INTO   :CCL1
         FROM   T4
         WHERE  NUM6 = 13;
CHCKOK();
printf ("CCL1 should be %s; its value is %s\n", str3, CCL1);
if (strncmp(CCL1, str3, 61) != 0)
  flag = 0;
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       xts701.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7005','pass','PC');
       }
     else
       {
          printf("\n\n       xts701.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7005','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;

/******************** END TEST7005 *********************/
/******************** BEGIN TEST7006 ********************/

flag = 1;
printf("                  TEST7006 \n");
printf("    Compound character literal in a <select list>\n");
printf(" References:\n");
printf("    5.3 SR.1\n");
printf("    5.3 SR.4\n");
printf("    5.3 GR.1\n");
printf("    5.3 LR.2.d\n");
printf("    7.9 FT.1  <query specification>\n");
printf("    6.11 FT.1 <value expression>\n");
printf("    F#27   Compound character literal\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");
strcpy(CCL1, "xxxxxxxxxxxxxx");
strcpy(CCL2, "xxxxxxxxxxxxxx");

/* Select list contains only literals and is independent of table contents */
printf("SELECT 'First fragment of a compound character literal, '\n");
printf(" --Comment1\n");
printf("\n");
printf("\n");
printf("    --Comment2\n");
printf("     'and second part.',\n");
printf("'This is the first fragment of a compound character literal,'--...\n");
printf(" ' this is the second,'\n");
printf("\n");
printf("\n");
printf(" ' and this is the third part.'\n");
printf(" INTO :CCL1, :CCL2 FROM CTS1.ECCO;\n");
EXEC SQL SELECT 'First fragment of a compound character literal, '
     --Comment1   
     
     
     --Comment2
     'and second part.',
'This is the first fragment of a compound character literal,'--...
     ' this is the second,'
     

     ' and this is the third part.'
              INTO   :CCL1, :CCL2
              FROM   CTS1.ECCO;
CHCKOK();
printf ("CCL1 should be %s; its value is %s\n", str4, CCL1);
printf ("CCL2 should be %s; its value is %s\n", str5, CCL2);
if (strncmp(CCL1, str4, 64) != 0)
   flag = 0;
if (strncmp(CCL2, str5, 107) != 0)
   flag = 0;
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       xts701.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7006','pass','PC');
       }
     else
       {
          printf("\n\n       xts701.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7006','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;


/******************** END TEST7006 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

/*  EMBEDDED C (file "XOP707.PC")  */

/*   Copyright 1994, 1995 X/Open Company Limited  */

/* All rights reserved.                                          */
/*                                                               */
/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */

/*   X/Open and the 'X' symbol are registered trademarks of X/Open Company  */
/*   Limited in the UK and other countries.                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1994/10/20 EMBEDDED C LANGUAGE                          */
/*  X/Open SQL VALIDATION TEST SUITE V6.0                        */
/*                                                               */
/*  XOP707.PC                                                    */
/*  WRITTEN BY: Phil Brown                                       */
/*                                                               */
/*     THIS ROUTINE CHECKS THAT ANY LIMIT ON THE DEPTH OF NESTED */
/*  SUB-QUERIES IN A STATEMENT IS NOT LESS THAN NINE(9)          */
/*                                                               */
/*  REFERENCES                                                   */
/*        X/Open CAE SQL                                         */
/*        Section 7.1.2 f. Additional Limits                     */
/*                                                               */
/*  DATE PROGRAM LAST CHANGED   01/11/94                         */
/*                                                               */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
     char     EMPNO1[4];
     char     EMPNA1[21];
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
extern int AUTHID();

char ALPNUM[37];
char NORMSQ[6];
long norm1;
long norm2;
long errflg;
int errcnt;
/* date_time declaration */
time_t cal;
     long    i;
     long    ii;


NOSUBCLASS()
{
/* This routine replaces valid implementation defined    */
/* subclasses with 000. This replacement equates valid   */
/* implementation-defined subclasses with the 000 value  */
/* expected by the test case; otherwise the test will    */
/* fail. After calling NOSUBCLASS, NORMSQ will be tested */
/*                              SQLSTATE will be printed */

strcpy (NORMSQ, SQLSTATE);

norm1 = 2;
/* subclass begins in position 3 of char array NORMSQ    */
for (norm2 = 13; norm2 < 37; norm2++)
/* valid subclasses begin with 5/9, I-Z, end of ALPNUM table */
    {
    if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
    }

if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
   goto P213;
/* Quit if NORMSQ is unchanged. Subclass is not impl.def */
/* Changed NORMSQ means implementation-defined subclass, */
/* so proceed to zero it out, if valid (0-9, A-Z)        */

norm1 = 3;
/* examining position 4 of char array NORMSQ             */
for (norm2 = 0; norm2 < 37; norm2++)
/* valid characters are 0-9 A-Z                          */
   {
   if (NORMSQ[norm1] == ALPNUM[norm2])
       NORMSQ[norm1] = '0';
   }

norm1 = 4;
/* examining position 5 of char array NORMSQ             */
for (norm2 = 0; norm2 < 37; norm2++)
/* valid characters are 0-9 A-z */
   {
   if (NORMSQ[norm1] == ALPNUM[norm2])
       NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01). These equate to successful completion */
/* SQLSTATE values of 00000. */
/* reference SQL-92. 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
    NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion */

CHCKOK ()
{
   printf ("SQLCODE should be '0'; its value is %ld\n", SQLCODE);
   SQLSTATE[5] = '\0';
   printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

   NOSUBCLASS();

   if (strncmp (NORMSQ, "00000", 5)  == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
      printf ("Valid implementation defined SQLSTATE accepted.\n");
}


main()
{

strcpy(uid,"XOPEN1");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM XOPEN1.ECCO;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("X/OPEN Extensions SQL Test Suite, V6.0, Embedded C, xop707.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

strcpy(ALPNUM, "01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

/******************** BEGIN TEST0707 ********************/
 
printf("          TEST0707 \n");
printf("X/O,Limit on depth of nested sub-queries \n");
printf("X/OPEN CAE SQL Sec. 7.1.2f\n");
printf("     - - - - - - - - - - - - - - - - - - -\n");
printf("### SELECT EMPNUM, EMPNAME INTO :EMPNO1, :EMPNA1\n");
printf("###   FROM STAFF\n"); 
printf("###   WHERE EMPNUM NOT IN (SELECT EMPNUM FROM WORKS\n");
printf("###   WHERE PNUM IN (SELECT PNUM  FROM PROJ\n");
printf("###   WHERE PTYPE IN (SELECT PTYPE  FROM PROJ\n");
printf("###   WHERE PNUM <> 'P5' AND PNUM\n");
printf("###   IN (SELECT PNUM  FROM WORKS \n");
printf("###   WHERE EMPNUM <> 'E1'\n");
printf("###   AND EMPNUM IN (SELECT EMPNUM  FROM WORKS\n"); 
printf("###   WHERE PNUM IN (SELECT PNUM FROM PROJ\n");
printf("###   WHERE PTYPE = (SELECT DISTINCT PTYPE FROM PROJ\n");
printf("###   WHERE CITY = (SELECT DISTINCT CITY  FROM STAFF S8\n");
printf("###   WHERE EXISTS (SELECT EMPNUM  FROM WORKS W9\n");
printf("###   WHERE W9.HOURS < 20 AND S8.EMPNUM = W9.EMPNUM\n");
printf("###   )))))))));\n");
printf("====================================================\n\n");

errflg = 0;
strcpy(SQLSTATE,"*****");
SQLCODE = 9999999;
strcpy(EMPNO1,"ZZZ");
strcpy(EMPNA1,"Nobody78901234567890");

EXEC SQL SELECT EMPNUM, EMPNAME 
     INTO :EMPNO1, :EMPNA1
     FROM STAFF 
     WHERE EMPNUM NOT IN 
       (SELECT EMPNUM FROM WORKS 
        WHERE PNUM IN
          (SELECT PNUM  FROM PROJ 
           WHERE PTYPE IN 
             (SELECT PTYPE  FROM PROJ 
              WHERE PNUM <> 'P5' AND PNUM IN 
                (SELECT PNUM  FROM WORKS 
                 WHERE EMPNUM <> 'E1' AND EMPNUM IN 
                   (SELECT EMPNUM  FROM WORKS 
                    WHERE PNUM IN 
                      (SELECT PNUM FROM PROJ 
                       WHERE PTYPE =
                         (SELECT DISTINCT PTYPE FROM PROJ
                          WHERE CITY =
                            (SELECT DISTINCT CITY  FROM STAFF S8
                             WHERE EXISTS
                               (SELECT EMPNUM  FROM WORKS W9
                                WHERE W9.HOURS < 20 
                                AND S8.EMPNUM = W9.EMPNUM
                                 )))))))));

CHCKOK();
      if (strncmp (NORMSQ,"00000",5) != 0 && SQLCODE != 0)
         errflg = 1;

      printf("EMPNO expected E5, returned %s \n", EMPNO1);
      printf("EMPNAME expected Ed, returned %s \n", EMPNA1);

if (strncmp(EMPNO1, "E5 ",3)!=0 ||
                  strncmp(EMPNA1, "Ed                  ",20)!=0)
     errflg=1;

printf("\nNumber of errors detected = %ld \n",errflg);
printf("### maximum number of errors is 1 ###\n");

if (errflg==0)
     {
       EXEC SQL INSERT INTO XOPEN1.TESTREPORT
          VALUES('0707','pass','PC');
       printf("\n     xop707.pc  *** pass *** \n");
     }
else
     {
       EXEC SQL INSERT INTO XOPEN1.TESTREPORT
          VALUES('0707','fail','PC');
       printf("\n     xop707.pc  *** fail *** \n");
          errcnt = errcnt + 1;
     }

printf("====================================================\n\n");

EXEC SQL COMMIT WORK;


/******************** END TEST0707 ********************/

  exit(errcnt);
}


/*  EMBEDDED C (file " XTS714.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS714.PC                                                   */
/*  WRITTEN  BY: Manolis Megaloikonomou                          */
/*  REVIEWED BY: Nickos  Backalidis                              */
/*                                                               */
/*  Schema definition named schema, implicit auth-id.            */
/*                                                               */
/*  REFERENCES                                                   */
/*    11.1    -- <schema definition>                             */
/*    11.1 SR.2                                                  */
/*    11.1 SR.3                                                  */
/*    11.1 AR.1                                                  */
/*    11.1 GR.3                                                  */
/*    12.5 -- <SQL procedure statement>                          */
/*    12.5 LR.2a --Entry SQL restriction                         */
/*         "An <SQL procedure statement> shall not be            */
/*         an <SQL schema definition statement> (Raised)"        */
/*    F#1  -- Dynamic SQL                                        */
/*    F#31 -- Schema definition statement.                       */
/*                                                               */
/*  DATE LAST ALTERED  12/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 01/12/95:                   */
/*       Correct value checking in tables                        */
/*                                                               */
/*  QA Status: QA CHECK                                          */
/*                                                               */
/* Revised by DWF 1/22/96                                        */
/*   Fixed SQL syntax errors                                     */
/*   Fixed truncation                                            */
/*   Fixed SDL transactions                                      */
/*   Removed bogus status checks                                 */
/*   Added whitespace subtest                                    */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

 void
    NOSUBCLASS();
 void
   CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 char bb[4];
 long aa;
 char longst[241];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
strcpy(uid,"CTS2              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts714.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
 time(&cal);
 printf("\n Time run:  %s\n", ctime(&cal));

/******************** BEGIN TEST7014 ********************/

flag = 1;

     printf("                  TEST7014 \n");
     printf("    Schema definition named schema, implicit auth-id.\n");
     printf("References:\n");
     printf("    11.1   -- <schema definition>\n");
     printf("    11.1  SR.2\n");
     printf("    11.1  SR.3\n");
     printf("    11.1  AR.1\n");
     printf("    11.1  GR.3\n");
     printf("    12.5  -- <SQL procedure statement>\n");
     printf("    LR.2a --Entry SQL restriction\n");
     printf("            \"An <SQL procedure statement> shall not be\n");
     printf("            an <SQL schema definition statement> (Raised)\"\n");
     printf("    F#1   -- Dynamic SQL.\n");
     printf("    F#31  -- Schema definition statement.\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Initialise error reporting variables */
     SQLCODE = -1;
     strcpy(SQLSTATE, "xxxxx");

/* Create schema with one table definition */
printf("CREATE SCHEMA T2831C\n");
printf("\n");
printf("CREATE TABLE TESTAB2831\n");
printf("\n");
printf("     (TNUM NUMERIC(5),\n");
printf("\n");
printf("      TCHAR CHAR(3));\n");
EXEC SQL CREATE SCHEMA T2831C

         CREATE TABLE TESTAB2831

           (TNUM NUMERIC(5),

            TCHAR CHAR(3));
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* Insert 5 rows into the table */
printf("INSERT INTO T2831C.TESTAB2831\n");
printf("VALUES(1,'AA');\n");
EXEC SQL INSERT INTO T2831C.TESTAB2831
         VALUES(1,'AA');
CHCKOK();
printf("\n");
printf("INSERT INTO T2831C.TESTAB2831\n");
printf("VALUES(2,'BB');\n");
EXEC SQL INSERT INTO T2831C.TESTAB2831
         VALUES(2,'BB');
CHCKOK();
printf("\n");
printf("INSERT INTO T2831C.TESTAB2831\n");
printf("VALUES(3,'CC');\n");
EXEC SQL INSERT INTO T2831C.TESTAB2831
         VALUES(3,'CC');
CHCKOK();
printf("\n");
printf("INSERT INTO T2831C.TESTAB2831\n");
printf("VALUES(4,'DD');\n");
EXEC SQL INSERT INTO T2831C.TESTAB2831
         VALUES(4,'DD');
CHCKOK();
printf("\n");
printf("INSERT INTO T2831C.TESTAB2831\n");
printf("VALUES(5,'EE');\n");
EXEC SQL INSERT INTO T2831C.TESTAB2831
         VALUES(5,'EE');
CHCKOK();
printf("\n");

/* Declare cursor to check the values in the table */
printf("DECLARE ALPHA CURSOR\n");
printf("FOR SELECT * FROM T2831C.TESTAB2831 ORDER BY TNUM;\n\n");
EXEC SQL DECLARE ALPHA CURSOR
         FOR SELECT * FROM T2831C.TESTAB2831 ORDER BY TNUM;

printf("OPEN ALPHA;\n");
EXEC SQL OPEN ALPHA;
CHCKOK();
printf("\n");

/* init host variables and check 1st value */
aa = 0;
strcpy(bb,"xxx");
printf("FETCH ALPHA INTO :aa, :bb ;\n");
EXEC SQL FETCH ALPHA INTO :aa, :bb ;
CHCKOK();
printf("aa should be 1;  its value is %ld\n",aa);
printf("bb should be AA; its value is %s\n",bb);
if (aa != 1 && strncmp(bb,"AA", 2) != 0)
   flag = 0;
printf("\n");

/* init host variables and check 2nd value */
aa = 0;
strcpy(bb,"xxx");
printf("FETCH ALPHA INTO :aa , :bb ;\n");
EXEC SQL FETCH ALPHA INTO :aa , :bb ;
CHCKOK();
printf("aa should be 2;  its value is %ld\n",aa);
printf("bb should be BB; its value is %s\n",bb);
if (aa != 2 && strncmp(bb,"BB", 2) != 0)
   flag = 0;
printf("\n");

/* init host variables and check 3rd value */
aa = 0;
strcpy(bb,"xxx");
printf("FETCH ALPHA INTO :aa, :bb ;\n");
EXEC SQL FETCH ALPHA INTO :aa ,:bb ;
CHCKOK();
printf("aa should be 3;  its value is %ld\n",aa);
printf("bb should be CC; its value is %s\n",bb);
if (aa != 3 && strncmp(bb,"CC", 2) != 0)
   flag = 0;
printf("\n");

/* init host variables and check 4th value */
aa = 0;
strcpy(bb,"xxx");
printf("FETCH ALPHA INTO :aa , :bb ;\n");
EXEC SQL FETCH ALPHA INTO :aa , :bb ;
CHCKOK();
printf("aa should be 4;  its value is %ld\n",aa);
printf("bb should be DD; its value is %s\n",bb);
if (aa != 4 && strncmp(bb,"DD", 2) != 0)
   flag = 0;
printf("\n");

/* init host variables and check 5th value */
aa = 0;
strcpy(bb,"xxx");
printf("FETCH ALPHA INTO :aa , :bb ;\n");
EXEC SQL FETCH ALPHA INTO :aa , :bb ;
CHCKOK();
printf("aa should be 5;  its value is %ld\n",aa);
printf("bb should be EE; its value is %s\n",bb);
if (aa != 5 && strncmp(bb,"EE", 2) != 0)
   flag = 0;
printf("\n");

printf("CLOSE ALPHA;\n");
EXEC SQL CLOSE ALPHA;
CHCKOK();
printf("\n");

     EXEC SQL DELETE FROM CTS1.CONCATBUF;
     EXEC SQL INSERT INTO CTS1.CONCATBUF VALUES (
       'CREATE SCHEMA DT2831C' ||
       '  CREATE TABLE DTESTAB2831 (TNUM NUMERIC(5),' ||
       '  TCHAR CHAR(3))'
     );
     EXEC SQL SELECT ZZ INTO :longst FROM CTS1.CONCATBUF;
     printf("longst=\"%s\"\n", longst);

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* Execute Immediate from the host variable */
printf("EXECUTE IMMEDIATE :longst;\n");
EXEC SQL EXECUTE IMMEDIATE :longst;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* Populate table with copy of rows from the other new table */
/* in order to check correct creation of the table       */
printf("Populate table with copy of rows from other new table\n");
printf("INSERT INTO DT2831C.DTESTAB2831\n");
printf("SELECT * FROM T2831C.TESTAB2831;\n");
EXEC SQL INSERT INTO DT2831C.DTESTAB2831
         SELECT * FROM T2831C.TESTAB2831;
CHCKOK();
printf("\n");

/* Check contents in table */
aa = 0;
printf("SELECT COUNT(*) INTO :aa FROM DT2831C.DTESTAB2831;\n");
EXEC SQL SELECT COUNT(*) INTO :aa FROM DT2831C.DTESTAB2831;
CHCKOK();
printf("aa should be 5; its value is %ld\n",aa);
if (aa != 5)
   flag = 0;
printf("\n");

/* Init host vars and check the 1st value using SELECT */
aa = 0;
strcpy(bb,"xxx");
printf("SELECT DT2831C.DTESTAB2831.TNUM, DT2831C.DTESTAB2831.TCHAR\n");
printf("INTO :aa , :bb FROM DT2831C.DTESTAB2831\n");
printf("WHERE DT2831C.DTESTAB2831.TNUM = 1;\n");
EXEC SQL SELECT DT2831C.DTESTAB2831.TNUM,
         DT2831C.DTESTAB2831.TCHAR
         INTO :aa , :bb FROM DT2831C.DTESTAB2831
         WHERE DT2831C.DTESTAB2831.TNUM = 1;
CHCKOK();
printf("aa should be 1;  its value is %ld\n",aa);
printf("bb should be AA; its value is %s\n",bb);
if ( aa != 1 && strncmp(bb, "AA", 2) != 0)
   flag = 0;
printf("\n");

/* Use a cursor to check the rest of the values in the table */
printf("DECLARE BETA CURSOR\n");
printf("FOR SELECT * FROM DT2831C.DTESTAB2831\n");
printf("WHERE TNUM <> 1 ORDER BY TNUM;\n\n");
EXEC SQL DECLARE BETA CURSOR
         FOR SELECT * FROM DT2831C.DTESTAB2831
         WHERE TNUM <> 1 ORDER BY TNUM;

printf("OPEN BETA;\n");
EXEC SQL OPEN BETA;
CHCKOK();
printf("\n");

/* init host variables and check 2nd value */
aa = 0;
strcpy(bb,"xxx");
printf("FETCH BETA INTO :aa , :bb ;\n");
EXEC SQL FETCH BETA INTO :aa , :bb ;
CHCKOK();
printf("aa should be 2;  its value is %ld\n",aa);
printf("bb should be BB; its value is %s\n",bb);
if (aa != 2 && strncmp(bb, "BB", 2) != 0)
   flag = 0;
printf("\n");

/* init host variables and check 3rd value */
aa = 0;
strcpy(bb,"xxx");
printf("FETCH BETA INTO :aa , :bb ;\n");
EXEC SQL FETCH BETA INTO :aa , :bb ;
CHCKOK();
printf("aa should be 3;  its value is %ld\n",aa);
printf("bb should be CC; its value is %s\n",bb);
if ( aa != 3 && strncmp(bb, "CC", 2) != 0)
   flag = 0;
printf("\n");

/* init host variables and check 4th value */
aa = 0;
strcpy(bb,"XXX");
printf("FETCH BETA INTO :aa , :bb ;\n");
EXEC SQL FETCH BETA INTO :aa , :bb ;
CHCKOK();
printf("aa should be 4;  its value is %ld\n",aa);
printf("bb should be DD; its value is %s\n",bb);
if ( aa != 4 && strncmp(bb, "DD", 2) != 0)
   flag = 0;
printf("\n");

/* init host variables and check 5th value */
aa = 0;
strcpy(bb,"XXX");
printf("FETCH BETA INTO :aa , :bb ;\n");
EXEC SQL FETCH BETA INTO :aa , :bb ;
CHCKOK();
printf("aa should be 5;  its value is %ld\n",aa);
printf("bb should be EE; its value is %s\n",bb);
if ( aa != 5 && strncmp(bb, "EE", 2) != 0)
   flag = 0;
printf("\n");

printf("CLOSE BETA;\n");
EXEC SQL CLOSE BETA;
CHCKOK();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* now clean up database */

printf("DROP SCHEMA T2831C CASCADE;\n");
EXEC SQL DROP SCHEMA T2831C CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DROP SCHEMA DT2831C CASCADE;\n");
EXEC SQL DROP SCHEMA DT2831C CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

 /* record results */
     if ( flag == 1 )
       {
          printf("\n\n       xts714.pc  *** pass *** \n");
            EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7014','pass','PC');
       }
     else
       {
          printf("\n\n       xts714.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7014','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

EXEC SQL COMMIT WORK;

/******************** END TEST7014 *********************/

       exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

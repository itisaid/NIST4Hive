/*  EMBEDDED C (file " XTS738.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS738.PC                       TEST7038                    */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  Scrolled cursor with ORDER BY DESC, FETCH PRIOR              */ 
/*                                                               */
/*  REFERENCES                                                   */
/*    13.1 -- <Declare cursor>                                   */
/*    13.1 GR.3                                                  */
/*    13.3 -- <fetch statement>                                  */
/*    13.3 GR.2c                                                 */
/*    13.3 GR.3c                                                 */
/*    F#43 --  Scrolled cursors                                  */
/*    F#24 --  Keyword relaxations                               */
/*                                                               */
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 07/12/95                    */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*         print timestamp                                       */
/*                                                               */
/*  QA STATUS : FC                                               */
/*                                                               */
/*  Revised by DWF 1996-02-08                                    */
/*    Removed status checks after cursor declarations            */
/*    Fixed checks for wrong SQLCODE                             */
/*    Removed field widths in printfs                            */
/*    Fixed char string lengths                                  */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 char henum[4];
 char hename[21];
 long hgrade;
 char hcity[16];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if(strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts738.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf(" \n Time Run :  %s \n ", ctime(&cal));

/******************** BEGIN TEST7038 ********************/
flag = 1;
printf("                 TEST7038\n");
printf("    Scrolled cursor with ORDER BY DESC, FETCH PRIOR \n"); 
printf("References  \n");
printf("    13.1 -- <Declare cursor>      \n");
printf("    13.1 GR.3 \n");
printf("    13.3    -- <fetch statement> \n");                              
printf("    13.3 GR.2c   \n");
printf("    13.3 GR.3c   \n");
printf("    F#43    --  Scrolled cursors\n");
printf("    F#24    --  Keyword relaxations \n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n"); 

/* initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

/* USE table CTS1.STAFF from the standrard schema */
/* declare a scrolled cursor with ORDER BY DESC   */
/* with a numeric data type as sort key           */
 
printf("DECLARE b SCROLL CURSOR \n");
printf("FOR SELECT EMPNUM, EMPNAME, GRADE, CITY\n");
printf("FROM STAFF ORDER BY GRADE DESC, EMPNAME;\n\n");
EXEC SQL DECLARE b SCROLL CURSOR
         FOR SELECT EMPNUM,EMPNAME,GRADE,CITY
         FROM STAFF ORDER BY GRADE DESC, EMPNAME;
    
printf("OPEN b;\n");
EXEC SQL OPEN b;
CHCKOK(); 
printf("\n");

/* start fetching rows in the cursor 5 in total */
/* in reverse order from LAST first to FIRST with PRIOR */

/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxx");

/* fetch last row from STAFF */
printf("FETCH LAST FROM b INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH LAST FROM b INTO :henum,:hename,:hgrade,:hcity;
CHCKOK();
printf("hemum  should be     E2; its value is %s\n",henum);
printf("hename should be  Betty; its value is %s\n",hename);
printf("hgrade should be     10; its value is %ld\n",hgrade);
printf("hcity  should be Vienna; its value is %s\n",hcity);
if(strncmp(henum,"E2",2) !=0 || hgrade!=10) 
   flag = 0;
if(strncmp(hcity,"Vienna",6) !=0 || strncmp(hename,"Betty",5)!=0)
   flag = 0;
printf("\n");

/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxxx");

/* fetch previous row */
printf("FETCH PRIOR FROM b INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH PRIOR FROM b INTO :henum,:hename,:hgrade,:hcity;
CHCKOK();
printf("hemum  should be     E4; its value is %s\n",henum);
printf("hename should be    Don; its value is %s\n",hename);
printf("hgrade should be     12; its value is %ld\n",hgrade);
printf("hcity  should be  Deale; its value is %s\n",hcity);
if(strncmp(henum,"E4",2) !=0 || hgrade!=12) 
   flag = 0;
if(strncmp(hcity,"Deale",5) !=0 || strncmp(hename,"Don",3)!=0)
   flag = 0;
printf("\n");
 
/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxxx");

 /* fetch previous row */
printf("FETCH PRIOR FROM b INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH PRIOR FROM b INTO :henum,:hename,:hgrade,:hcity;
CHCKOK();
printf("hemum  should be     E1; its value is %s\n",henum);
printf("hename should be  Alice; its value is %s\n",hename);
printf("hgrade should be     12; its value is %ld\n",hgrade);
printf("hcity  should be  Deale; its value is %s\n",hcity);
if(strncmp(henum,"E1",2) !=0 || hgrade!=12)
   flag = 0;
if(strncmp(hcity,"Deale",5) !=0 || strncmp(hename,"Alice",5)!=0)
   flag = 0;
printf("\n");

/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxxx");

/* fetch previous row */
printf("FETCH PRIOR FROM b INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH PRIOR FROM b INTO :henum,:hename,:hgrade,:hcity;
CHCKOK();
printf("hemum  should be     E5; its value is %s\n",henum);
printf("hename should be     Ed; its value is %s\n",hename);
printf("hgrade should be     13; its value is %ld\n",hgrade);
printf("hcity  should be  Akron; its value is %s\n",hcity);
if(strncmp(henum,"E5",2) !=0 || hgrade!=13) 
   flag = 0;
if(strncmp(hcity,"Akron",5) !=0 || strncmp(hename,"Ed",2)!=0)
   flag = 0;
printf("\n");
 
/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxxx");

/* fetch previous row actually the first row of STAFF */
printf("FETCH PRIOR FROM b INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH PRIOR FROM b INTO :henum,:hename,:hgrade,:hcity;
CHCKOK();
printf("hemum  should be     E3; its value is %s\n",henum);
printf("hename should be Carmen; its value is %s\n",hename);
printf("hgrade should be     13; its value is %ld\n",hgrade);
printf("hcity  should be Vienna; its value is %s\n",hcity);
if(strncmp(henum,"E3",2) !=0 || hgrade!=13) 
   flag = 0;
if(strncmp(hcity,"Vienna",6) != 0 || strncmp(hename,"Carmen",6) !=0)
   flag = 0;
printf("\n");

/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxxx");

/*** attempt to read the row before the first row */
/*** and check that a completion condition of no data */
/*** will be raised indicated by SQLSTATE = "02000" */
printf("FETCH PRIOR FROM b INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH PRIOR FROM b INTO :henum,:hename,:hgrade,:hcity;
printf("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;
printf("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp(NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp(NORMSQ, "02000", 5) == 0 && strncmp(NORMSQ, SQLSTATE, 5) != 0)
  printf("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

printf("CLOSE b;\n");
EXEC SQL CLOSE b;
CHCKOK();
printf("\n");

/* USE table CTS1.STAFF from the standard schema   */
/* declare a scrolled cursor with ORDER BY DESC    */
/* with a character data type as sort key          */
/* and read it in reverse order from last to first */
printf("DECLARE a SCROLL CURSOR \n");
printf("FOR SELECT EMPNUM, EMPNAME, GRADE, CITY\n");
printf("FROM STAFF ORDER BY EMPNAME DESC;\n\n");
EXEC SQL DECLARE a SCROLL CURSOR
         FOR SELECT EMPNUM,EMPNAME,GRADE,CITY
         FROM STAFF ORDER BY EMPNAME DESC;

printf("OPEN a;\n");
EXEC SQL OPEN a;  
CHCKOK(); 
printf("\n");

/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxxx");

/* start fetching rows in the cursor 5 in total */
/* in reverse order fetch last row from STAFF   */
printf("FETCH LAST FROM a INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH LAST FROM a INTO :henum,:hename,:hgrade,:hcity;
CHCKOK();
printf("hemum  should be     E1; its value is %s\n",henum);
printf("hename should be  Alice; its value is %s\n",hename);
printf("hgrade should be     12; its value is %ld\n",hgrade);
printf("hcity  should be  Deale; its value is %s\n",hcity);
if(strncmp(henum,"E1",2) !=0 || hgrade!=12) 
   flag = 0;
if(strncmp(hcity,"Deale",5) !=0 || strncmp(hename,"Alice",5)!=0)
   flag = 0;
printf("\n");

/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxxx");

/* fetch previous row */       
printf("FETCH PRIOR FROM a INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH PRIOR FROM a INTO :henum,:hename,:hgrade,:hcity;
CHCKOK();
printf("hemum  should be     E2; its value is %s\n",henum);
printf("hename should be  Betty; its value is %s\n",hename);
printf("hgrade should be     10; its value is %ld\n",hgrade);
printf("hcity  should be Vienna; its value is %s\n",hcity);
if(strncmp(henum,"E2",2) !=0 || hgrade!=10) 
   flag = 0;
if(strncmp(hcity,"Vienna",6) !=0 || strncmp(hename,"Betty",5)!=0)
   flag = 0;
printf("\n");
 
/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxxx");

/* fetch previous  row */
printf("FETCH PRIOR FROM a INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH PRIOR FROM a INTO :henum,:hename,:hgrade,:hcity;
CHCKOK();
printf("hemum  should be     E3; its value is %s\n",henum);
printf("hename should be Carmen; its value is %s\n",hename);
printf("hgrade should be     13; its value is %ld\n",hgrade);
printf("hcity  should be Vienna; its value is %s\n",hcity);
if(strncmp(henum,"E3",2) != 0 || hgrade != 13) 
   flag = 0;
if(strncmp(hcity,"Vienna",6) != 0 || strncmp(hename,"Carmen",6) != 0)
   flag = 0;
printf("\n");

/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxxx");

/* fetch previous row */
printf("FETCH PRIOR FROM a INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH PRIOR FROM a INTO :henum,:hename,:hgrade,:hcity;
CHCKOK();
printf("hemum  should be     E4; its value is %s\n",henum);
printf("hename should be    Don; its value is %s\n",hename);
printf("hgrade should be     12; its value is %ld\n",hgrade);
printf("hcity  should be  Deale; its value is %s\n",hcity);
if(strncmp(henum,"E4",2) !=0 || hgrade!=12) 
   flag = 0;
if(strncmp(hcity,"Deale",5) !=0 || strncmp(hename,"Don",3)!=0)
   flag = 0;
printf("\n");
 
/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxxx");

/* fetch previous row */
printf("FETCH PRIOR FROM a INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH PRIOR FROM a INTO :henum,:hename,:hgrade,:hcity;
CHCKOK();
printf("hemum  should be     E5; its value is %s\n",henum);
printf("hename should be     Ed; its value is %s\n",hename);
printf("hgrade should be     13; its value is %ld\n",hgrade);
printf("hcity  should be  Akron; its value is %s\n",hcity);
if(strncmp(henum,"E5",2) !=0 || hgrade!=13) 
   flag = 0;
if(strncmp(hcity,"Akron",5) != 0 || strncmp(hename,"Ed",2) !=0)
   flag = 0;
printf("\n");

/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxxx");

/*** attempt to read the row before the first row */
/*** and check that a completion condition of no data */
/*** will be raised indicated by SQLSTATE = "02000" */
printf("FETCH PRIOR FROM a INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH PRIOR FROM a INTO :henum,:hename,:hgrade,:hcity;
printf("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;
printf("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp(NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp(NORMSQ, "02000", 5) == 0 && strncmp(NORMSQ, SQLSTATE, 5) != 0)
  printf("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

printf("CLOSE a;\n");
EXEC SQL CLOSE a;
CHCKOK();
printf("\n");

/*** declare a third cursor and check that all the rows */
/*** of table CTS1.STAFF have remained unaffected  ***/
printf("DECLARE c CURSOR FOR SELECT EMPNUM,EMPNAME,GRADE,CITY \n");
printf("FROM STAFF ORDER BY EMPNUM;\n\n");
EXEC SQL DECLARE c CURSOR
         FOR SELECT EMPNUM,EMPNAME,GRADE,CITY
         FROM STAFF ORDER BY EMPNUM;

printf("OPEN c;\n");
EXEC SQL OPEN c;
CHCKOK(); 
printf("\n");

/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxxx");

/* start fetching rows in the cursor 5 in total */
/* fetch first row from STAFF */
printf("FETCH c INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH c INTO :henum,:hename,:hgrade,:hcity;
CHCKOK();
printf("hemum  should be     E1; its value is %s\n",henum);
printf("hename should be  Alice; its value is %s\n",hename);
printf("hgrade should be     12; its value is %ld\n",hgrade);
printf("hcity  should be  Deale; its value is %s\n",hcity);
if(strncmp(henum,"E1",2) !=0 || hgrade!=12) 
   flag = 0;
if(strncmp(hcity,"Deale",5) != 0 || strncmp(hename,"Alice",5) !=0)
   flag = 0;
printf("\n");

/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxxx");

/* fetch second row */
printf("FETCH c INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH c INTO :henum,:hename,:hgrade,:hcity;
CHCKOK();
printf("hemum  should be     E2; its value is %s\n",henum);
printf("hename should be  Betty; its value is %s\n",hename);
printf("hgrade should be     13; its value is %ld\n",hgrade);
printf("hcity  should be Vienna; its value is %s\n",hcity);
if(strncmp(henum,"E2",2) !=0 || hgrade!=10) 
   flag = 0;
if(strncmp(hcity,"Vienna",6) !=0 || strncmp(hename,"Betty",5)!=0)
   flag = 0;
printf("\n");
 
/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxxx");

/* fetch third row */
printf("FETCH c INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH c INTO :henum,:hename,:hgrade,:hcity;
CHCKOK();
printf("hemum  should be     E3; its value is %s\n",henum);
printf("hename should be Carmen; its value is %s\n",hename);
printf("hgrade should be     13; its value is %ld\n",hgrade);
printf("hcity  should be Vienna; its value is %s\n",hcity);
if(strncmp(henum,"E3",2) !=0 || hgrade!=13) 
   flag = 0;
if(strncmp(hcity,"Vienna",6) !=0 || strncmp(hename,"Carmen",6)!=0)
   flag = 0;
printf("\n");

/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxxx");

/* fetch fourth row */
printf("FETCH c INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH c INTO :henum,:hename,:hgrade,:hcity;
CHCKOK();
printf("hemum  should be     E4; its value is %s\n",henum);
printf("hename should be    Don; its value is %s\n",hename);
printf("hgrade should be     12; its value is %ld\n",hgrade);
printf("hcity  should be  Deale; its value is %s\n",hcity);
if(strncmp(henum,"E4",2) !=0 || hgrade!=12) 
   flag = 0;
if(strncmp(hcity,"Deale",5) !=0 || strncmp(hename,"Don",3)!=0)
   flag = 0;
printf("\n");

/* initialise host variables */
strcpy(henum,"xxx");
strcpy(hename,"xxxxxxxxxxxxxxxxxxxx");
hgrade = 0;
strcpy(hcity,"xxxxxxxxxxxxxxx");

/* fetch fifth row */
printf("FETCH c INTO :henum,:hename,:hgrade,:hcity;\n"); 
EXEC SQL FETCH c INTO :henum,:hename,:hgrade,:hcity;
CHCKOK();
printf("hemum  should be     E5; its value is %s\n",henum);
printf("hename should be     Ed; its value is %s\n",hename);
printf("hgrade should be     13; its value is %ld\n",hgrade);
printf("hcity  should be  Akron; its value is %s\n",hcity);
if(strncmp(henum,"E5",2) !=0 || hgrade!=13) 
   flag = 0;
if(strncmp(hcity,"Akron",5) !=0 || strncmp(hename,"Ed",2)!=0)
   flag = 0;
printf("\n");

printf("CLOSE c;\n");
EXEC SQL CLOSE c;
CHCKOK();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

 /* Now record results of the tests */ 

  if( flag == 1 )
       {
          printf("\n\n       xts738.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7038','pass','PC');
       }
     else
       {
          printf("\n\n       xts738.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7038','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;

/******************** END TEST7038 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

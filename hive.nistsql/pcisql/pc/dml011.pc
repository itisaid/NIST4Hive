/*  EMBEDDED C (file "DML011.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1987/08/21 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  DML011.PC                                                    */
/*  WRITTEN BY: HU YANPING                                       */
/*                                                               */
/*    THIS ROUTINE TESTS THE UPDATE STATEMENT IN THE LANGUAGE OF */
/*  SQL.  THE FORMAT:                                            */
/*                UPDATE <table name>                            */
/*                SET  <set clause:searched>[{,<set clause>}...] */
/*                [WHERE <search condition>]                     */
/*                                                               */
/*  REFERENCES                                                   */
/*        AMERICAN NATIONAL STANDARD database language - SQL     */
/*                          X3.135-1989                          */
/*                                                               */
/*                   SECTION 8.7  <insert statement>             */
/*                   SECTION 8.10 <select statement>             */
/*                   SECTION 8.12 <update statement: searched>   */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
          long i;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long SQLCODE;
int errcnt;
/* date_time declaration */
time_t cal;
          long ii;


main()
{
      strcpy(uid,"HU");
      AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
if (strncmp(uid,uidx,2) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, dml011.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));


/******************** BEGIN TEST0033 ********************/

     printf("\n                   TEST0033             \n");
     printf("           update statement: searched     \n");
     printf("reference X3.135-1987 section 8.12 General Rules 1)\n");
     printf("     - - - - - - - - - - - - - - - - - - - -\n\n");

/*  EXEC SQL CREATE VIEW TEMP_SS(EMPNUM,GRADE,CITY)        */
/*           AS SELECT EMPNUM,GRADE,CITY                   */
/*              FROM   STAFF                               */
/*              WHERE  GRADE > 12                          */
/*           WITH CHECK OPTION;                            */

     EXEC SQL UPDATE TEMP_SS
           SET    GRADE=15;

     ii = SQLCODE;

     EXEC SQL SELECT COUNT(*)
           INTO   :i
           FROM TEMP_SS
           WHERE  GRADE=15;

     printf("     ii=%ld, i=%ld \n\n",ii,i);
     printf("The answer should be ii = 0 & i = 2.");

     EXEC SQL ROLLBACK WORK;

     if (i == 2 && ii == 0)
       {
       printf("\n\n                *** pass *** \n");
       EXEC SQL INSERT INTO TESTREPORT
       VALUES('0033','pass','PC');
       }
     else
       {
       printf("\n\n       dml011.pc  *** fail *** \n");
       EXEC SQL INSERT INTO TESTREPORT
       VALUES('0033','fail','PC');
          errcnt = errcnt + 1;
       }

     EXEC SQL COMMIT WORK;

     printf("===================================================");

     printf("\n\n\n\n");

/******************** END TEST0033 ********************/

/******************** BEGIN TEST0034 ********************/

     printf("\n                   TEST0034             \n");
     printf("           update statement: searched     \n");
     printf("reference X3.135-1987 section 8.12 General Rules 2)\n");
     printf("     - - - - - - - - - - - - - - - - - - - -\n\n");

     i = 0;
     ii = 0;

     EXEC SQL UPDATE STAFF
           SET    GRADE=2*GRADE
           WHERE  GRADE=13;

     ii = SQLCODE;

     EXEC SQL SELECT COUNT(*)
           INTO   :i
           FROM   STAFF
           WHERE  GRADE=26;

     printf("     ii=%ld, i=%ld \n\n",ii,i);
     printf("The answer should be ii = 0 & i = 2.");

     EXEC SQL ROLLBACK WORK;

     if (i == 2 && ii == 0)
       {
       printf("\n\n              *** pass *** \n");
       EXEC SQL INSERT INTO TESTREPORT
     VALUES('0034','pass','PC');
       }
     else
       {
       printf("\n\n    dml011.pc  *** fail *** \n");
       EXEC SQL INSERT INTO TESTREPORT
       VALUES('0034','fail','PC');
          errcnt = errcnt + 1;
       }

     EXEC SQL COMMIT WORK;

     printf("===================================================");

     printf("\n\n\n\n");

/******************** END TEST0034 ********************/

/******************** BEGIN TEST0035 ********************/

     printf("\n                    TEST0035             \n");
     printf("           update statement: searched     \n");
     printf("reference X3.135-1987 section 8.12 General Rules 2)\n");
     printf("     - - - - - - - - - - - - - - - - - - - -\n\n");

     EXEC SQL UPDATE STAFF
           SET    GRADE=10*STAFF.GRADE
           WHERE  STAFF.EMPNUM NOT IN
               (SELECT WORKS.EMPNUM
                FROM   WORKS
                WHERE  STAFF.EMPNUM = WORKS.EMPNUM);

     ii = SQLCODE;

     EXEC SQL SELECT COUNT(*)
           INTO   :i
           FROM   STAFF
           WHERE  GRADE=130;

     printf("     ii=%ld, i=%ld \n\n",ii,i);
     printf("The answer should be ii = 0 & i = 1.");

     EXEC SQL ROLLBACK WORK;

     if (i == 1 && ii == 0)
       {
       printf("\n\n                  *** pass *** \n");
       EXEC SQL INSERT INTO TESTREPORT
       VALUES('0035','pass','PC');
       }
     else
       {
       printf("\n\n        dml011.pc  *** fail *** \n");
       EXEC SQL INSERT INTO TESTREPORT
       VALUES('0035','fail','PC');
          errcnt = errcnt + 1;
       }

     EXEC SQL COMMIT WORK;
     printf("====================================================");

     printf("\n\n\n\n");

/******************** END TEST0035 ********************/

/******************** BEGIN TEST0036 ********************/

     printf("\n                    TEST0036             \n");
     printf("           update statement: searched     \n");
     printf("reference X3.135-1987 section 8.12 General Rules 4)\n");
     printf("     - - - - - - - - - - - - - - - - - - - -\n\n");
     
     EXEC SQL UPDATE TEMP_SS
           SET    GRADE=11;

     printf("             sqlcode=%ld \n",SQLCODE);
     printf("\nThe answer should be sqlcode < 0.");
     if (SQLCODE < 0)
       {
       printf("\n\n                 *** pass *** \n");
       EXEC SQL INSERT INTO TESTREPORT
     VALUES('0036','pass','PC');
       }
     else
       {
       EXEC SQL ROLLBACK WORK;
       printf("\n\n       dml011.pc  *** fail *** \n");
       EXEC SQL INSERT INTO TESTREPORT
     VALUES('0036','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("====================================================");

     printf("\n\n\n\n");

     EXEC SQL COMMIT WORK;

/******************** END TEST0036 ********************/

     exit(errcnt);
}


/*  EMBEDDED C (file "YTS783.PC")  */

/* Copyright 1996 National Computing Centre Limited, */
/* and Computer Logic R&D S.A */
/* on behalf of the CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS783.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  Scr.Cursor,no ORDER,FETCH all,FIRST,LAST,NEXT                */ 
/*  This program is to determine the behaviour of a declared     */
/*  cursor when SCROLL is specified but ORDER BY or FOR UPDATE   */
/*  are not                                                      */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    13.1   <declare cursor>                                    */
/*    13.3   <fetch statement>                                   */
/*    13.3   GR3a                                                */
/*    13.3   GR3b                                                */
/*    F#43   Scrolled cursors                                    */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-19                                    */
/*    Added rollback after authid                                */
/*    Fixed authid compare                                       */
/*    Fixed pass criteria                                        */
/*    Cleaned up                                                 */
/*    Fixed statements not equal to printout                     */
/*    Fixed syntax errors                                        */
/*    Removed EXEC SQL from printf                               */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
long eno1;
long eno2;
long eno3;
long eno4;
long eno5;
long fst;
long nxt1;
long nxt2;
long nxt3;
long lst;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
short i;  
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts783.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7512 ********************/
flag = 1;

     printf("                  TEST7512 \n");
     printf("   Scr.cursor,no ORDER,FETCH all,FIRST,LAST,NEXT\n");
     printf("References:\n");
     printf("    13.1   <declare cursor>\n");
     printf("    13.3   <fetch statement>\n");
     printf("    13.3   GR3a\n");
     printf("    13.3   GR3b\n");
     printf("    F#43   Scrolled cursors\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* initialise variables */

eno1 = -1;
eno2 = -1;
eno3 = -1;
eno4 = -1;
eno5 = -1;
fst = -1;
nxt1 = -1;
nxt2 = -1;
nxt3 = -1;
lst = -1;

/* declare cursor to retrieve empno */

printf("DECLARE data1 SCROLL CURSOR\n");
printf("FOR SELECT empno FROM employees2\n");
printf("WHERE empno < 5;\n\n");
EXEC SQL DECLARE data1 SCROLL CURSOR 
FOR SELECT empno FROM employees2
WHERE empno < 5;

printf("OPEN data1;\n");
EXEC SQL OPEN data1;
CHCKOK ();
printf("\n");

/* FETCH the four rows defined by the cursor */

printf("FETCH data1 INTO :eno1;\n");
EXEC SQL FETCH data1 INTO :eno1;
CHCKOK ();
printf("The first no returned is %ld\n\n", eno1);

/* fetch second row defined by the cursor */

printf("FETCH NEXT FROM data1 INTO :eno2\n");
EXEC SQL FETCH NEXT FROM data1 INTO :eno2;
CHCKOK ();
printf("The second number returned is %ld\n\n", eno2);

/* fetch third row defined by cursor */

printf("FETCH NEXT FROM data1 INTO :eno3;\n");
EXEC SQL FETCH NEXT FROM data1 INTO :eno3;
CHCKOK ();
printf("The third number returned is %ld\n\n", eno3);

/* fetch fourth row */

printf("FETCH NEXT FROM data1 INTO  :eno4;\n");
EXEC SQL FETCH NEXT FROM data1 INTO  :eno4;
CHCKOK ();
printf("The fourth number returned is %ld\n\n", eno4);

/* add extra fetch and check completion condition no data */
/* which is SQLSTATE 02000                                */

printf("add extra fetch and check completion no data;\n");
printf("FETCH NEXT FROM data1 INTO :eno5;\n");
EXEC SQL FETCH NEXT FROM data1 INTO :eno5;

/* That should generate a completion condition no data */
/* which is SQLSTATE 02000 */

printf("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;

printf("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

/* fetch last row defined by cursor */

printf("FETCH LAST FROM data1 INTO :lst;\n");
EXEC SQL FETCH LAST FROM data1 INTO :lst;
CHCKOK ();
printf("lst should be %ld; its value is %ld\n\n", eno4, lst);
if (lst != eno4)
   flag = 0;

/* FETCH first row defined by cursor */

printf("FETCH FIRST FROM data1 INTO  :fst;\n");
EXEC SQL FETCH FIRST FROM data1 INTO  :fst;
CHCKOK ();
printf("fst should be %ld; its value is %ld\n\n", eno1, fst);
if (fst != eno1)
   flag = 0;

/* FETCH next rows defined by cursor */

printf("FETCH NEXT FROM data1 INTO  :nxt1;\n");
EXEC SQL FETCH NEXT FROM data1 INTO  :nxt1;
CHCKOK ();
printf("nxt1 should be %ld; its value is %ld\n\n", eno2, nxt1);
if (nxt1 != eno2)
   flag = 0;

/* fetch next row */

printf("FETCH NEXT FROM data1 INTO :nxt2;\n");
EXEC SQL FETCH NEXT FROM data1 INTO :nxt2;
CHCKOK ();
printf("nxt2 should be %ld; its value is %ld\n\n", eno3, nxt2);
if (nxt2 != eno3)
   flag = 0;

/* check final row is returned */

printf("FETCH NEXT FROM data1 INTO :nxt3;\n");
EXEC SQL FETCH NEXT FROM data1 INTO :nxt3;
CHCKOK ();
printf("nxt3 should be %ld; its value is %ld\n\n", eno4, nxt3);
if (nxt3 != eno4)
   flag = 0;

/* check that a completion condition is raised */

printf("FETCH NEXT FROM data1 INTO :eno5;\n");
EXEC SQL FETCH NEXT FROM data1 INTO :eno5;

/* That should generate a completion condition no data*/
/* which is SQLSTATE 02000 */

printf("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;
printf("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

printf("CLOSE data1;\n");
EXEC SQL CLOSE data1;
CHCKOK ();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts783.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7512','pass','PC');
       }
     else
       {
          printf("\n\n       yts783.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7512','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7512 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


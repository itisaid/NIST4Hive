/*  EMBEDDED C (file "XOP719.PC")  */

/*   Copyright 1994, 1995 X/Open Company Limited  */

/* All rights reserved.                                          */
/*                                                               */
/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */

/*   X/Open and the 'X' symbol are registered trademarks of X/Open Company  */
/*   Limited in the UK and other countries.                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1994/05/05 EMBEDDED C LANGUAGE                          */
/*  X/Open SQL VALIDATION TEST SUITE V6.0                        */
/*                                                               */
/*  XOP719.PC                                                    */
/*  WRITTEN BY: E. Pratt                                         */
/*                                                               */
/*  GRANT ALL with optional PRIVILEGES omitted.                  */
/*                                                               */
/*  REFERENCES                                                   */
/*        X/Open CAE SQL                                         */
/*        SECTION 5.3.9                                          */
/*                                                               */
/*                 <embedded SQL C program>                      */
/*                                                               */
/*  DATE PROGRAM LAST CHANGED   02/11/94                         */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>
EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char HCV[34];
char ch1[3];
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
extern int AUTHID();

int errcnt;
/* date_time declaration */
time_t cal;
            long  errflg;

/* variables for NOSUBCLASS() */
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];

/* Test SQLSTATE for normal completion */

CHCKOK ()
{
printf ("SQLCODE should be 0; its value is %ld\n",SQLCODE);
SQLSTATE[5] = '\0';
printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

NOSUBCLASS();
if (strncmp (NORMSQ, "00000", 5) == 0 &&
strncmp (NORMSQ, SQLSTATE, 5) != 0)
printf ("Valid implementation defined SQLSTATE accepted.\n");
}


main()
{

printf(" This test program must be run before xop720.pc, \n");
printf(" xop721.pc, xop722.pc, xop723.pc \n");
printf("\n");

/* Log on as user XOPEN2 */
     strcpy(uid,"XOPEN2");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM XOPEN1.ECCO;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("X/OPEN Extensions SQL Test Suite, V6.0, Embedded C, xop719.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

     strcpy(HCV,"                                 ");
/* initialise NOSUBCLASS comparison variable */
strcpy(ALPNUM, "01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

/******************** BEGIN TEST0719 ********************/

     printf("\n                     TEST0719             \n");
     printf("X/O,GRANT ALL with optional PRIVILEGES omitted\n");
     printf(" X/Open CAE SQL SEC. 5.3.9\n");
     printf("       - - - - - - - - - - - - - - - - - - -\n\n");
     printf("*** GRANT ALL ON XOPEN1.AAA TO XOPEN3 WITH \n");
     printf("***       GRANT OPTION;\n");
     printf("*** GRANT ALL ON XOPEN1.BBB TO XOPEN3;\n");
     printf("*** SELECT B2 INTO :ch1 FROM XOPEN2V \n");
     printf("***       WHERE B1 = 'BD'; \n");
     printf("*** GRANT ALL ON XOPEN1.CCC TO XOPEN3 \n");
     printf("\n\n=================================================\n");

/* GRANT ALL with optional PRIVILEGES omitted, grantor */

     errflg = 0;

/* Clear the tables first */
     EXEC SQL DELETE FROM XOPEN1.AAA;
     EXEC SQL DELETE FROM XOPEN1.BBB;
     EXEC SQL DELETE FROM XOPEN1.CCC;

/* Load data into the working database tables */
     EXEC SQL INSERT INTO XOPEN1.AAA VALUES('AA', 'AB', 'AC');
     EXEC SQL INSERT INTO XOPEN1.AAA VALUES('AD', 'AE', 'AF');
     EXEC SQL INSERT INTO XOPEN1.AAA VALUES('AG', 'AH', 'AI');
     EXEC SQL INSERT INTO XOPEN1.AAA VALUES('AJ', 'AK', 'AL');
     EXEC SQL INSERT INTO XOPEN1.BBB VALUES('BA', 'BB', 'BC');
     EXEC SQL INSERT INTO XOPEN1.BBB VALUES('BD', 'BE', 'BF');
     EXEC SQL INSERT INTO XOPEN1.BBB VALUES('BG', 'BH', 'BI');
     EXEC SQL INSERT INTO XOPEN1.BBB VALUES('BJ', 'BK', 'BL');
     EXEC SQL INSERT INTO XOPEN1.CCC VALUES('CA', 'CB', 'CC');
     EXEC SQL INSERT INTO XOPEN1.CCC VALUES('CD', 'CE', 'CF');
     EXEC SQL INSERT INTO XOPEN1.CCC VALUES('CG', 'CH', 'CI');
     EXEC SQL INSERT INTO XOPEN1.CCC VALUES('CJ', 'CK', 'CL');
     EXEC SQL COMMIT WORK;

     printf("\n\n=================================================\n");
/* Grantor holds all privileges, but has grant option */
/* only for SELECT and CREATE */
     strcpy(SQLSTATE,"x");
     EXEC SQL GRANT ALL ON XOPEN1.AAA TO XOPEN3 WITH 
       GRANT OPTION;
     CHCKOK();
     if (strncmp(NORMSQ,"00000",5) != 0  && SQLCODE != 0)
     {
           printf ("*** Problem found (TEST STEP NUMBER 1) ! *** \n");
     errflg = errflg + 1;
     }
     EXEC SQL COMMIT WORK;

     printf("\n\n=================================================\n");
/* Grantor holds INSERT, DELETE with GRANT OPTION, */
/* REFERENCES without */
     strcpy(SQLSTATE,"x");
     EXEC SQL GRANT ALL ON XOPEN1.BBB TO XOPEN3;

     CHCKOK();
     if (strncmp(NORMSQ,"00000",5) != 0  && SQLCODE != 0)
     {
           printf ("*** Problem found (TEST STEP NUMBER 2) ! *** \n");
     errflg = errflg + 1;
      }
     EXEC SQL COMMIT WORK;

     printf("\n\n=================================================\n");
/* Grantor holds INSERT, DELETE with GRANT OPTION, */
/* REFERENCES and SELECT without */
     strcpy(SQLSTATE,"x");
     strcpy(ch1,"  ");
/*CREATE VIEW XOPEN2V AS SELECT B1, B2, B3 FROM XOPEN1.BBB*/
     EXEC SQL SELECT B2 INTO :ch1 FROM XOPEN2V 
       WHERE B1 = 'BD';
     ch1[2] = '\0';
     printf("ch1 should be BE, it is %s\n",ch1);
     SQLSTATE[5] = '\0';
     printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);
     NOSUBCLASS();
     if (strncmp(NORMSQ,"00000",5) != 0 && strncmp(ch1,"BE",2) != 0 )
     {
      printf ("*** Problem found (TEST STEP NUMBER 3) ! *** \n");
      errflg = errflg + 1;
     }
     EXEC SQL COMMIT WORK;

     printf("\n\n=================================================\n");
/* Grantor holds INSERT, SELECT only without GRANT OPTION */
     strcpy(SQLSTATE,"x");
     strcpy(HCV, "GRANT ALL ON XOPEN1.CCC TO XOPEN3");
     EXEC SQL PREPARE XOP719A FROM :HCV;
     EXEC SQL EXECUTE XOP719A;
     SQLSTATE[5] = '\0';
     printf("SQLSTATE should be 01007, it is %s\n",SQLSTATE);

     if (strncmp(SQLSTATE,"01007",5) != 0)
     {
     printf("*** Problem found (TEST STEP NUMBER 4) ! *** \n");
     errflg = errflg + 1;
     }
     EXEC SQL COMMIT WORK;
/* No ROLLBACK WORK;-programs follow on from this one e.g.*/
/* xop720.pc, which require the above grants to exist  */

     printf("\nNumber of errors detected = %ld \n",errflg);
     printf("### maximum number of errors is 4 ###\n");

 if (errflg == 0)
 {
   EXEC SQL INSERT INTO XOPEN1.TESTREPORT VALUES('0719','pass','PC');
 printf("\n\n      xop719.pc      *** pass ***     ");
 }
 else
 {
 EXEC SQL INSERT INTO XOPEN1.TESTREPORT VALUES('0719','fail','PC');
 errcnt = errcnt + 1;
 printf("\n\       xop719.pc      *** fail ***     ");
 }

     printf("\n\n=================================================\n");
     printf("\n\n\n\n");
                         
     EXEC SQL COMMIT WORK;

/******************** END TEST0719 ********************/

     exit(errcnt);

}

NOSUBCLASS()
{
/* This routine replaces valid implementation deifined   */
/* subclasses with 000. This replacement equates valid   */
/* implementation-defined subclasses with the 000 value  */
/* expected by the test case; otherwise the test will    */
/* fail. After calling NOSUBCLASS, NORMSQ will be tested */
/*                              SQLSTATE will be printed */

strcpy (NORMSQ, SQLSTATE);

norm1 = 2;
/* subclass begins in position 3 of char array NORMSQ    */
for (norm2 = 13; norm2 < 37; norm2++)
/* valid subclasses begin with 5/9, I-Z, end of ALPNUM table */
    {
    if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
    }

if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
   goto P213;
/* Quit if NORMSQ is unchanged. Subclass is not impl.def */
/* Changed NORMSQ means implementation-defined subclass, */
/* so proceed to zero it out, if valid (0-9, A-Z)        */

norm1 = 3;
/* examining position 4 of char array NORMSQ             */
for (norm2 = 0; norm2 < 37; norm2++)
/* valid characters are 0-9 A-Z                          */
   {
   if (NORMSQ[norm1] == ALPNUM[norm2])
       NORMSQ[norm1] = '0';
   }

norm1 = 4;
/* examining position 5 of char array NORMSQ             */
for (norm2 = 0; norm2 < 37; norm2++)
/* valid characters are 0-9 A-z */
   {
   if (NORMSQ[norm1] == ALPNUM[norm2])
       NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01). These equate to successful completion */
/* SQLSTATE values of 00000. */
/* reference SQL-92. 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
    NORMSQ[1] = '0';
P213:
    return;

}


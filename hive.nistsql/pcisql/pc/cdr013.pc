/*  EMBEDDED C (file "CDR013.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1987/12/07 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  CDR013.PC                                                    */
/*  WRITTEN BY: SUN DAJUN                                        */
/*                                                               */
/*    THIS ROUTINE TESTS THE REFERENCE INTEGRITY CONSTRAINT FOR  */
/*  SQL.                                                         */
/*                                                               */
/*  REFERENCES                                                   */
/*        AMERICAN NATIONAL STANDARD database language - SQL     */
/*                           with Integrity Enhancement          */
/*                                                               */
/*             SECTION 6.6 <unique constraint definition>        */
/*                <unique constraint definition>::=              */
/*                        <unique specifition>(<unique column    */
/*                        list>)                                 */
/*                 <unique specifition>::= UNIQUE|PRIMARY KEY    */
/*                                                               */
/*             SECTION 6.7 <referential constraint definition>   */
/*                <referential constraint definition>::=         */
/*                      FOREIGN KEY (<referencing columns>)      */
/*                      <references specification>               */
/*                <references specification>::=                  */
/*                      REFERENCES <referenced table and columns>*/
/*                <referencing columns>::=                       */
/*                        <reference column list>                */
/*                <refereced table and columns>::=               */
/*                        <table name>[(<reference column list>  */
/*                <reference column list>::=                     */
/*                        <column name>[{,<column name>}...]     */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>



EXEC SQL BEGIN DECLARE SECTION;
long count1;
long count2;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long SQLCODE;
int errcnt;
/* date_time declaration */
time_t cal;



long code1;

main()

{
        strcpy(uid,"SUN");
        AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM SUN.ECCO;
if (strncmp(uid,uidx,3) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, cdr013.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0343 ********************/
/* This program updates a row in PRIMARY KEY TABLE      */
/* -- STAFF_M, set (E2,*,*,*,*) to (E9,*,*,*,*) ,there  */
/* are (*,*,*,*,*,E2) in PROJ_M.                        */ 

printf("\n                     TEST0343             \n");
printf("              PRIMARY KEY & FOREIGN KEY    \n");
printf("     SQL with Integrity Enhancement section 6.5,6.6,6.7\n");
printf("     - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("        UPDATE STAFF_M\n");
printf("        SET EMPNUM='E9'\n");
printf("        WHERE EMPNUM='E2';\n");
printf("code1 = SQLCODE;\n");
printf("\n");
printf("        SELECT COUNT(*) INTO :count1\n");
printf("        FROM STAFF_M\n");
printf("        WHERE EMPNUM = 'E2';\n");
EXEC SQL UPDATE STAFF_M
        SET EMPNUM = 'E9'
        WHERE EMPNUM = 'E2';
code1 = SQLCODE;
EXEC SQL SELECT COUNT(*) INTO :count1
        FROM STAFF_M
        WHERE EMPNUM = 'E2';
EXEC SQL ROLLBACK WORK;
printf("        The correct result is code1 not equal 0\n");
printf("                              count1 = 1\n");
printf("        Your answer is code1=%ld\n",code1);
printf("                              count1 = %ld\n",count1);
        if (code1 < 0 && count1 == 1)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0343','pass','PC');
printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0343','fail','PC');
          errcnt = errcnt + 1;
printf("\n\n       cdr013.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;
/******************** END TEST0343 **************************/







/******************** BEGIN TEST0344 ********************/
/* This test update a row or rows on FOREIGN KEY        */
/* column in table PROJ_M,set those rows (*,*,*,*,*,E3) to*/
/* (*,*,*,*,*,E9),but there is not a row ('E9',*,*,*,*) in*/
/*  PRIMARY TABLE -- STAFF_M, this will bring about an  */
/*  ERROR.                                             */

printf("\n                     TEST0344             \n");
printf("              PRIMARY KEY & FOREIGN KEY    \n");
printf("     SQL with Integrity Enhancement section 6.5,6.6,6.7\n");
printf("     - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("\n");
printf("        UPDATE PROJ_M\n");
printf("        SET MGR='E9'\n");
printf("        WHERE MGR='E3';\n");
printf("code1 = SQLCODE;\n");
printf("\n");
printf("        SELECT COUNT(*) INTO :count1\n");
printf("        FROM PROJ_M\n");
printf("        WHERE MGR = 'E3';\n");
count1 = 0;
EXEC SQL UPDATE PROJ_M
        SET MGR = 'E9'
        WHERE MGR = 'E3';
code1 = SQLCODE;
EXEC SQL SELECT COUNT(*) INTO :count1
        FROM PROJ_M
        WHERE MGR = 'E3';
EXEC SQL ROLLBACK WORK;
printf("        The correct result is code1 not equal 0\n");
printf("                              count1 = 1\n");
printf("        Your answer is code1=%ld\n",code1);
printf("                              count1 = %ld\n",count1);
if (code1 != 0 && count1 == 1)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0344','pass','PC');
printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0344','fail','PC');
          errcnt = errcnt + 1;
printf("\n\n       cdr013.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;
/******************** END TEST0344 **************************/






/******************** BEGIN TEST0345 *******************/
/* This test update a row or rows on FOREIGN KEY       */
/* column in table PROJ_M,set those rows (*,*,*,*,*,E3) to*/
/* (*,*,*,*,*,E5),and there are such a row (E5,-,-,-,-) in */
/*  PRIMARY TABLE -- STAFF_M.                              */

printf("\n                     TEST0345             \n");
printf("              PRIMARY KEY & FOREIGN KEY    \n");
printf("     SQL with Integrity Enhancement section 6.5,6.6,6.7\n");
printf("     - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("\n");
printf("        UPDATE PROJ_M\n");
printf("        SET MGR='E5'\n");
printf("        WHERE MGR ='E3';\n");
printf("code1 = SQLCODE;\n");
printf("        SELECT COUNT(*) INTO :count1\n");
printf("        FROM PROJ_M\n");
printf("        WHERE MGR = 'E5';\n");
count1 = 0;
EXEC SQL UPDATE PROJ_M
        SET MGR = 'E5'
        WHERE MGR = 'E3';
code1 = SQLCODE;
EXEC SQL SELECT COUNT(*) INTO :count1
        FROM PROJ_M
        WHERE MGR = 'E5';
EXEC SQL ROLLBACK WORK;
printf("        The correct result is code1 equal 0\n");
printf("                              count1 = 1\n");
printf("        Your answer is code1=%ld\n",code1);
printf("                              count1 = %ld\n",count1);
        if (code1 == 0 && count1 == 1)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0345','pass','PC');
printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0345','fail','PC');
          errcnt = errcnt + 1;
printf("\n\n       cdr013.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;
/******************** END TEST0345 **************************/




/******************** BEGIN TEST0346 ********************/
/* This test  inserts  a row  (E8,-,-,-,-,P9) in STAFF_M */
/* but (P9,-,-,-,-,-,-) isn't in PROJ_M, this should be  */
/* an error                                             */

printf("\n                     TEST0346             \n");
printf("              PRIMARY KEY & FOREIGN KEY    \n");
printf("  SQL with Integrity Enhancement section 6.5,6.6,6.7\n");
printf("  - - - - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("\n");
printf("         INSERT INTO STAFF_M\n");
printf("         VALUES('E8','Alice',12,'Deale','P9');\n");

count1 = -1;
EXEC SQL INSERT INTO STAFF_M
         VALUES('E8','Alice',12,'Deale','P9');
code1 = SQLCODE;
EXEC SQL SELECT COUNT(*) INTO:count1
       FROM STAFF_M
        WHERE PRI_WK = 'P9';
EXEC SQL ROLLBACK WORK;
 printf(" The correct answer is :\n");
 printf("           SQLCODE of second INSERT not equal to 0.\n");
 printf("           count1 is 0\n");
 printf(" Your answer is :\n");
 printf("           SQLCOD of second insert is %ld\n",code1);
 printf("           count1 is %ld\n",count1);
        if (code1 != 0 && count1 == 0)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0346','pass','PC');
       printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0346','fail','PC');
          errcnt = errcnt + 1;
       printf("\n\n       cdr013.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;
/************************ END TEST0346 *************************/


     exit(errcnt);

}


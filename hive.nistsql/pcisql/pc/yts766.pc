/*  EMBEDDED C (file "YTS766.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS766.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  Access to REFERENTIAL_CONSTRAINTS view                       */
/*  a)Explicit table constraints in REFERENTIAL_CONSTRAINTS view */
/*  b)Column constraints in REFERENTIAL_CONSTRAINTS view         */
/*  c)Unique identification in REFERENTIAL_CONSTRAINTS view      */
/*  d)Values in columns of REFERENTIAL_CONSTRAINTS view          */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    21.2.14   REFERENTIAL_CONSTRAINTS view                     */
/*    21.3.15   REFERENTIAL_CONSTRAINTS base table               */
/*    F# 33     Constraint tables                                */
/*    F# 2      Basic information schema                         */
/*                                                               */
/*  a) 11.8     <referential constraint definition>              */
/*     11.6 SR.2                                                 */
/*     11.6 GR.2 <table constraint definition>                   */
/*     21.2.13  TABLE_CONSTRAINTS view                           */
/*                                                               */
/*  b) 11.8     <referential constraint definition>              */
/*     11.4     <column definition>                              */
/*     11.4 SR.9                                                 */
/*     11.6 SR.2                                                 */
/*     21.2.13  TABLE_CONSTRAINTS view                           */
/*                                                               */
/*  c) 10.6     <constraint name definition> and                 */
/*              <constraint attributes>                          */
/*     10.6 SR.2                                                 */
/*     11.6 SR.2                                                 */
/*                                                               */
/*  d) 21.3.15 F                                                 */
/*     11.8 LR 1a                                                */
/*     11.8 LR 2a                                                */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*  Character strings NULL terminated. 5th December 1995.        */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-08                                    */
/*    Added rollback after authid                                */
/*    Fixed identifiers in info schem                            */
/*    More output                                                */
/*    Removed EXEC SQL from inside printf                        */
/*    Fixed syntax error                                         */
/*    Cleanups                                                   */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short co;
short co2;
char connam[129];
char unicon[129];
char mopt[129];
char upr[129];
char delr[129];
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
short    i;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts766.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7540 ********************/
flag = 1;

     printf("                  TEST7540 \n");
     printf("   Explicit table constrnts - REFERENTIAL_CONSTRAINTS\n");
     printf("References:\n");
     printf("    21.2.14  REFERENTIAL_CONSTRAINTS view\n");
     printf("    21.3.15  REFERENTIAL_CONSTRAINTS base table\n");
     printf("    F# 33    Constraint tables\n");
     printf("    F# 2     Basic information schema\n");
     printf("    11.8     <referential constraint definition>\n");
     printf("    11.6 SR.2\n");
     printf("    11.6 GR.2 <table constraint definition>\n");
     printf("    21.2.13  TABLE_CONSTRAINTS view\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* initialise all variables */
 for (i = 0; i < 128; i++)
   {
     connam[i] = 'x';
     unicon[i] = 'x';
     mopt[i] = 'x';
     upr[i] = 'x';
     delr[i] = 'x';
   }

     connam[128] = '\0';
     unicon[128] = '\0';
     mopt[128] = '\0';
     upr[128] = '\0';
     delr[128] = '\0';

/* entry for table constraint referencing table in same schema */
/* select constraint name from TABLE_CONSTRAINTS */

printf("SELECT CONSTRAINT_NAME INTO :connam\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_NAME = 'WORKS3A' AND\n");
printf("CONSTRAINT_TYPE = 'FOREIGN KEY';\n");
EXEC SQL SELECT CONSTRAINT_NAME INTO :connam
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE TABLE_NAME = 'WORKS3A' AND 
CONSTRAINT_TYPE = 'FOREIGN KEY';
CHCKOK ();
printf("\n");

/* check row is mentioned in REFERENTIAL_CONSTRAINTS view */

printf("SELECT UNIQUE_CONSTRAINT_SCHEMA, MATCH_OPTION\n");
printf("UPDATE_RULE, DELETE_RULE\n");
printf("INTO :unicon, :mopt, :upr, :delr\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_NAME = :connam;\n");

EXEC SQL SELECT UNIQUE_CONSTRAINT_SCHEMA, MATCH_OPTION, 
UPDATE_RULE,DELETE_RULE 
INTO :unicon, :mopt, :upr, :delr
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE CONSTRAINT_NAME = :connam;
CHCKOK ();
printf ("unicon is %s\n", unicon);
printf("mopt should be NONE; its value is %s\n", mopt);
printf("upr should be NO ACTION; its value is %s\n", upr);
printf("delr should be NO ACTION; its value is %s\n\n", delr);
if (strncmp(mopt,"NONE",4) != 0)
   flag = 0;
if (strncmp(upr,"NO ACTION",9) != 0)
   flag = 0;
if (strncmp(delr,"NO ACTION",9) != 0)
   flag = 0;

/* check entry for table constraint ref table in different schema */

/* initialise all variables */
 for (i = 0; i < 128; i++) 
    { 
      connam[i] = 'x'; 
      unicon[i] = 'x'; 
      mopt[i] = 'x'; 
      upr[i] = 'x'; 
      delr[i] = 'x'; 
    }

     connam[128] = '\0';
     unicon[128] = '\0';
     mopt[128] = '\0';
     upr[128] = '\0';
     delr[128] = '\0';


/* entry for table constraint referencing table in different schema */
/* select constraint name from TABLE_CONSTRAINTS */

printf("SELECT CONSTRAINT_NAME INTO :connam\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_NAME = 'COMP_BUDG' AND\n");
printf("CONSTRAINT_TYPE = 'FOREIGN KEY';\n");
EXEC SQL SELECT CONSTRAINT_NAME INTO :connam
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE TABLE_NAME = 'COMP_BUDG' AND
CONSTRAINT_TYPE = 'FOREIGN KEY';
CHCKOK ();
printf("\n");

/* check row is mentioned in REFERENTIAL_CONSTRAINTS view */

printf("SELECT UNIQUE_CONSTRAINT_SCHEMA, MATCH_OPTION\n");
printf("UPDATE_RULE, DELETE_RULE\n");
printf("INTO :unicon, :mopt, :upr, :delr\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_NAME = :connam;\n");
EXEC SQL SELECT UNIQUE_CONSTRAINT_SCHEMA, MATCH_OPTION, 
UPDATE_RULE,DELETE_RULE 
INTO :unicon, :mopt, :upr, :delr
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE CONSTRAINT_NAME = :connam;
CHCKOK ();
printf ("unicon is %s\n", unicon);
printf("mopt should be NONE; its value is %s\n", mopt);
printf("upr should be NO ACTION; its value is %s\n", upr);
printf("delr should be NO ACTION; its value is %s\n\n", delr);
if (strncmp(mopt,"NONE",4) != 0)
   flag = 0;
if (strncmp(upr,"NO ACTION",9) != 0)
   flag = 0;
if (strncmp(delr,"NO ACTION",9) != 0)
   flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts766.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7540','pass','PC');
       }
     else
       {
          printf("\n\n       yts766.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7540','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7540 *********************/

/******************** BEGIN TEST7541 ********************/
flag = 1;

     printf("                  TEST7541 \n");
     printf("   Column constraints in REFERENTIAL_CONSTRAINTS view\n");
     printf("References:\n");
     printf("    21.2.14     REFERENTIAL_CONSTRAINTS view\n");
     printf("    21.3.15     REFERENTIAL_CONSTRAINTS base table\n");
     printf("    F# 33       Constraint tables\n");
     printf("    F# 2        Basic information schema\n");
     printf("    11.8        <referential constraint definition>\n");
     printf("    11.4        <column definition>\n");
     printf("    11.4 SR.9\n");
     printf("    11.6 SR.2\n");
     printf("    21.2.13     TABLE_CONSTRAINTS view\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

SQLCODE = -1;
strcpy (SQLSTATE,"xxxxx");

/* initialise all variables */
 for (i = 0; i < 128; i++) 
    { 
      connam[i] = 'x'; 
      unicon[i] = 'x'; 
      mopt[i] = 'x'; 
      upr[i] = 'x'; 
      delr[i] = 'x'; 
    }

     connam[128] = '\0';
     unicon[128] = '\0';
     mopt[128] = '\0';
     upr[128] = '\0';
     delr[128] = '\0';

/* find constraint_name from TABLE_CONSTRAINTS view */

printf("SELECT CONSTRAINT_NAME INTO :connam\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_NAME = 'STAFFZ' AND\n");
printf("CONSTRAINT_TYPE = 'FOREIGN KEY';\n");
EXEC SQL SELECT CONSTRAINT_NAME INTO :connam
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE TABLE_NAME = 'STAFFZ' AND
CONSTRAINT_TYPE = 'FOREIGN KEY';
CHCKOK ();
printf("\n");

/* check row is referenced in REFERENTIAL_CONSTRAINTS view */

printf("SELECT UNIQUE_CONSTRAINT_SCHEMA, MATCH_OPTION,\n");
printf("UPDATE_RULE, DELETE_RULE INTO :unicon, :mopt, :upr, :delr\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_NAME = :connam;\n");
EXEC SQL SELECT UNIQUE_CONSTRAINT_SCHEMA, MATCH_OPTION,
UPDATE_RULE, DELETE_RULE INTO :unicon, :mopt, :upr, :delr
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS 
WHERE CONSTRAINT_NAME = :connam;
CHCKOK ();
printf ("unicon is %s\n", unicon);
printf("mopt should be NONE; its value is %s\n", mopt);
printf("upr should be NO ACTION; its value is %s\n", upr);
printf("delr should be NO ACTION; its value is %s\n\n", delr);
if (strncmp(mopt,"NONE",4) != 0)
   flag = 0;
if (strncmp(upr,"NO ACTION",9) != 0)
   flag = 0;
if (strncmp(delr,"NO ACTION",9) != 0)
   flag = 0;

/* Col constraint to reference other schema */

/* initialise all variables */
 for (i = 0; i < 128; i++) 
    { 
      connam[i] = 'x'; 
      unicon[i] = 'x'; 
      mopt[i] = 'x'; 
      upr[i] = 'x'; 
      delr[i] = 'x'; 
    }

     connam[128] = '\0';
     unicon[128] = '\0';
     mopt[128] = '\0';
     upr[128] = '\0';
     delr[128] = '\0';

/* find constraint name from TABLE_CONSTRAINTS */

printf("SELECT CONSTRAINT_NAME INTO :connam\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_NAME = 'PROJ_STATUS' AND\n");
printf("CONSTRAINT_TYPE = 'FOREIGN KEY'\n");
EXEC SQL SELECT CONSTRAINT_NAME INTO :connam
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE TABLE_NAME = 'PROJ_STATUS' AND
CONSTRAINT_TYPE = 'FOREIGN KEY';
CHCKOK ();
printf("\n");

/* check row is referenced in REFERENTIAL_CONSTRAINTS view */

printf("SELECT UNIQUE_CONSTRAINT_SCHEMA, MATCH_OPTION,\n");
printf("UPDATE_RULE, DELETE_RULE INTO :unicon, :mopt, :upr, :delr\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_NAME = :connam;\n");
EXEC SQL SELECT UNIQUE_CONSTRAINT_SCHEMA, MATCH_OPTION,
UPDATE_RULE, DELETE_RULE INTO :unicon, :mopt, :upr, :delr
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS 
WHERE CONSTRAINT_NAME = :connam;
CHCKOK ();
printf ("unicon is %s\n", unicon);
printf("mopt should be NONE; its value is %s\n", mopt);
printf("upr should be NO ACTION; its value is %s\n", upr);
printf("delr should be NO ACTION; its value is %s\n\n", delr);
if (strncmp(mopt,"NONE",4) != 0)
   flag = 0;
if (strncmp(upr,"NO ACTION",9) != 0)
   flag = 0;
if (strncmp(delr,"NO ACTION",9) != 0)
   flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts766.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7541','pass','PC');
       }
     else
       {
          printf("\n\n       yts766.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7541','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7541 *********************/

/******************** BEGIN TEST7542 ********************/
flag = 1;

     printf("                  TEST7542 \n");
     printf("   Unique id in REFERENTIAL_CONSTRAINTS view\n");
     printf("References:\n");
     printf("    21.2.14    REFERENTIAL_CONSTRAINTS view\n");
     printf("    21.3.15    REFERENTIAL_CONSTRAINTS base table\n");
     printf("    F# 33      Constraint tables\n");
     printf("    F# 2       Basic information schema\n");
     printf("    10.6       <constraint name definition> and\n");
     printf("               <constraint attributes>\n");
     printf("    10.6 SR.2\n");
     printf("    11.6 SR.2\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* reinitialise variables */
 for (i = 0; i < 128; i++) 
    { 
      connam[i] = 'x'; 
      unicon[i] = 'x'; 
      mopt[i] = 'x'; 
      upr[i] = 'x'; 
      delr[i] = 'x'; 
    }

     connam[128] = '\0';
     unicon[128] = '\0';
     mopt[128] = '\0';
     upr[128] = '\0';
     delr[128] = '\0';

/* check no values of CONSTRAINT_CATALOG are NULL */

co = 99;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_CATALOG IS NULL\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE CONSTRAINT_CATALOG IS NULL;
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
  flag = 0;

/* check no values of CONSTRAINT_SCHEMA are NULL */

co = 99;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_SCHEMA IS NULL\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA IS NULL;
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
  flag = 0;

/* check no values of CONSTRAINT_NAME are NULL */

co = 99;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_NAME IS NULL;\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE CONSTRAINT_NAME IS NULL;
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
  flag = 0;

/* check CATALOG SCHEMA & NAME have diff set of vals in each row */

co = 99;
co2 = 98;

printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS;\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS;
CHCKOK ();
printf("\n");

printf("SELECT COUNT (*) INTO :co2\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS T\n");
printf("WHERE\n");
printf("UNIQUE (\n");
printf("       SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("       WHERE CONSTRAINT_CATALOG = T.CONSTRAINT_CATALOG AND\n");
printf("       CONSTRAINT_NAME = T.CONSTRAINT_NAME AND\n");
printf("       CONSTRAINT_SCHEMA = T.CONSTRAINT_SCHEMA\n");
printf("       );\n");

EXEC SQL SELECT COUNT (*) INTO :co2
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS T
WHERE
UNIQUE (
       SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
       WHERE CONSTRAINT_CATALOG = T.CONSTRAINT_CATALOG AND
       CONSTRAINT_NAME = T.CONSTRAINT_NAME AND
       CONSTRAINT_SCHEMA = T.CONSTRAINT_SCHEMA
       );

CHCKOK ();
printf("co should be equal to co2; co is %d, co2 is %d\n\n", co, co2);
if (co != co2)
   flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts766.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7542','pass','PC');
       }
     else
       {
          printf("\n\n       yts766.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7542','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7542 *********************/

/******************** BEGIN TEST7543 ********************/
flag = 1;

     printf("                  TEST7543 \n");
     printf("   Values in columns of REFERENTIAL_CONSTRAINTS view\n");
     printf("References:\n");
     printf("    21.2.14    REFERENTIAL_CONSTRAINTS view\n");
     printf("    21.3.15    REFERENTIAL_CONSTRAINTS base table\n");
     printf("    F# 33      Constraint tables\n");
     printf("    F# 2       Basic information schema\n");
     printf("    21.3.15 F\n");
     printf("    11.8 LR.1a\n");
     printf("    11.8 LR.2a\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* Check that vals in UNIQUE_CONSTRAINT_CATALOG are NON-NULL */

co = 99;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("WHERE UNIQUE_CONSTRAINT_CATALOG IS NULL;\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE UNIQUE_CONSTRAINT_CATALOG IS NULL;
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
  flag = 0;

/* Check that vals in UNIQUE_CONSTRAINT_SCHEMA are NON_NULL */

co = 99;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("WHERE UNIQUE_CONSTRAINT_SCHEMA IS NULL\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE UNIQUE_CONSTRAINT_SCHEMA IS NULL;
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
  flag = 0;

/* Check values in  UNIQUE_CONSTRAINT_NAME are NON_NULL */

co = 99;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("WHERE UNIQUE_CONSTRAINT_NAME IS NULL;\n");
EXEC SQL SELECT COUNT(*) INTO :co
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE UNIQUE_CONSTRAINT_NAME IS NULL;
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
  flag = 0;

/* Check values in MATCH_OPTION are NON_NULL */

co = 99;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("WHERE MATCH_OPTION IS NULL;\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE MATCH_OPTION IS NULL;
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
  flag = 0;

/* Check values in UPDATE_RULE are NON_NULL */

co = 99;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("WHERE UPDATE_RULE IS NULL;\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE UPDATE_RULE IS NULL;
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
  flag = 0;

/* Check values in DELETE_RULE are NON_NULL */

co = 99;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("WHERE DELETE_RULE IS NULL;\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE DELETE_RULE IS NULL;
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
  flag = 0;

/* Check values in Match col are in NONE, PARTIAL, FULL */

co = 99;
co2 = -1;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS;\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS;
CHCKOK ();
printf("\n");

printf("SELECT COUNT (*) INTO :co2\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("WHERE MATCH_OPTION IN ('NONE','PARTIAL','FULL`)\n");
EXEC SQL SELECT COUNT (*) INTO :co2
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE MATCH_OPTION IN ('NONE','PARTIAL','FULL');
CHCKOK ();
printf("co2 should be equal to co; co is %d, co2 is %d\n\n", co, co2);
if (co != co2)
   flag = 0;

/* Check vals in UPDATE_RULE in CASCADE, SET NULL,SET DEFAULT,NO ACTION */

co2 = -1;
printf("SELECT COUNT (*) INTO :co2\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("WHERE UPDATE_RULE IN ('CASCADE','SET NULL`,`SET DEFAULT'\n");
printf("'NO ACTION')\n");
EXEC SQL SELECT COUNT (*) INTO :co2
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE UPDATE_RULE IN
('CASCADE','SET NULL','SET DEFAULT','NO ACTION');
CHCKOK ();
printf("co2 should be equal to co; co is %d, co2 is %d\n\n", co, co2);
if (co != co2)
   flag = 0;

/* Check vals in DELETE_RULE in CASCADE,SET NULL,SET DEFAULT,NO ACTION */

co2 = -1;
printf("SELECT COUNT (*) INTO :co2\n");
printf("FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n");
printf("WHERE DELETE_RULE IN ('CASCADE','SET NULL','SET DEFAULT',\n");
printf("'NO ACTION');\n");
EXEC SQL SELECT COUNT (*) INTO :co2
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE DELETE_RULE IN
('CASCADE','SET NULL','SET DEFAULT','NO ACTION');
CHCKOK ();
printf("co2 should be equal to co; co is %d, co2 is %d\n\n", co, co2);
if (co != co2)
   flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts766.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7543','pass','PC');
       }
     else
       {
          printf("\n\n       yts766.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7543','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7543 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

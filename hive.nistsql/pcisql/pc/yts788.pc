/*  EMBEDDED C (file "YTS788.PC")  */

/* Copyright 1996 National Computing Centre Limited, */
/* and Computer Logic R&D S.A */
/* on behalf of the CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS788.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  CREATE CHARACTER SET, implicit default collation             */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    11.28      <character set definition>                      */
/*    21.2.18    CHARACTER_SETS view                             */
/*    F#45       Character set definition                        */
/*    F#2        Basic information schema                        */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-21                                    */
/*    Added rollback after authid                                */
/*    Removed EXEC SQL from printf                               */
/*    Fixed SDL transactions                                     */
/*    Removed broken code for multiple TEST_SETs                 */
/*    Made select criteria specific to avoid multiple TEST_SETs  */
/*    Cleaned up                                                 */
/*    More feedback                                              */
/*    Fixed broken pass criteria                                 */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short i;
char form1[129];
char form2[129];
long num1;
long num2;
char cat1[129];
char cat2[129];
char schem1[129];
char schem2[129];
char name1[129];
char name2[129];
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
short    j;
long     flag;
long     flag2;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts788.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7522 ********************/
flag = 1;
flag2 = 1;

     printf("                  TEST7522 \n");
     printf("   CREATE CHARACTER SET, implicit default collation\n");
     printf("References:\n");
     printf("    11.28   <character set definition>\n");
     printf("    21.2.18 CHARACTER_SETS view\n");
     printf("    F#45    Charater set definition\n");
     printf("    F#2     Basic information schema\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* initialise host variables */
for (j = 0; j < 128; j++)
{
   cat1[i] = 'x';
   cat2[i] = 'x';
   form1[i] = 'x';
   form2[i] = 'x';
   name1[i] = 'x';
   name2[i] = 'x';
   schem1[i] = 'x';
   schem2[i] = 'x';
}
   cat1[128] = '\0';
   cat2[128] = '\0';
   form1[128] = '\0';
   form2[128] = '\0';
   name1[128] = '\0';
   name2[128] = '\0';
   schem1[128] = '\0';
   schem2[128] = '\0';
num1 = -1;
num2 = -1;

/* see how many domains of type TEST_SET already exist */

i = 99;
printf("SELECT COUNT (*) INTO :i\n");
printf("FROM INFORMATION_SCHEMA.CHARACTER_SETS\n");
printf("WHERE CHARACTER_SET_SCHEMA = 'CTS1'\n");
printf("AND CHARACTER_SET_NAME = 'TEST_SET';\n");
EXEC SQL SELECT COUNT (*) INTO :i
FROM INFORMATION_SCHEMA.CHARACTER_SETS
WHERE CHARACTER_SET_SCHEMA = 'CTS1'
AND CHARACTER_SET_NAME = 'TEST_SET';
CHCKOK ();
printf("i should be 0; its value is %d\n\n", i);
if (i != 0)
  flag = 0;

printf("COMMIT WORK\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("CREATE CHARACTER SET test_set GET SQL_TEXT;\n");
EXEC SQL CREATE CHARACTER SET test_set GET SQL_TEXT;
CHCKOK ();
printf("\n");

printf("COMMIT WORK\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* check that a row appears in CHARACTER_SETS view */
/* which corresponds to the new CHARACTER_SET */

i = 99;
printf("SELECT COUNT (*) INTO :i\n");
printf("FROM INFORMATION_SCHEMA.CHARACTER_SETS\n");
printf("WHERE CHARACTER_SET_SCHEMA = 'CTS1'\n");
printf("AND CHARACTER_SET_NAME = 'TEST_SET';\n");
EXEC SQL SELECT COUNT (*) INTO :i
FROM INFORMATION_SCHEMA.CHARACTER_SETS
WHERE CHARACTER_SET_SCHEMA = 'CTS1'
AND CHARACTER_SET_NAME = 'TEST_SET';
CHCKOK ();
printf("i should be 1; its value is %d\n\n", i);
if (i != 1)
  flag = 0;

/* check row inserted in CHARACTER_SETS view is correct */

/* return new row for test_set */

printf ("The following two selects should return the same results.\n\n");

printf("SELECT FORM_OF_USE, NUMBER_OF_CHARACTERS,\n");
printf("DEFAULT_COLLATE_CATALOG, DEFAULT_COLLATE_SCHEMA,\n");
printf("DEFAULT_COLLATE_NAME \n");
printf("INTO :form1, :num1, :cat1, :schem1, :name1\n");
printf("FROM INFORMATION_SCHEMA.CHARACTER_SETS\n");
printf("WHERE CHARACTER_SET_SCHEMA = 'CTS1'\n");
printf("AND CHARACTER_SET_NAME = 'TEST_SET';\n");
EXEC SQL SELECT FORM_OF_USE, NUMBER_OF_CHARACTERS,
DEFAULT_COLLATE_CATALOG, DEFAULT_COLLATE_SCHEMA,
DEFAULT_COLLATE_NAME 
INTO :form1, :num1, :cat1, :schem1, :name1
FROM INFORMATION_SCHEMA.CHARACTER_SETS
WHERE CHARACTER_SET_SCHEMA = 'CTS1'
AND CHARACTER_SET_NAME = 'TEST_SET';
CHCKOK ();
printf("\n");

/* get row for SQL_TEXT - should contain same as new row*/

printf("SELECT FORM_OF_USE, NUMBER_OF_CHARACTERS,\n");
printf("DEFAULT_COLLATE_CATALOG, DEFAULT_COLLATE_SCHEMA,\n");
printf("DEFAULT_COLLATE_NAME \n");
printf("INTO :form2, :num2, :cat2, :schem2, :name2\n");
printf("FROM INFORMATION_SCHEMA.CHARACTER_SETS\n");
printf("WHERE CHARACTER_SET_SCHEMA = 'INFORMATION_SCHEMA'\n");
printf("AND CHARACTER_SET_NAME = 'SQL_TEXT';\n");
EXEC SQL SELECT FORM_OF_USE, NUMBER_OF_CHARACTERS,
DEFAULT_COLLATE_CATALOG, DEFAULT_COLLATE_SCHEMA,
DEFAULT_COLLATE_NAME 
INTO :form2, :num2, :cat2, :schem2, :name2
FROM INFORMATION_SCHEMA.CHARACTER_SETS
WHERE CHARACTER_SET_SCHEMA = 'INFORMATION_SCHEMA'
AND CHARACTER_SET_NAME = 'SQL_TEXT';
CHCKOK ();
printf("\n");

printf ("Comparing values....\n");
/* check SQL_TEST and new row contain the same values */
if (strcmp(form1,form2) != 0)
   flag2 = 0;

if (num1 != num2)
   flag2 = 0;

if (strcmp(cat1,cat2) != 0)
   flag2 = 0;

if (strcmp(schem1,schem2) != 0)
   flag2 = 0;

if (strcmp(name1, name2) != 0)
   flag2 = 0;

if (flag2 == 0)
{
   printf("Values do not match\n");
   printf ("form1 is %s\n", form1);
   printf ("num1 is %ld\n", num1);
   printf ("cat1 is %s\n", cat1);
   printf ("schem1 is %s\n", schem1);
   printf ("name1 is %s\n", name1);
   printf ("form2 is %s\n", form2);
   printf ("num2 is %ld\n", num2);
   printf ("cat2 is %s\n", cat2);
   printf ("schem2 is %s\n", schem2);
   printf ("name2 is %s\n", name2);
   flag = 0; 
}
else
{
   printf("Row inserted into CHARACTER_SETS view is correct\n");
}
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP CHARACTER SET test_set;\n");
EXEC SQL DROP CHARACTER SET test_set;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts788.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7522','pass','PC');
       }
     else
       {
          printf("\n\n       yts788.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7522','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7522 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


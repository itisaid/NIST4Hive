/*  EMBEDDED C (file "MPB001.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1988/12/07 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  MPB001.PC                                                    */
/*  WRITTEN BY: S HURWITZ                                        */
/*                                                               */
/*  THIS PROGRAM IS PART B OF A TWO-PART PROGRAM(A & B) THAT     */
/*  TESTS THE CONCURRENCY OF SQL                                 */
/*                                                               */
/*  REFERENCES                                                   */
/*        AMERICAN NATIONAL STANDARD database language - SQL     */
/*                          X3.135-1989                          */
/*                                                               */
/*           SECTION 4.16 Transactions                           */
/*                   Paragraph Two                               */
/*****************************************************************/



#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
   long i;
   long ii;
   long knum;
   long newmax;
   char auth[2];
   char uid[19];
   char uidx[19];
EXEC SQL END DECLARE SECTION;
   long oldkey;
   long keydif;
   long concur;
   long SQLCODE;
   int errcnt;
/* date_time declaration */
time_t cal;
   long pauze;
   long keymax;
   long code1;


main()
{

strcpy(uid,"SULLIVAN1");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
if (strncmp(uid,uidx,9) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, mpb001.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/* concurrency tuning variables follow: */
   pauze = 10;
   keymax = 50;

   EXEC SQL COMMIT WORK;
/******************** BEGIN TEST0230 ********************/

printf("\n                   TEST0230 \n");
printf(" Reference X3.135-1989 Section 4.16, Transactions     \n");
printf("                   Paragraph Two                  \n");
printf("     - - - - - - - - - - - - - - - - - - -\n\n");

printf (" *** This program is part B of a two-part             \n");
printf (" *** program (A & B) that tests for the concurrency   \n");
printf (" *** of SQL.  Program A inserts the first value into  \n");
printf (" *** a table and waits for Program B.               \n");

/*                       -----Synchronization----- */
P100:
/* pause a little */
   EXEC SQL DELETE FROM MP1_MM2;
   i = 0;
P101:
     EXEC SQL INSERT INTO MP1_MM2 VALUES (:i);
     i = i + 1;
     if (i < pauze)
       goto P101;

   EXEC SQL COMMIT WORK;
/* end of pause */

   i = 0;
   EXEC SQL SELECT COUNT(*)
     INTO    :i
     FROM    MP1_NEXTKEY;
   knum = 0;
   EXEC SQL SELECT KEYNUM, AUTHOR
     INTO    :knum, :auth    
     FROM    MP1_NEXTKEY;

/* are we in sync? */

   if(strncmp(auth,"A",1) != 0 || knum != 1 || i != 1)
      {
        printf("\n Waiting for program MPA001 to start... \n");
        EXEC SQL COMMIT WORK;
        goto P100;
      }

    printf ("\n\n This is Program B; Program A has inserted the ");
    printf ("\n   first value into a table.                  \n\n");
/* YES, we are in sync! */

/*                       -----Initialization----- */
P102:
    code1 = 0;
    knum = 2; 
    printf ("\n MPB001:    keynum = 2  ");
    EXEC SQL INSERT
         INTO MP1_NEXTKEY (KEYNUM,AUTHOR)
         VALUES(2,'B');
   if (SQLCODE != 0)
      code1 = 1; 
   EXEC SQL COMMIT WORK;
   if (SQLCODE != 0)
      code1 = 1;
   if (code1 == 1)
      goto P102;

   oldkey = 2;
   concur = 0;
   keydif = 0;

/*            -----Concurrent Transaction Loop----- */
P110:

/* start table lock */

   EXEC SQL SELECT MAX(KEYNUM)
     INTO :newmax
     FROM MP1_NEXTKEY;

   if (SQLCODE != 0)
      {
        printf ("\n SQLCODE not zero after SELECT MAX(KEYNUM) statement \n");
        printf ("\n SQLCODE = %ld \n", SQLCODE);
        EXEC SQL COMMIT WORK;
        goto P110;
      }

   if (newmax >= keymax)
        goto P120;

   newmax = newmax + 1;

   code1 = 0;
   EXEC SQL INSERT
     INTO MP1_NEXTKEY (KEYNUM,AUTHOR)
     VALUES (:newmax,'B');
   if (SQLCODE != 0)
        code1 = 1;
   EXEC SQL COMMIT WORK;
   if (SQLCODE != 0)
        code1 = 1;
/* end table lock */

if (code1 == 0)
   {
     keydif = newmax - oldkey;
     oldkey = newmax;
     printf ("\n MPB001:    keynum = %ld ", newmax);
   }
if (code1 == 0 && keydif > 1)
   {
     concur = concur + 1;
     printf("      *** B interleaved #%ld ***",concur);
   }

goto P110;

/*                           -----Evaluation----- */
P120:
   EXEC SQL COMMIT WORK;
   EXEC SQL SELECT COUNT(*)
          INTO :i
          FROM MP1_NEXTKEY;
   if (SQLCODE != 0)
      {
        printf("\n Cannot select for MP1_NEXTKEY");
        goto P120;
      }

   EXEC SQL SELECT COUNT(DISTINCT KEYNUM) 
          INTO :ii
          FROM MP1_NEXTKEY;
   if (SQLCODE != 0)
      {
        printf("\n Cannot select for MP1_NEXTKEY!");
        goto P120;
      }

   printf("\n\n The number of rows should be %ld   \n", keymax);
   printf(" The number of distinct keynum values should be %ld \n",keymax);
   printf("\n\n The number of rows = %ld      ", i);
   printf("\n The number of distinct keynum values  = %ld   \n", ii);

   if (concur < 4 && i == ii && ii == keymax)
      {
        printf("\n Insufficient interleaving to demonstrate concurrency!");
        printf("\n Using TEd, decrease variable pauze to start");
        printf("\n MPB001 sooner or increase value of variable keymax");
        printf("\n in both MPA001 and MPB001 to lengthen test.");
        printf("\n  Then RERUN!");
        goto P130;
      }

   if ( i == ii && ii == keymax)
      {
        printf("\n\nmpb001.pc:        *** pass *** ");
        EXEC SQL INSERT INTO HU.TESTREPORT
           VALUES('0230','pass','PC');
      }
   else
      {
        printf("\n\nmpb001.pc:        *** fail *** ");
        EXEC SQL INSERT INTO HU.TESTREPORT
            VALUES('0230','fail','PC');
        errcnt = errcnt + 1;
      }

P130:
   printf("\n\n");
   printf("====================================================\n\n");
 
   EXEC SQL COMMIT WORK;

/******************** END TEST0230 ********************/

exit(errcnt);

}

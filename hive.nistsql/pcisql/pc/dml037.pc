/*  EMBEDDED C (file "DML037.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1987/09/13 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  DML037.PC                                                    */
/*  WRITTEN BY: HU YANPING                                       */
/*                                                               */
/*  THIS PROGRAM TESTS THE USE OF VARIABLE NAMES AS COLUMN NAMES */
/*               AND THE PLACEMENT OF SQL-STYLE COMMENTS         */
/*               WITHIN SQL STATEMENTS.                          */
/*                                                               */
/*  REFERENCES                                                   */
/*        AMERICAN NATIONAL STANDARD database language - SQL     */
/*                          X3.135-1989                          */
/*                                                               */
/*       SR3 of Annexes C, E, F; SR4 of Annex D.                 */
/*       Section 5.3 <token>, <comment> definition               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
          char PNUM[4];
          char EMPNUM[4];
          long HOURS;
          char CITY[16];
          long GRADE;
          char str240[241];
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long SQLCODE;
int errcnt;
/* date_time declaration */
time_t cal;
          long  i;
          long  ii;


main()
{
     strcpy(uid,"HU");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
if (strncmp(uid,uidx,2) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, dml037.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
/******************** BEGIN TEST0202 ********************/

     printf("\n                   TEST0202   \n");
printf("reference X3.135-1989 SR3 of Annexes C,E,F; SR4 of Annex D\n");
printf("    - - - - - - - - - - - - - - - - - - - - - - - - -\n\n");

     EXEC SQL DECLARE X CURSOR
          FOR SELECT EMPNUM,HOURS
              FROM   WORKS
              WHERE  PNUM='P2';
     EXEC SQL OPEN X;
     
     ii = 0;
     for (i=0;i<10;i++)
     {
     EXEC SQL FETCH X INTO :EMPNUM,:HOURS;
     if (SQLCODE == 0)
      {
       ii = i + 1;
       printf("         EMPNUM=%s and HOURS=%ld \n",EMPNUM,HOURS);
      }
     }

     GRADE = 0;
     EXEC SQL SELECT GRADE, CITY
              INTO  :GRADE,:CITY
              FROM   STAFF
              WHERE  EMPNUM = 'E2';

     printf(" GRADE = %ld, CITY = %s \n", GRADE, CITY);
     printf(" ii = %ld,   sqlcode=%ld \n\n", ii,  SQLCODE);
     printf("The answer should be ii=4,  sqlcode = 0 & GRADE = 10.");
     if (ii==4 && SQLCODE == 0 && GRADE == 10)
       {
       printf("\n\n                   *** pass *** ");
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0202','pass','PC');
       }
     else
       {
       printf("\n\n         dml037.pc  *** fail *** ");
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0202','fail','PC');
          errcnt = errcnt + 1;
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;

/******************** END TEST0202 ********************/

/******************** BEGIN TEST0234 ********************/

printf("\n                 TEST0234     \n");
printf("     Reference: Section 5.3 <comment>       \n");
printf("     - - - - - - - - - - - - - - - - - - -\n\n");

EXEC SQL DELETE   -- we empty the table! 
     FROM TEXT240;

EXEC SQL INSERT INTO TEXT240    -- This is the test for the rules
     VALUES                     -- for the placement
    ('SQL-STYLE COMMENTS') --of
     -- SQL-style comments
    ;
             

printf(" After insert the sqlcode = %ld \n", SQLCODE);
i = SQLCODE;

EXEC SQL SELECT * -- There is only one column to select.
         INTO  
         :str240      -- there is only one row in the table
         FROM TEXT240;

printf(" The string is : %s \n", str240); 

EXEC SQL ROLLBACK WORK;

if (i==0 && strncmp(str240,"SQL-STYLE COMMENTS",18)==0)
     {
     printf("\n\n                     *** pass ***");
     printf("\n==================================================");
     EXEC SQL INSERT INTO TESTREPORT
       VALUES('0234','pass','PC');
     }
else
     {
     printf("\n\n           dml037.pc  *** fail ***");
     printf("\n==================================================");
     EXEC SQL INSERT INTO TESTREPORT
       VALUES('0234','fail','PC');
          errcnt = errcnt + 1;
     }

printf("\n\n\n");

EXEC SQL COMMIT WORK;

/******************** END TEST0234 ********************/

     exit(errcnt);

}


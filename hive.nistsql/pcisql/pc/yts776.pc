/*  EMBEDDED C (file "YTS776.PC")  */

/* Copyright 1996 National Computing Centre Limited, */
/* and Computer Logic R&D S.A */
/* on behalf of the CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */



/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1994/12/08                                              */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS776.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  This routine tests DROP SCHEMA - empty schema with RESTRICT  */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    F#38 Schema manipulation                                   */
/*    F#2  Basic Schema Manipulation                             */
/*    F#31 schema definition statement                           */
/*    F#17 multiple schemas per user                             */
/*    F#35 Intermediate information schema                       */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-14                                    */
/*    Added rollback after authid                                */
/*    Fixed SDL transactions                                     */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short co;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts776.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7510 ********************/
flag = 1;

     printf("                  TEST7510 \n");
     printf("   DROP SCHEMA - empty schema with restrict\n");
     printf("References:\n");
     printf("    11.2    <drop schema statement>\n");
     printf("    11.1    <schema definition\n");
     printf("    F#38    schema manipulation\n");
     printf("    F#3     basic schema manipulation\n");
     printf("    F#31    schema definition statement\n");
     printf("    F#17    multiple schemas per user\n");
     printf("    F#35    intermediate information schema\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");


/* Make very sure there is no transaction outstanding */

SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* Create schema */

printf("CREATE SCHEMA MARPLE;\n");
EXEC SQL CREATE SCHEMA MARPLE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* check schema is referenced in SCHEMATA view */

/* initialise host variable */
co = -1;

printf("SELECT COUNT (*) INTO :co \n");
printf("FROM INFORMATION_SCHEMA.SCHEMATA\n");
printf("WHERE SCHEMA_NAME = 'MARPLE'\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.SCHEMATA 
WHERE SCHEMA_NAME = 'MARPLE';
CHCKOK ();
printf("co should be 1; its value is %d\n\n", co);
if (co != 1)
   flag = 0;

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* drop schema restrict - should be successful */

printf("DROP SCHEMA MARPLE RESTRICT\n");
EXEC SQL DROP SCHEMA MARPLE RESTRICT;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* check schema is not referenced in SCHEMATA view */

/* initialise host variable */
co = -1;

printf("SELECT COUNT (*) INTO :co \n");
printf("FROM INFORMATION_SCHEMA.SCHEMATA\n");
printf("WHERE SCHEMA_NAME = 'MARPLE'\n");

EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.SCHEMATA 
WHERE SCHEMA_NAME = 'MARPLE';
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
   flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n     yts776.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7510','pass','PC');
       }
     else
       {
          printf("\n\n     yts776.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7510','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7510 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


/*  EMBEDDED C (file " XTS748.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS748.PC                                                   */
/*  WRITTEN BY: Manolis Megaloikonomou                           */
/*                                                               */
/*  Named constraint in column definition in schema definition.  */ 
/*                                                               */
/*  REFERENCES                                                   */
/*    11.1  -- <schema definition>                               */
/*    11.3  -- <table definition>                                */
/*    11.4  -- <column definition>                               */
/*    11.4  SR.9                                                 */
/*    11.4  LR.2c --   Raised. Entry SQL restriction which       */
/*                prohibited the specification of                */
/*                <constraint name definition>.                  */
/*    10.6  -- <constraint name definition> and                  */
/*                 <constraint attributes>                       */
/*    10.6  SR.1                                                 */
/*    10.6  SR.2                                                 */
/*    10.6  LR.2a -- Raised. Entry SQL restriction which         */
/*                prohibited the specification of                */
/*                <constraint name definition>.                  */
/*    11.7  -- <unique constraint definition>                    */
/*    11.8  -- <referential constraint definition>               */
/*    11.9  -- <check constraint definition>                     */
/*    F#2   -- Basic information schema.                         */
/*    F#1   -- Dynamic SQL.                                      */
/*    F#3   -- Basic schema manipulation.                        */
/*    F#33  -- Constraint tables.                                */
/*    F#31  -- Schema definition.                                */
/*    F#49  -- Constraint management.                            */
/*                                                               */
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 08/12/95                    */
/*         Print timestamp                                       */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*         Include host variable initialisation                  */
/*         Clean-up database at the end of test                  */
/*                                                               */
/*  QA STATUS :                                                  */
/*                                                               */
/*  Revised by DWF 1996-02-15                                    */
/*    Cleanups                                                   */
/*    Removed status checks after cursor definitions             */
/*    Fixed SDL transactions                                     */
/*    Changed long strcpy                                        */
/*    Make variable names 6 chars                                */
/*    Removed field widths from printfs                          */
/*    Initialized vars                                           */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 long coun;
 char cname[30];
 char tname[30];
 char ctype[30];
 char longst[241];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts748.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7048 ********************/
flag = 1;
printf("                  TEST7048 \n");
printf("    Named constraint in column definition in schema definition.\n");
printf(" References:\n");
printf("    11.1  -- <schema definition>\n");
printf("    11.3  -- <table definition>\n");
printf("    11.4  -- <column definition>\n");
printf("    11.4  SR.9\n");
printf("    11.4  LR.2c -- Raised. Entry SQL restriction which\n");
printf("                prohibited the specification of\n");
printf("                <constraint name definition>.\n");
printf("    10.6  -- <constraint name definition> and\n");
printf("             <constraint attributes>\n");
printf("    10.6  SR.1\n");
printf("    10.6  SR.2\n");
printf("    10.6  LR.2a -- Raised. Entry SQL restriction which\n");
printf("                prohibited the specification of\n");
printf("                <constraint name definition>.\n");
printf("    11.7  -- <unique constraint definition>\n");
printf("    11.8  -- <referential constraint definition>\n");
printf("    11.9  -- <check constraint definition>\n");
printf("    F#2   -- Basic information schema.\n");
printf("    F#1   -- Dynamic SQL.\n");
printf("    F#3   -- Basic schema manipulation.\n");
printf("    F#33  -- Constraint tables.\n");
printf("    F#31  -- Schema definition.\n");
printf("    F#49  -- Constraint management.\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Create schema with one table definition */
/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

printf("CREATE SCHEMA T12549PC\n");
printf("CREATE TABLE TEST12549\n");
printf("(TNUM1 NUMERIC(5)\n");
printf(" CONSTRAINT CND12549A NOT NULL,\n");
printf(" TNUM2 NUMERIC(5)\n");
printf(" CONSTRAINT CND12549B UNIQUE,\n");
printf(" TNUM3 NUMERIC(5)\n");
printf(" CONSTRAINT CND12549C CHECK(TNUM3 > 0));\n");
EXEC SQL CREATE SCHEMA T12549PC
         CREATE TABLE TEST12549
         (TNUM1 NUMERIC(5)
          CONSTRAINT CND12549A NOT NULL,
          TNUM2 NUMERIC(5)
          CONSTRAINT CND12549B UNIQUE,
          TNUM3 NUMERIC(5)
          CONSTRAINT CND12549C CHECK(TNUM3 > 0));
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

coun = -1;
printf("SELECT COUNT(*) INTO :coun ");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_SCHEMA = 'T12549PC' AND TABLE_SCHEMA = 'T12549PC';\n");
EXEC SQL SELECT COUNT(*) INTO :coun FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
         WHERE CONSTRAINT_SCHEMA = 'T12549PC' AND TABLE_SCHEMA = 'T12549PC';
CHCKOK();
printf("Count should be 3; its value is %ld\n", coun);
if ( coun != 3 )
   flag = 0;
printf("\n");

printf("DECLARE a CURSOR\n");
printf("FOR SELECT CONSTRAINT_NAME, TABLE_NAME, CONSTRAINT_TYPE\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_SCHEMA = 'T12549PC' AND TABLE_SCHEMA = 'T12549PC'\n");
printf("ORDER BY CONSTRAINT_NAME;\n\n");
EXEC SQL DECLARE a CURSOR
         FOR SELECT CONSTRAINT_NAME, TABLE_NAME, CONSTRAINT_TYPE
         FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
         WHERE CONSTRAINT_SCHEMA = 'T12549PC' AND TABLE_SCHEMA = 'T12549PC'
         ORDER BY CONSTRAINT_NAME;

printf("OPEN a;\n");
EXEC SQL OPEN a;
CHCKOK();
printf("\n");

/* Initialise host variables */
strcpy(cname,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(tname,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(ctype,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("FETCH a INTO :cname, :tname, :ctype;\n");
EXEC SQL FETCH a INTO :cname, :tname, :ctype;
CHCKOK();
printf("cname should be CND12549A; its value is %s\n", cname);
printf("tname should be TEST12549; its value is %s\n", tname);
printf("ctype should be     CHECK; its value is %s\n", ctype);
if (strncmp(cname,"CND12549A",9) != 0 || strncmp(tname,"TEST12549",9) != 0 )
   flag = 0;
if (strncmp(ctype,"CHECK",5) != 0)
   flag = 0;
printf("\n");

/* Initialise host variables */
strcpy(cname,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(tname,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(ctype,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("FETCH a INTO :cname, :tname, :ctype;\n");
EXEC SQL FETCH a INTO :cname, :tname, :ctype;
CHCKOK();
printf("cname should be CND12549B; its value is %s\n", cname);
printf("tname should be TEST12549; its value is %s\n", tname);
printf("ctype should be    UNIQUE; its value is %s\n", ctype);
if (strncmp(cname,"CND12549B",9) != 0 || strncmp(tname,"TEST12549",9) != 0)
   flag = 0;
if (strncmp(ctype,"UNIQUE",6) != 0)
   flag = 0;
printf("\n");

/* Initialise host variables */
strcpy(cname,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(tname,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(ctype,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("FETCH a INTO :cname, :tname, :ctype;\n");
EXEC SQL FETCH a INTO :cname, :tname, :ctype;
CHCKOK();
printf("cname should be CND12549C; its value is %s\n", cname);
printf("tname should be TEST12549; its value is %s\n", tname);
printf("ctype should be     CHECK; its value is %s\n", ctype);
if (strncmp(cname,"CND12549C",9) != 0 || strncmp(tname,"TEST12549",9) != 0)
   flag = 0;
if (strncmp(ctype,"CHECK",5) != 0)
   flag = 0;
printf("\n");

printf("CLOSE a;\n");
EXEC SQL CLOSE a;
CHCKOK();
printf("\n");

     EXEC SQL DELETE FROM CONCATBUF;
     EXEC SQL INSERT INTO CONCATBUF VALUES (
       'CREATE SCHEMA DT12549PC CREATE TABLE TEST12549'              ||
       ' (TNUM1 NUMERIC(5) CONSTRAINT CND12549D UNIQUE,'             ||
       ' TNUM2 NUMERIC(5) CONSTRAINT CND12549E CHECK(TNUM2 > 1000),' ||
       ' TNUM3 NUMERIC(5) CONSTRAINT CND12549F NOT NULL)'
     );
     EXEC SQL SELECT ZZ INTO :longst FROM CONCATBUF;
     printf("longst=\"%s\"\n", longst);

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("EXECUTE IMMEDIATE :longst;\n");
EXEC SQL EXECUTE IMMEDIATE :longst;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

coun = -1;
printf("SELECT COUNT(*) INTO :coun ");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_SCHEMA = 'DT12549PC' ");
printf("AND TABLE_SCHEMA = 'DT12549PC';\n");
EXEC SQL SELECT COUNT(*) INTO :coun FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
         WHERE CONSTRAINT_SCHEMA = 'DT12549PC' AND TABLE_SCHEMA = 'DT12549PC';
CHCKOK();
printf("Count should be 3; its value is %ld\n", coun);
if ( coun != 3 )
   flag = 0;
printf("\n");

printf("DECLARE b CURSOR\n");
printf("FOR SELECT CONSTRAINT_NAME, TABLE_NAME, CONSTRAINT_TYPE\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_SCHEMA = 'DT12549PC'\n");
printf("AND TABLE_SCHEMA = 'DT12549PC'\n");
printf("ORDER BY CONSTRAINT_NAME;\n\n");
EXEC SQL DECLARE b CURSOR
         FOR SELECT CONSTRAINT_NAME, TABLE_NAME, CONSTRAINT_TYPE
         FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
         WHERE CONSTRAINT_SCHEMA = 'DT12549PC' AND TABLE_SCHEMA = 'DT12549PC'
         ORDER BY CONSTRAINT_NAME;

printf("OPEN b;\n");
EXEC SQL OPEN b;
CHCKOK();
printf("\n");

/* Initialise host variables */
strcpy(cname,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(tname,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(ctype,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("FETCH b INTO :cname, :tname, :ctype;\n");
EXEC SQL FETCH b INTO :cname, :tname, :ctype;
CHCKOK();
printf("cname should be CND12549D; its value is %s\n", cname);
printf("tname should be TEST12549; its value is %s\n", tname);
printf("ctype should be    UNIQUE; its value is %s\n", ctype);
if ( strncmp(cname,"CND12549D",9) != 0 || strncmp(tname,"TEST12549",9) != 0 )
   flag = 0;
if ( strncmp(ctype,"UNIQUE",6) != 0)
   flag = 0;
printf("\n");

/* Initialise host variables */
strcpy(cname,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(tname,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(ctype,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("FETCH b INTO :cname, :tname, :ctype;\n");
EXEC SQL FETCH b INTO :cname, :tname, :ctype;
CHCKOK();
printf("cname should be CND12549E; its value is %s\n", cname);
printf("tname should be TEST12549; its value is %s\n", tname);
printf("ctype should be     CHECK; its value is %s\n", ctype);
if (strncmp(cname,"CND12549E",9) != 0 || strncmp(tname,"TEST12549",9) != 0)
   flag = 0;
if (strncmp(ctype,"CHECK",5) != 0)
   flag = 0;
printf("\n");

/* Initialise host variables */
strcpy(cname,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(tname,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy(ctype,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("FETCH b INTO :cname, :tname, :ctype;\n");
EXEC SQL FETCH b INTO :cname, :tname, :ctype;
CHCKOK();
printf("cname should be CND12549F; its value is %s\n", cname);
printf("tname should be TEST12549; its value is %s\n", tname);
printf("ctype should be     CHECK; its value is %s\n", ctype);
if (strncmp(cname,"CND12549F",9) != 0 || strncmp(tname,"TEST12549",9) != 0)
   flag = 0;
if (strncmp(ctype,"CHECK",5) != 0)
   flag = 0;
printf("\n");

printf("CLOSE b;\n");
EXEC SQL CLOSE b;
CHCKOK();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* Clean up database */
printf("DROP SCHEMA T12549PC CASCADE;\n");
EXEC SQL DROP SCHEMA T12549PC CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DROP SCHEMA DT12549PC CASCADE;\n");
EXEC SQL DROP SCHEMA DT12549PC CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

  /* Now record results */

     if ( flag == 1 )
       {
          printf("\n\n       xts748.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7048','pass','PC');
       }
     else
       {
          printf("\n\n       xts748.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7048','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;

/******************** END TEST7048 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

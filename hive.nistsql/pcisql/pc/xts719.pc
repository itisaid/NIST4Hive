/*  EMBEDDED C (file " XTS719.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS719.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  Access to KEY_COLUMN_USAGE view                              */ 
/*                                                               */
/*  REFERENCES                                                   */
/*    21.2.16 -- KEY_COLUMN_USAGE view                           */
/*    21.3.14 -- KEY_COLUMN_USAGE base table.                    */
/*    F#1     -- Dynamic SQL                                     */
/*    F#2     -- Basic information schema                        */
/*    F#3     -- Basic schema manipulation                       */
/*    F#34    -- Usage tables                                    */
/*                                                               */
/*  DATE LAST ALTERED  14/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 01/12/95:                   */
/*      Change flag from int to long                             */
/*      DROP TABLE TAB719a first instead of TAB719b              */
/*                                                               */
/*  QA Status: QA check                                          */
/*                                                               */
/* Revised by DWF 1/24/96                                        */
/*   Fixed bogus dynamic SQL                                     */
/*   Fixed SDL transactions                                      */
/*   Fixed checks for wrong identifiers in information schema    */
/*   Fixed string length problems                                */
/*   Fixed bad schema references                                 */
/*   Removed status checks after cursor definition               */
/*   Fixed expected results, tightened pass criteria slightly    */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION; 
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 long counok;
 char sqlcmd[241];
EXEC SQL END DECLARE SECTION; 
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
strcpy(uid,"CTS4              ");
AUTHID(uid); 
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK; 
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts719.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run: %s\n", ctime(&cal));

/******************** BEGIN TEST7019 ********************/

 flag = 1;
 printf("                  TEST7019\n");
 printf("    Access to KEY_COLUMN_USAGE view \n");
 printf(" References \n");
 printf("    21.2.16 -- KEY_COLUMN_USAGE view \n");
 printf("    21.3.14 -- KEY_COLUMN_USAGE base table\n");
 printf("    F#2     -- Basic information schema \n");
 printf("    F#3     -- Basic schema manipulation\n");
 printf("    F#34    -- Usage tables         \n");
 printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* initialise host variable */
/* expected value zero - initialise to a value <> 0 */
counok = 9;

/* Access the KEY_COLUMN_USAGE_VIEW */
printf("SELECT COUNT(*) INTO :counok\n");
printf("FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\n");
printf("WHERE CONSTRAINT_SCHEMA = 'CTS4'; \n");
EXEC SQL SELECT COUNT(*) INTO :counok
         FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
         WHERE CONSTRAINT_SCHEMA = 'CTS4';
CHCKOK(); 
printf("counok should be 0; its value is : %ld\n",counok);
if (counok != 0)
  flag = 0;
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK; 
CHCKOK();
printf("\n");

/* Create table with keys in two columns */
printf("CREATE TABLE TAB719a \n");
printf(" (COLNUM1 NUMERIC(5) PRIMARY KEY,\n");
printf("  COLNUM2 NUMERIC(7) UNIQUE,\n");
printf("  COLSTR1 CHAR(10),\n");
printf("  COLSTR2 CHAR(5));\n");
EXEC SQL CREATE TABLE TAB719a 
         (COLNUM1 NUMERIC(5) PRIMARY KEY,
          COLNUM2 NUMERIC(7) UNIQUE,
          COLSTR1 CHAR(10),
          COLSTR2 CHAR(5)); 
CHCKOK();  
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK; 
CHCKOK();
printf("\n");

/* Check for correct creation of table and Access to KEY_COLUMN_USAGE view */
counok = 0;
printf("SELECT COUNT(COLUMN_NAME) INTO :counok\n");
printf("FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\n");
printf("WHERE TABLE_SCHEMA = 'CTS4' AND TABLE_NAME = 'TAB719A';\n");
EXEC SQL SELECT COUNT(COLUMN_NAME) INTO :counok
         FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
         WHERE TABLE_SCHEMA = 'CTS4' AND TABLE_NAME = 'TAB719A'; 
CHCKOK();
printf("Counok should be 2; it is %ld\n",counok); 
if (counok != 2)
    flag = 0;
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK; 
CHCKOK();
printf("\n");

/* Create second table */
printf("CREATE TABLE TAB719b\n");
printf("( CNUM1 NUMERIC(5),\n");
printf("  CNUM2 NUMERIC(7),\n"); 
printf("  CSTR1 CHAR(10) UNIQUE NOT NULL,\n");
printf("  CSTR2 CHAR(5),\n");
printf("  FOREIGN KEY (CNUM1) REFERENCES TAB719a(COLNUM1));\n");
EXEC SQL CREATE TABLE TAB719b
         (CNUM1 NUMERIC(5),
          CNUM2 NUMERIC(7), 
          CSTR1 CHAR(10) UNIQUE NOT NULL,
          CSTR2 CHAR(5),
         FOREIGN KEY (CNUM1) REFERENCES TAB719a(COLNUM1)); 
CHCKOK();  
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;  
CHCKOK();
printf("\n");

/* Returned columns:  TAB719A.COLNUM1, TAB719A.COLNUM2, */
/* TAB719B.CSTR1, TAB719B.CNUM1 */
/* (KEY_COLUMN_USAGE contains only the referencing columns in a */
/* foreign key constraint) */

/* Check for creation of 2nd table and access to KEY_COLUMN_USAGE view */
printf("SELECT COUNT(*) INTO :counok\n");
printf("FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\n");
printf("WHERE TABLE_SCHEMA = 'CTS4';\n");
counok = 0;
EXEC SQL SELECT COUNT(*) INTO :counok
         FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
         WHERE TABLE_SCHEMA = 'CTS4';
CHCKOK();
printf("Counok should be 4; it is %ld\n",counok); 
if (counok != 4)
    flag = 0;
printf("\n");

counok = 0;
printf("SELECT COUNT(*) INTO :counok\n");
printf("         FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\n");
printf("         WHERE TABLE_SCHEMA = 'CTS4'\n");
printf("         AND TABLE_NAME = 'TAB719A'\n");
printf("         AND COLUMN_NAME = 'COLNUM1';\n");
EXEC SQL SELECT COUNT(*) INTO :counok
         FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
         WHERE TABLE_SCHEMA = 'CTS4'
         AND TABLE_NAME = 'TAB719A'
         AND COLUMN_NAME = 'COLNUM1';
CHCKOK();
printf("Counok should be 1; it is %ld\n",counok); 
if (counok != 1)
    flag = 0;
printf("\n");

counok = 0;
printf("SELECT COUNT(*) INTO :counok\n");
printf("         FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\n");
printf("         WHERE TABLE_SCHEMA = 'CTS4'\n");
printf("         AND TABLE_NAME = 'TAB719B'\n");
printf("         AND COLUMN_NAME = 'CNUM1';\n");
EXEC SQL SELECT COUNT(*) INTO :counok
         FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
         WHERE TABLE_SCHEMA = 'CTS4'
         AND TABLE_NAME = 'TAB719B'
         AND COLUMN_NAME = 'CNUM1';
CHCKOK();
printf("Counok should be 1; it is %ld\n",counok); 
if (counok != 1)
    flag = 0;
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK; 
CHCKOK();
printf("\n");

/* DROP TABLE TAB719a */
printf("DROP TABLE TAB719a CASCADE;\n");
EXEC SQL DROP TABLE TAB719a CASCADE; 
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK; 
CHCKOK();
printf("\n");

/* Use Dynamic SQL with a preparable statement */
/* and access the key column usage view        */  
EXEC SQL DELETE FROM CTS1.CONCATBUF; 
EXEC SQL INSERT INTO CTS1.CONCATBUF VALUES(
         'SELECT COUNT(*)' ||
         '  FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE' ||
         '  WHERE TABLE_SCHEMA = ''CTS4'''); 
EXEC SQL SELECT ZZ INTO :sqlcmd FROM CTS1.CONCATBUF; 
printf("sqlcmd = \"%s\"\n",sqlcmd);

printf("PREPARE S FROM :sqlcmd;\n");  
EXEC SQL PREPARE S FROM :sqlcmd; 
CHCKOK();
printf("\n");

printf("DECLARE NICK1 CURSOR FOR S;\n\n");
EXEC SQL DECLARE NICK1 CURSOR FOR S; 

printf("OPEN NICK1;\n");
EXEC SQL OPEN NICK1;  
CHCKOK();
printf("\n");

counok = 0;
printf("FETCH NICK1 INTO :counok;\n");
EXEC SQL FETCH NICK1 INTO :counok; 
CHCKOK();
printf("counok should be 1; its value is %ld\n",counok);
if (counok != 1)
   flag = 0;
printf("\n");

printf("CLOSE NICK1;\n");
EXEC SQL CLOSE NICK1; 
CHCKOK();
printf("\n");
 
printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK; 
CHCKOK();
printf("\n");
 
printf("DROP TABLE TAB719b CASCADE;\n");
EXEC SQL DROP TABLE TAB719b CASCADE; 
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK; 
CHCKOK();
printf("\n");

 /* record results */

     if ( flag == 1 )
       {
          printf("\n\n       xts719.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7019','pass','PC'); 
       }
     else
       {
          printf("\n\n       xts719.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7019','fail','PC'); 
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK; 

/******************** END TEST7019 *********************/

     exit(errcnt); 
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

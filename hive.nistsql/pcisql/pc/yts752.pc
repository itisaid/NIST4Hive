/*  EMBEDDED C (file "YTS752.PC")  */

/* Copyright 1996 National Computing Centre Limited, */
/* and Computer Logic R&D S.A */
/* on behalf of the CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS752.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  CREATE DOMAIN-SQL procedure statement with constraint        */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    11.21     SR.1                                             */
/*    11.21     GR.3                                             */
/*    11.3      <table definition>                               */
/*    11.4      <column definition>                              */
/*    10.6 GR.4 integrity constraint violation                   */
/*    11.9      <check constraint definition>                    */
/*    F#25      Domain definition                                */
/*    F#3       Basic schema manipulation                        */
/*                                                               */
/*  DATE LAST ALTERED  CTS5 Hand-over Test                       */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-01                                    */
/*    Removed EXEC SQL from inside printfs                       */
/*    Cleanup                                                    */
/*    Corrected printouts                                        */
/*    Added rollback after authid                                */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
short host1;  
short host2;
long host3; 
short host4;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;
long     flag2;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts752.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7502 ********************/
flag = 1;
flag2 = 1;

     printf("                  TEST7502 \n");
     printf("   CREATE DOMAIN-SQL proc statement with constraint\n");
     printf("References:\n");
     printf("    11.21    SR.1\n");
     printf("    11.21    GR.3\n");
     printf("    11.3     <table definition>\n");
     printf("    11.4     <column definition>\n");
     printf("    10.6     GR.4 integrity constraint violation\n");
     printf("    11.9     <check constraint definition>\n");
     printf("    F#25     Domain definition\n");
     printf("    F#3      Basic schema manipulation\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* initialise all variables */
printf("host1 = 6;\n");
printf("host2 = 3;\n");
printf("host3 = 123456789;\n");
printf("host4 = 100;\n\n");
host1 = 6;
host2 = 3;
host3 = 123456789;
host4 = 100;

/* create domain as SMALLINT */
     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("CREATE DOMAIN sintdom AS SMALLINT\n");
printf("CHECK (VALUE > 5)\n");
printf("CHECK (VALUE < 24000);\n");
EXEC SQL CREATE DOMAIN sintdom AS SMALLINT
 CHECK (VALUE > 5)
 CHECK (VALUE < 24000);

CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* create table shorttab */
     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("CREATE TABLE shorttab\n");
printf("(keycol integer,\n");
printf(" domcol sintdom)\n");
EXEC SQL CREATE TABLE shorttab
(keycol integer,
domcol sintdom);

CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* insert row into shorttab - should succeed */    
    SQLCODE = -1;
    strcpy (SQLSTATE, "xxxxx");

printf("INSERT INTO shorttab VALUES (1,:host1);\n");
EXEC SQL INSERT INTO shorttab VALUES (1,:host1);
CHCKOK ();
printf("\n");

/* attempt to insert row into shorttab - should fail */
    SQLCODE = -1;
    strcpy (SQLSTATE, "xxxxx");

printf("INSERT INTO shorttab VALUES (2,:host2);\n");
EXEC SQL INSERT INTO shorttab VALUES (2,:host2);

/* That should generate an integrity constraint violation */
/* which is SQLSTATE 23000 */

printf("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;

SQLSTATE[5] = '\0';
printf("SQLSTATE should be 23000; its value is %s\n\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "23000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "23000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");

/* attempt to insert row into shorttab - should fail */
    SQLCODE = -1;
    strcpy (SQLSTATE, "xxxxx");

printf("INSERT INTO shorttab VALUES (3, :host3);\n");
EXEC SQL INSERT INTO shorttab VALUES (3, :host3);

/* That should generate an integrity constraint violation */
/* which is SQLSTATE 23000 or */
/* a numeric value out of range violation */
/* which is SQLSTATE 22003 */

printf("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;
printf("SQLSTATE should be 22003 or 23000\n");
printf("its value is %s\n\n", SQLSTATE);
if (strncmp (SQLSTATE, "22003", 5) == 0)
  flag2 = 0;

if (flag2 != 0)
{
 NOSUBCLASS();
 if (strncmp(NORMSQ,"23000",5) != 0)
    flag = 0;
 if (strncmp (NORMSQ, "23000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
   printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

/* insert fourth value - should succeed */
    SQLCODE = -1;
    strcpy (SQLSTATE, "xxxxx");

printf("INSERT INTO shorttab VALUES (4,:host4);\n");
EXEC SQL INSERT INTO shorttab VALUES (4,:host4);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* reinitialise host variables */

host1 = 0;
host2 = 0;
host3 = 0;
host4 = 0;

/* check two rows are present in shorttab */
SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

printf("SELECT COUNT(*) INTO :host1 FROM shorttab\n");
EXEC SQL SELECT COUNT(*) INTO :host1 FROM shorttab;
CHCKOK ();
printf("host1 should be 2; its value is %d\n\n", host1);
if (host1 != 2)
   flag = 0;

/* retrieve first row inserted correctly */
SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

printf("SELECT domcol INTO :host2 FROM shorttab\n");
printf("WHERE keycol = 1;\n");
EXEC SQL SELECT domcol INTO :host2 FROM shorttab
WHERE keycol = 1;
CHCKOK ();
printf("host2 should be 6; its value is %d\n\n", host2);
if (host2 != 6)
   flag = 0;

/* return second row inserted correctly */
SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

printf("SELECT domcol INTO :host3 FROM shorttab\n");
printf("WHERE keycol = 4\n");
EXEC SQL SELECT domcol INTO :host3 FROM shorttab
WHERE keycol = 4;
CHCKOK ();
printf("host3 should be 100; its value is %ld\n\n", host3);
if (host3 != 100)
   flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP TABLE shorttab CASCADE;\n");
EXEC SQL DROP TABLE shorttab CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("DROP DOMAIN sintdom CASCADE;\n");
EXEC SQL DROP DOMAIN sintdom CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts752.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7502','pass','PC');
       }
     else
       {
          printf("\n\n       yts752.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7502','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7502 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


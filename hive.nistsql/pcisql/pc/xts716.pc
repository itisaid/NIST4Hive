/*  EMBEDDED C (file " XTS716.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS716.PC                                                   */
/*  WRITTEN  BY: Manolis Megaloikonomou                          */
/*  REVIEWED BY: Nickos  Backalidis                              */
/*                                                               */
/*  SET SESSION AUTHORIZATION to current auth-id.                */
/*                                                               */
/*  REFERENCES                                                   */
/*    16.4  -- <set session authorization identifier statement>  */
/*    16.4  GR.1                                                 */
/*    16.4  LR.2a -- Raised. Entry SQL restriction that          */
/*                   prohibits the use of any <set session       */
/*                   authorization identifier statement>.        */
/*     6.2  -- <value specification> and <target specification>  */
/*     6.2  SR.3                                                 */
/*     6.2  GR.9                                                 */
/*     6.2  LR.2c -- Raised. Entry SQL restriction which         */
/*                   prohibits the specification of CURRENT_USER,*/
/*                   SYSTEM_USER or SESSION_USER in a            */
/*                   <general value specification>.              */
/*     F#1  -- Dynamic SQL.                                      */
/*    F#32  -- User authorization.                               */
/*                                                               */
/*  DATE LAST ALTERED  14/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 01/12/95                    */
/*                                                               */
/*  QA Status: QA Check                                          */
/*                                                               */
/*  Revised by DWF 1/23/96                                       */
/*    Removed status code checks after cursor definition.        */
/*    Removed violations of 16.4 GR.1.                           */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;  
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 long coun;
 char xuser[21];
 char sqlsm2[32];
EXEC SQL END DECLARE SECTION;  
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long  flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);  
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;  
if (strncmp(uid,uidx,4) != 0)
   {
      printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
      exit(99);  
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts716.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run:   %s\n", ctime(&cal));

/******************** BEGIN TEST7016 ********************/

flag = 1;
printf("                  TEST7016 \n");
printf("    SET SESSION AUTHORIZATION to current auth-id.\n");
printf(" References:\n");
printf("    16.4 -- <set session authorization identifier statement>\n");
printf("    16.4 GR.1\n");
printf("    16.4 LR.2a -- Raised. Entry SQL restriction that\n");
printf("                  prohibits the use of any <set session\n");
printf("                  authorization identifier statement>.\n");
printf("     6.2 -- <value specification> and <target specification>\n");
printf("     6.2 SR.3\n");
printf("     6.2 GR.9\n");
printf("     6.2 LR.2c -- Raised. Entry SQL restriction which\n");
printf("                  prohibits the specification of CURRENT_USER,\n");
printf("                  SYSTEM_USER or SESSION_USER in a\n");
printf("                  <general value specification>.\n");
printf("     F#1 -- Dynamic SQL.\n");
printf("    F#32 -- User authorization.\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Preserve the original authorization identifier CTS1 into*/
/* a host variable with padded leading and trailing spaces.*/
strcpy(xuser, "      CTS1          ");
printf ("xuser = '%s'\n\n", xuser);

/* Initialise error reporting variables */
     SQLCODE = -1;
     strcpy(SQLSTATE, "xxxxx");

/* Ensure that the current authorization has access rights */
/* to table STAFF.                                         */
coun = 99;
printf("SELECT COUNT(*) INTO :coun FROM CTS1.STAFF;\n");
EXEC SQL SELECT COUNT(*) INTO :coun FROM CTS1.STAFF;  
CHCKOK();
printf("Coun should be 5; its value is %ld\n",coun);
if ( coun != 5 )
   flag = 0;
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;  
CHCKOK();
printf("\n");

/* Change the session authorization identifier to the  */
/* value of host variable xuser                        */
printf("SET SESSION AUTHORIZATION :xuser;\n");
EXEC SQL SET SESSION AUTHORIZATION :xuser;  
CHCKOK();
printf("\n");

/* Check for SELECT access rights in STAFF table */
coun = 99;
printf("SELECT COUNT(*) INTO :coun FROM CTS1.STAFF;\n");
EXEC SQL SELECT COUNT(*) INTO :coun FROM CTS1.STAFF;  
CHCKOK();
printf("Coun should be 5; its value is %ld\n",coun);
if ( coun != 5 )
   flag = 0;
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;  
CHCKOK();
printf("\n");

printf("SET SESSION AUTHORIZATION USER;\n");
EXEC SQL SET SESSION AUTHORIZATION USER;  
CHCKOK();
printf("\n");

coun = 99;
strcpy(sqlsm2,"SELECT COUNT(*) FROM CTS1.STAFF");
printf("sqlsm2 = \"%s\"\n", sqlsm2);
printf("PREPARE S FROM :sqlsm2;\n");
EXEC SQL PREPARE S FROM :sqlsm2;
CHCKOK();
printf("\n");

printf("DECLARE ALPHA CURSOR FOR S;\n\n");
EXEC SQL DECLARE ALPHA CURSOR FOR S;  

printf("OPEN ALPHA;\n");
EXEC SQL OPEN ALPHA;  
CHCKOK();
printf("\n");

printf("FETCH ALPHA INTO :coun;\n");
EXEC SQL FETCH ALPHA INTO :coun;  
CHCKOK();
printf("Coun should be 5; its value is %ld\n",coun);
if ( coun != 5 )
   flag = 0;
printf("\n");

printf("CLOSE ALPHA;\n");
EXEC SQL CLOSE ALPHA;  
CHCKOK();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;  
CHCKOK();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       xts716.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7016','pass','PC');  
       }
     else
       {
          printf("\n\n       xts716.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7016','fail','PC');  
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

       EXEC SQL COMMIT WORK;   
/******************** END TEST7016 *********************/

       exit(errcnt);   
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

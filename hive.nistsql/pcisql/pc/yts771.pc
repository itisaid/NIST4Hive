/*  EMBEDDED C (file "YTS771.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */ 
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS771.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  This routine tests Access to CHARACTER_SETS view             */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    21.2.18     CHARACTER_SETS view                            */
/*    21.3.23 DE5 CHARACTER_SETS base table                      */
/*    F#35        Intermediate information schema                */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-13                                    */
/*    Added rollback after authid                                */
/*    Removed vendor extensions                                  */
/*    More output                                                */
/*    Removed EXEC SQL from inside printf                        */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short co;
char dcc[129];
char dcs[129];
char dcn[129];
char csc[129];
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
short i;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts771.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7553 ********************/
flag = 1;

     printf("                  TEST7553 \n");
     printf("   Access to CHARACTER_SETS view\n");
     printf("References:\n");
     printf("    21.2.18     CHARACTER_SETS view\n");
     printf("    21.3.23 DE5 CHARACTER_SETS base table\n");
     printf("    F#35        Intermediate information schema\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

SQLCODE = -1;
strcpy (SQLSTATE, "xxxxx");

/* initialise variables */
co = 99;
for (i = 0; i < 128; i++)
{
  dcc[i] = 'x';
  dcs[i] = 'x';
  dcn[i] = 'x';
  csc[i] = 'x';
}

  dcc[128] = '\0';
  dcs[128] = '\0';
  dcn[128] = '\0';
  csc[128] = '\0';

/* check INFORMATION_SCHEMA is referenced in CHARACTER SETS */

printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.CHARACTER_SETS\n");
printf("WHERE CHARACTER_SET_SCHEMA = 'INFORMATION_SCHEMA'\n");
printf("AND CHARACTER_SET_NAME = 'SQL_TEXT';\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.CHARACTER_SETS
WHERE CHARACTER_SET_SCHEMA = 'INFORMATION_SCHEMA'
AND CHARACTER_SET_NAME = 'SQL_TEXT';
CHCKOK ();
printf("co should be 1; its value is %d\n\n", co);
if (co != 1)
   flag = 0;

printf("SELECT CHARACTER_SET_CATALOG, DEFAULT_COLLATE_CATALOG\n");
printf("DEFAULT_COLLATE_SCHEMA, DEFAULT_COLLATE_NAME\n");
printf("INTO :csc, :dcc, :dcs, :dcn\n");
printf("FROM INFORMATION_SCHEMA.CHARACTER_SETS\n");
printf("WHERE CHARACTER_SET_SCHEMA = 'INFORMATION_SCHEMA'\n");
printf("AND CHARACTER_SET_NAME = 'SQL_TEXT';\n");
EXEC SQL SELECT CHARACTER_SET_CATALOG,
DEFAULT_COLLATE_CATALOG,
DEFAULT_COLLATE_SCHEMA, DEFAULT_COLLATE_NAME
INTO :csc, :dcc, :dcs, :dcn
FROM INFORMATION_SCHEMA.CHARACTER_SETS
WHERE CHARACTER_SET_SCHEMA = 'INFORMATION_SCHEMA'
AND CHARACTER_SET_NAME = 'SQL_TEXT';
CHCKOK ();

/* check values returned were as expected */

printf ("csc and dcc should be the same --\n");
if (strcmp (csc, dcc) != 0)
{
   printf("   But they're not.\n");
   printf("csc is %s\n", csc);
   printf("dcc is %s\n", dcc);
   flag = 0;
}
else
{
  printf ("   Indeed they are.\n");
}

printf ("dcs should be INFORMATION_SCHEMA; its value is %s\n", dcs);
if (strncmp(dcs,"INFORMATION_SCHEMA",18) != 0)
    flag = 0;

printf ("dcn should be SQL_TEXT; its value is %s\n\n", dcn);
if (strncmp(dcn,"SQL_TEXT",8) != 0)
    flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts771.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7553','pass','PC');
       }
     else
       {
          printf("\n\n       yts771.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7553','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7553 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


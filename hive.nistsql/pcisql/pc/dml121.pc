/*  EMBEDDED C (file "DML121.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1994/6/7 EMBEDDED C LANGUAGE                            */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  DML121.PC                                                    */
/*  WRITTEN BY:  David W. Flater                                 */
/*                                                               */
/*  This routine tests FIPS features 22 and 24 and datetime      */
/*  errata.  This is the non-dynamic version of DML122.PC.       */
/*                                                               */
/*  REFERENCES                                                   */
/*    FIPS PUB 127-2 14.1 Transitional SQL                       */
/*    ANSI SQL-1992                                              */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
long int1;
float flt1;
long alice;
long betty;
long don;
char name[21];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"FLATER            ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, dml121.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0649 ********************/
flag = 1;

     printf("                  TEST0649 \n");
     printf("     Feature 22, Explicit defaults (static)\n");
     printf("References:\n");
     printf("    FIPS PUB 127-2 14.1 Transitional SQL feature 22\n");
     printf("    13.8 LR.2.d -- DEFAULT VALUES in an <insert statement>\n");
     printf("    7.1 LR.2.a -- DEFAULT in a <row value constructor>\n");
     printf("    11.5 LR.2.a -- various things in a <default option>\n");
     printf("    13.9 LR.2.c -- DEFAULT in update statements\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* This feature was tested for datetimes in TEST0631 */

/* Feature 22 in 127-2 seems to imply that SYSTEM_USER and */
/* SESSION_USER would be legal in a <default option>, but  */
/* this is obviously not the intention since Intermediate  */
/* feature 32 is where they are made legal in a <general   */
/* value specification>.                                   */

printf("CREATE TABLE SSSLOG (\n");
printf("   ENTERED_BY CHAR (128) DEFAULT USER,\n");
printf("   SEVERITY INT DEFAULT 1,\n");
printf("   PROBLEM CHAR (40) DEFAULT NULL);\n");
EXEC SQL CREATE TABLE SSSLOG (
   ENTERED_BY CHAR (128) DEFAULT USER,
   SEVERITY INT DEFAULT 1,
   PROBLEM CHAR (40) DEFAULT NULL);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;

CHCKOK ();
printf("\n");

printf("INSERT INTO SSSLOG DEFAULT VALUES;\n");
EXEC SQL INSERT INTO SSSLOG DEFAULT VALUES;
CHCKOK ();
printf("\n");

printf("INSERT INTO SSSLOG VALUES\n");
printf("  (DEFAULT, DEFAULT, DEFAULT);\n");
EXEC SQL INSERT INTO SSSLOG VALUES
  (DEFAULT, DEFAULT, DEFAULT);
CHCKOK ();
printf("\n");

printf("INSERT INTO SSSLOG VALUES\n");
printf("  (DEFAULT, 3, 'Cross-linked inode');\n");
EXEC SQL INSERT INTO SSSLOG VALUES
  (DEFAULT, 3, 'Cross-linked inode');
CHCKOK ();
printf("\n");

printf("INSERT INTO SSSLOG VALUES\n");
printf("  ('system', DEFAULT, 'Freed a free frag');\n");
EXEC SQL INSERT INTO SSSLOG VALUES
  ('system', DEFAULT, 'Freed a free frag');
CHCKOK ();
printf("\n");

printf("INSERT INTO SSSLOG VALUES\n");
printf("  ('nobody', 6, DEFAULT);\n");
EXEC SQL INSERT INTO SSSLOG VALUES
  ('nobody', 6, DEFAULT);
CHCKOK ();
printf("\n");

/* Cross-linked inodes are _nasty_ */

printf("UPDATE SSSLOG SET SEVERITY = DEFAULT\n");
printf("  WHERE PROBLEM LIKE '%%inode%%';\n");
EXEC SQL UPDATE SSSLOG SET SEVERITY = DEFAULT
  WHERE PROBLEM LIKE '%inode%';
CHCKOK ();
printf("\n");

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM SSSLOG WHERE\n");
printf("  ENTERED_BY = 'FLATER' AND SEVERITY = 1\n");
printf("  AND PROBLEM IS NULL;\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM SSSLOG WHERE
  ENTERED_BY = 'FLATER' AND SEVERITY = 1
  AND PROBLEM IS NULL;
CHCKOK ();
printf ("int1 should be 2; its value is %ld\n\n", int1);
if (int1 != 2)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM SSSLOG WHERE\n");
printf("  ENTERED_BY = 'FLATER' AND SEVERITY = 1\n");
printf("  AND PROBLEM = 'Cross-linked inode';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM SSSLOG WHERE
  ENTERED_BY = 'FLATER' AND SEVERITY = 1
  AND PROBLEM = 'Cross-linked inode';
CHCKOK ();
printf ("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM SSSLOG WHERE\n");
printf("  ENTERED_BY = 'system' AND SEVERITY = 1\n");
printf("  AND PROBLEM = 'Freed a free frag';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM SSSLOG WHERE
  ENTERED_BY = 'system' AND SEVERITY = 1
  AND PROBLEM = 'Freed a free frag';
CHCKOK ();
printf ("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM SSSLOG WHERE\n");
printf("  ENTERED_BY = 'nobody' AND SEVERITY = 6\n");
printf("  AND PROBLEM IS NULL;\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM SSSLOG WHERE
  ENTERED_BY = 'nobody' AND SEVERITY = 6
  AND PROBLEM IS NULL;
CHCKOK ();
printf ("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

printf ("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;

CHCKOK ();
printf("\n");

printf("DROP TABLE SSSLOG CASCADE;\n");
EXEC SQL DROP TABLE SSSLOG CASCADE;

CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;

CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0649','pass','PC');
       }
     else
       {
          printf("\n\n       dml121.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0649','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0649 *********************/
/******************** BEGIN TEST0651 ********************/
flag = 1;

     printf("                  TEST0651 \n");
     printf("     Feature 24, Keyword relaxations (static)\n");
     printf("References:\n");
     printf("    FIPS PUB 127-2 14.1 Transitional SQL feature 24\n");
     printf("    6.3 LR.2.b -- AS <correlation name>\n");
     printf("    11.36 LR.2.a -- TABLE <table name> with GRANT\n");
     printf("    13.3 LR.2.b -- FETCH FROM <cursor name>\n");
     printf("    14.3 LR.2.a -- COMMIT;\n");
     printf("    14.4 LR.2.a -- ROLLBACK;\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* Designers are verbose! */

printf("CREATE VIEW VERBOSE_PEOPLE AS\n");
printf("  SELECT EMPNAME FROM HU.STAFF AS EMPLOYEES_OF_HU\n");
printf("  WHERE EMPLOYEES_OF_HU.EMPNUM IN\n");
printf("  (SELECT EMPNUM FROM HU.PROJ AS HUPROJ, HU.WORKS\n");
printf("  WHERE PTYPE = 'Design'\n");
printf("  AND HUPROJ.PNUM = HU.WORKS.PNUM);\n");
EXEC SQL CREATE VIEW VERBOSE_PEOPLE AS
  SELECT EMPNAME FROM HU.STAFF AS EMPLOYEES_OF_HU
  WHERE EMPLOYEES_OF_HU.EMPNUM IN
  (SELECT EMPNUM FROM HU.PROJ AS HUPROJ, HU.WORKS
  WHERE PTYPE = 'Design'
  AND HUPROJ.PNUM = HU.WORKS.PNUM);
CHCKOK ();
printf("\n");

printf("COMMIT;\n");
EXEC SQL COMMIT;
CHCKOK ();
printf("\n");

/* Saying 'GRANT SELECT ON TABLE VERBOSE_PEOPLE' when     */
/* VERBOSE_PEOPLE is a view is dubious practice, but it   */
/* serves to emphasize the fact that the optional keyword */
/* has no semantics whatsoever and should be totally      */
/* ignored.                                               */

printf("GRANT SELECT ON TABLE VERBOSE_PEOPLE TO PUBLIC;\n");
EXEC SQL GRANT SELECT ON TABLE VERBOSE_PEOPLE TO PUBLIC;
CHCKOK ();
printf("\n");

printf("COMMIT;\n");
EXEC SQL COMMIT;
CHCKOK ();
printf("\n");

alice = 0;
betty = 0;
don = 0;

printf("DECLARE BEACH_PARTY CURSOR FOR\n");
printf("  SELECT EMPNAME AS NAAM FROM VERBOSE_PEOPLE;\n");
EXEC SQL DECLARE BEACH_PARTY CURSOR FOR
  SELECT EMPNAME AS NAAM FROM VERBOSE_PEOPLE;

printf("\n");

printf("OPEN BEACH_PARTY;\n");
EXEC SQL OPEN BEACH_PARTY;

CHCKOK ();
printf("\n");

strcpy (name, "xxxxxxxxxxxxxxxxxxxx");
printf ("We ought to get Alice, Betty, and Don.\n\n");

P199:
printf("FETCH FROM BEACH_PARTY INTO :name;\n");
EXEC SQL FETCH FROM BEACH_PARTY INTO :name;
name[20] = '\0';
printf ("name is '%s'\n", name);
if (SQLCODE < 0)
{
  CHCKOK ();
  printf("\n");
  goto P198;
}
if (SQLCODE > 0)
  goto P197;
CHCKOK ();
printf("\n");
if (strncmp (name, "Alice", 5) == 0)
{
  alice = alice + 1;
  goto P199;
}
if (strncmp (name, "Betty", 5) == 0)
{
  betty = betty + 1;
  goto P199;
}
if (strncmp (name, "Don", 3) == 0)
{
  don = don + 1;
  goto P199;
}
flag = 0;
goto P199;

P197:
printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
SQLSTATE[5] = '\0';
printf ("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (SQLCODE != 100 || strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf ("\n");

P198:
if (alice != 1 || betty != 1 || don != 1)
  flag = 0;

printf("CLOSE BEACH_PARTY;\n");
EXEC SQL CLOSE BEACH_PARTY;
CHCKOK ();
printf("\n");

printf("ROLLBACK;\n");
EXEC SQL ROLLBACK;

CHCKOK ();
printf("\n");

printf("DROP VIEW VERBOSE_PEOPLE CASCADE;\n");
EXEC SQL DROP VIEW VERBOSE_PEOPLE CASCADE;

CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;

CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0651','pass','PC');
       }
     else
       {
          printf("\n\n       dml121.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0651','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0651 *********************/
/******************** BEGIN TEST0661 ********************/
flag = 1;

     printf("                  TEST0661 \n");
     printf("     Errata:  datetime casting (static)\n");
     printf("References:\n");
     printf("    TC #2 5.3 6.10\n");
     printf("    X3H2-94-015/DBL SOU-031, SQL-92 Errata:\n");
     printf("      Casting Between Datetimes and Character Strings\n");
     printf("    F# 5 -- DATETIME data types\n");
     printf("    6.10 -- <cast specification>\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("CREATE TABLE LOTSA_DATETIMES (\n");
printf("  C1 DATE, C2 TIME, C3 TIMESTAMP,\n");
printf("  C4 INTERVAL YEAR, C5 INTERVAL MONTH, C6 INTERVAL DAY,\n");
printf("  C7 INTERVAL HOUR, C8 INTERVAL MINUTE, C9 INTERVAL SECOND,\n");
printf("  C10 INTERVAL YEAR TO MONTH,\n");
printf("  C11 INTERVAL DAY TO HOUR,\n");
printf("  C12 INTERVAL DAY TO MINUTE,\n");
printf("  C13 INTERVAL DAY TO SECOND,\n");
printf("  C14 INTERVAL HOUR TO MINUTE,\n");
printf("  C15 INTERVAL HOUR TO SECOND,\n");
printf("  C16 INTERVAL MINUTE TO SECOND);\n");
EXEC SQL CREATE TABLE LOTSA_DATETIMES (
  C1 DATE, C2 TIME, C3 TIMESTAMP,
  C4 INTERVAL YEAR, C5 INTERVAL MONTH, C6 INTERVAL DAY,
  C7 INTERVAL HOUR, C8 INTERVAL MINUTE, C9 INTERVAL SECOND,
  C10 INTERVAL YEAR TO MONTH,
  C11 INTERVAL DAY TO HOUR,
  C12 INTERVAL DAY TO MINUTE,
  C13 INTERVAL DAY TO SECOND,
  C14 INTERVAL HOUR TO MINUTE,
  C15 INTERVAL HOUR TO SECOND,
  C16 INTERVAL MINUTE TO SECOND);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("INSERT INTO LOTSA_DATETIMES VALUES (\n");
printf("  CAST ('1976-06-21' AS DATE),\n");
printf("  CAST ('13:24:00' AS TIME),\n");
printf("  CAST ('1927-11-30 07:10:00' AS TIMESTAMP),\n");
printf("  CAST ('-1' AS INTERVAL YEAR),\n");
printf("  CAST ('+2' AS INTERVAL MONTH),\n");
printf("  CAST ('-3' AS INTERVAL DAY),\n");
printf("  CAST ('4' AS INTERVAL HOUR),\n");
printf("  CAST ('-5' AS INTERVAL MINUTE),\n");
printf("  CAST ('6.333333' AS INTERVAL SECOND),\n");
printf("  CAST ('-5-11' AS INTERVAL YEAR TO MONTH),\n");
printf("  CAST ('2 15' AS INTERVAL DAY TO HOUR),\n");
printf("  CAST ('-3 4:05' AS INTERVAL DAY TO MINUTE),\n");
printf("  CAST ('+6 17:08:09' AS INTERVAL DAY TO SECOND),\n");
printf("  CAST ('-10:45' AS INTERVAL HOUR TO MINUTE),\n");
printf("  CAST ('11:23:45.75' AS INTERVAL HOUR TO SECOND),\n");
printf("  CAST ('-20:00' AS INTERVAL MINUTE TO SECOND));\n");
EXEC SQL INSERT INTO LOTSA_DATETIMES VALUES (
  CAST ('1976-06-21' AS DATE),
  CAST ('13:24:00' AS TIME),
  CAST ('1927-11-30 07:10:00' AS TIMESTAMP),
  CAST ('-1' AS INTERVAL YEAR),
  CAST ('+2' AS INTERVAL MONTH),
  CAST ('-3' AS INTERVAL DAY),
  CAST ('4' AS INTERVAL HOUR),
  CAST ('-5' AS INTERVAL MINUTE),
  CAST ('6.333333' AS INTERVAL SECOND),
  CAST ('-5-11' AS INTERVAL YEAR TO MONTH),
  CAST ('2 15' AS INTERVAL DAY TO HOUR),
  CAST ('-3 4:05' AS INTERVAL DAY TO MINUTE),
  CAST ('+6 17:08:09' AS INTERVAL DAY TO SECOND),
  CAST ('-10:45' AS INTERVAL HOUR TO MINUTE),
  CAST ('11:23:45.75' AS INTERVAL HOUR TO SECOND),
  CAST ('-20:00' AS INTERVAL MINUTE TO SECOND));
CHCKOK ();
printf("\n");

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM LOTSA_DATETIMES\n");
printf("  WHERE C1 = DATE '1976-06-21' AND\n");
printf("  C2 = TIME '13:24:00' AND\n");
printf("  C3 = TIMESTAMP '1927-11-30 07:10:00.000000' AND\n");
printf("  C4 = INTERVAL -'1' YEAR AND\n");
printf("  C5 = INTERVAL -'-2' MONTH AND\n");
printf("  C6 = INTERVAL '-3' DAY AND\n");
printf("  C7 = INTERVAL '4' HOUR AND\n");
printf("  C8 = INTERVAL -'5' MINUTE AND\n");
printf("  C9 = INTERVAL '6.333333' SECOND AND\n");
printf("  C10 = INTERVAL -'5-11' YEAR TO MONTH AND\n");
printf("  C11 = INTERVAL +'2 15' DAY TO HOUR AND\n");
printf("  C12 = INTERVAL '-3 4:05' DAY TO MINUTE AND\n");
printf("  C13 = INTERVAL '+6 17:08:09.000000' DAY TO SECOND AND\n");
printf("  C14 = INTERVAL '-10:45' HOUR TO MINUTE AND\n");
printf("  C15 = INTERVAL '11:23:45.750000' HOUR TO SECOND;\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM LOTSA_DATETIMES
  WHERE C1 = DATE '1976-06-21' AND
  C2 = TIME '13:24:00' AND
  C3 = TIMESTAMP '1927-11-30 07:10:00.000000' AND
  C4 = INTERVAL -'1' YEAR AND
  C5 = INTERVAL -'-2' MONTH AND
  C6 = INTERVAL '-3' DAY AND
  C7 = INTERVAL '4' HOUR AND
  C8 = INTERVAL -'5' MINUTE AND
  C9 = INTERVAL '6.333333' SECOND AND
  C10 = INTERVAL -'5-11' YEAR TO MONTH AND
  C11 = INTERVAL +'2 15' DAY TO HOUR AND
  C12 = INTERVAL '-3 4:05' DAY TO MINUTE AND
  C13 = INTERVAL '+6 17:08:09.000000' DAY TO SECOND AND
  C14 = INTERVAL '-10:45' HOUR TO MINUTE AND
  C15 = INTERVAL '11:23:45.750000' HOUR TO SECOND;
CHCKOK ();
printf ("int1 should be 1; its value is %ld\n\n", int1);
/* TEd hook #1 */
if (int1 != 1)
  flag = 0;

printf ("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;

CHCKOK ();
printf("\n");

printf("DROP TABLE LOTSA_DATETIMES CASCADE;\n");
EXEC SQL DROP TABLE LOTSA_DATETIMES CASCADE;

CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;

CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0661','pass','PC');
       }
     else
       {
          printf("\n\n       dml121.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0661','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0661 *********************/
/******************** BEGIN TEST0663 ********************/
flag = 1;

     printf("                  TEST0663 \n");
     printf("     Errata:  datetime SQLSTATEs (static)\n");
     printf("References:\n");
     printf("    TC #2 6.1 6.10 22.1\n");
     printf("    X3H2-93-270/DBL YOK-165, Invalid datetime format\n");
     printf("    F# 5 -- DATETIME data types\n");
     printf("    6.10 -- <cast specification>\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("CREATE TABLE WOODCHUCK (\n");
printf("  OBSERVATION DATE,\n");
printf("  WOOD_AGE INTERVAL YEAR TO MONTH);\n");
EXEC SQL CREATE TABLE WOODCHUCK (
  OBSERVATION DATE,
  WOOD_AGE INTERVAL YEAR TO MONTH);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* Invalid datetime format 22007 */

printf("INSERT INTO WOODCHUCK VALUES (\n");
printf("  CAST ('1994-02-30' AS DATE), NULL);\n");
EXEC SQL INSERT INTO WOODCHUCK VALUES (
  CAST ('1994-02-30' AS DATE), NULL);
printf ("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;
SQLSTATE[5] = '\0';
printf ("SQLSTATE should be 22007; its value is %s\n\n", SQLSTATE);
if (strncmp (SQLSTATE, "22007", 5) != 0)
  flag = 0;

/* Invalid interval format 22006 */

printf("INSERT INTO WOODCHUCK VALUES (\n");
printf("  NULL, CAST ('1-12' AS INTERVAL YEAR TO MONTH));\n");
EXEC SQL INSERT INTO WOODCHUCK VALUES (
  NULL, CAST ('1-12' AS INTERVAL YEAR TO MONTH));
printf ("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;
SQLSTATE[5] = '\0';
printf ("SQLSTATE should be 22006; its value is %s\n\n", SQLSTATE);
if (strncmp (SQLSTATE, "22006", 5) != 0)
  flag = 0;

printf ("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;

CHCKOK ();
printf("\n");

printf("DROP TABLE WOODCHUCK CASCADE;\n");
EXEC SQL DROP TABLE WOODCHUCK CASCADE;

CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;

CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0663','pass','PC');
       }
     else
       {
          printf("\n\n       dml121.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0663','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0663 *********************/
     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

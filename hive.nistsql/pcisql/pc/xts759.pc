/*  EMBEDDED C (file " XTS759.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS759.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/* Scrolled cursor on grouped view,FETCH RELATIVE,FIRST,ABSOLUTE */
/*                                                               */
/*  REFERENCES                                                   */
/*    13.1    -- <Declare cursor>                                */
/*    13.3    -- <Fetch statement>                               */
/*    13.3    GR.5bi                                             */
/*    F#3     -- Basic schema manipulation                       */
/*    F#24    -- Keyword relaxations                             */
/*    F#43    -- Scrolled cursors                                */
/*                                                               */
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 15/12/95                    */
/*         Print timestamp                                       */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*                                                               */
/*  QA STATUS : QA CHECK                                         */
/*                                                               */
/*  Revised by DWF 1996-02-20                                    */
/*    Removed status checks after cursor definition              */
/*    Added order by clause to enforce ordering that was assumed */
/*    Fixed relative fetch to get expected results               */
/*    Added printouts                                            */
/*    Fixed string lengths                                       */
/*    Removed coding rule violations                             */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
char col1[21];
long col2;
long rowptr;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts759.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run :  %s\n", ctime(&cal));

/******************** BEGIN TEST7059 ********************/
flag = 1; 
printf("                  TEST7059\n");
printf("    Scrolled cursor on grouped view,FETCH RELATIVE,FIRST,ABSOLUTE\n");
printf(" References\n");
printf("    13.1    -- <Declare cursor>\n");
printf("    13.3    -- <Fetch statement>\n");
printf("    13.3 GR.5bi \n");
printf("    F#24    -- Keyword relaxations\n");
printf("    F#43    -- Scrolled cursors \n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

/* create a grouped view under the current schema */
printf("CREATE VIEW VA759 (WORKERS,CITCOUN)\n"); 
printf("AS SELECT EMPNAME,COUNT(CITY)\n");
printf("FROM CTS1.STAFFc\n");
printf("GROUP BY EMPNAME;\n");
EXEC SQL CREATE VIEW VA759 (WORKERS,CITCOUN) 
         AS SELECT EMPNAME,COUNT(CITY)
         FROM CTS1.STAFFc
         GROUP BY EMPNAME;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DECLARE ACURS SCROLL CURSOR FOR SELECT WORKERS,CITCOUN\n");
printf("FROM VA759 ORDER BY WORKERS;\n\n");
EXEC SQL DECLARE ACURS SCROLL CURSOR FOR SELECT WORKERS,CITCOUN
         FROM VA759 ORDER BY WORKERS;

printf("OPEN ACURS;\n");
EXEC SQL OPEN ACURS;
CHCKOK();
printf("\n");

/* initialise host variables */
strcpy(col1,"xxxxxxxxxxxxxxxxxxxx");
rowptr = 3;
printf("rowptr = 3;\n");
col2 = 0;

/* now fetch the third row of the grouped view */
printf("FETCH ABSOLUTE :rowptr FROM ACURS INTO :col1,:col2;\n");
EXEC SQL FETCH ABSOLUTE :rowptr FROM ACURS INTO :col1,:col2;  
CHCKOK();
printf("WORKERS1 should be Carmen; its value is %s\n",col1);
printf("CITCOUN  should be      1; its value is %ld\n",col2);
if (strncmp(col1,"Carmen",6)!=0 || col2 != 1)
     flag = 0;
printf("\n");

/* initialise host variables */
strcpy(col1,"xxxxxxxxxxxxxxxxxxxx");
col2 = 0;

/* now fetch the first row of the grouped view */
printf("FETCH FIRST FROM ACURS INTO :col1,:col2;\n");
EXEC SQL FETCH FIRST FROM ACURS INTO :col1,:col2;  
CHCKOK();
printf("WORKERS1 should be Alice; its value is %s\n",col1);
printf("CITCOUN  should be     1; its value is %ld\n",col2);
if (strncmp(col1,"Alice",5)!=0 || col2 != 1)
   flag = 0;
printf("\n");

/* initialise host variables */
strcpy(col1,"xxxxxxxxxxxxxxxxxxxx");
rowptr = 0;
printf("rowptr = 0;\n");
col2 = 0;

/* now fetch again the first row of the grouped view */
printf("FETCH RELATIVE :rowptr FROM ACURS INTO :col1,:col2;\n");
EXEC SQL FETCH RELATIVE :rowptr FROM ACURS INTO :col1,:col2;  
CHCKOK();
printf("WORKERS1 should be Alice; its value is %s\n",col1);
printf("CITCOUN  should be     1; its value is %ld\n",col2);
if (strncmp(col1,"Alice",5)!=0 || col2 != 1)
   flag = 0;
printf("\n");

/* initialise host variables */
strcpy(col1,"xxxxxxxxxxxxxxxxxxxx");
rowptr = 5;
printf("rowptr = 5;\n");
col2 = 0;

/* now retrieve the last row of the grouped view */
printf("FETCH RELATIVE :rowptr FROM ACURS INTO :col1,:col2;\n");
EXEC SQL FETCH RELATIVE :rowptr FROM ACURS INTO :col1,:col2;  
CHCKOK();
printf("WORKERS1 should be Tom; its value is %s\n",col1);
printf("CITCOUN  should be   1; its value is %ld\n",col2);
if (strncmp(col1,"Tom",3)!=0 || col2 != 1)
     flag = 0;
printf("\n");

/* initialise host variables */
strcpy(col1,"xxxxxxxxxxxxxxxxxxxx");
rowptr = -1;
printf("rowptr = -1;\n");
col2 = 0;

/* now retrieve the rest of the view rows in reverse order*/ 
printf("FETCH RELATIVE :rowptr FROM ACURS INTO :col1,:col2;\n");
EXEC SQL FETCH RELATIVE :rowptr FROM ACURS INTO :col1,:col2;  
CHCKOK();
printf("WORKERS1 should be Kingdom; its value is %s\n",col1);
printf("CITCOUN  should be       1; its value is %ld\n",col2);
if (strncmp(col1,"Kingdom",7)!=0 || col2 != 1)
  flag = 0;
printf("\n");

/* initialise host variables */
strcpy(col1,"xxxxxxxxxxxxxxxxxxxx");
rowptr = -1;
col2 = 0;

printf("FETCH RELATIVE :rowptr FROM ACURS INTO :col1,:col2;\n");
EXEC SQL FETCH RELATIVE :rowptr FROM ACURS INTO :col1,:col2;  
CHCKOK();
printf("WORKERS1 should be Don; its value is %s\n",col1);
printf("CITCOUN  should be   2; its value is %ld\n",col2);
if (strncmp(col1,"Don",3)!=0 || col2 != 2)
     flag = 0;
printf("\n");

/* initialise host variables */
strcpy(col1,"xxxxxxxxxxxxxxxxxxxx");
rowptr = -1;
col2 = 0;

printf("FETCH RELATIVE :rowptr FROM ACURS INTO :col1,:col2;\n");
EXEC SQL FETCH RELATIVE :rowptr FROM ACURS INTO :col1,:col2;  
CHCKOK();
printf("WORKERS1 should be Carmen; its value is %s\n",col1);
printf("CITCOUN  should be      1; its value is %ld\n",col2);
if (strncmp(col1,"Carmen",6)!=0 || col2 != 1)
   flag = 0;
printf("\n");

/* initialise host variables */
strcpy(col1,"xxxxxxxxxxxxxxxxxxxx");
rowptr = -1;
col2 = 0;

printf("FETCH RELATIVE :rowptr FROM ACURS INTO :col1,:col2;\n");
EXEC SQL FETCH RELATIVE :rowptr FROM ACURS INTO :col1,:col2;  
CHCKOK();
printf("WORKERS1 should be Betty; its value is %s\n",col1);
printf("CITCOUN  should be     1; its value is %ld\n",col2);
if (strncmp(col1,"Betty",5)!=0 || col2 != 1)
    flag = 0;
printf("\n");

/* initialise host variables */
strcpy(col1,"xxxxxxxxxxxxxxxxxxxx");
rowptr = -1;
col2 = 0;

/* now fetch first and final row */
printf("FETCH RELATIVE :rowptr FROM ACURS INTO :col1,:col2;\n");
EXEC SQL FETCH RELATIVE :rowptr FROM ACURS INTO :col1,:col2;  
CHCKOK();
printf("WORKERS1 should be Alice; its value is %s\n",col1);
printf("CITCOUN  should be     1; its value is %ld\n",col2);
if (strncmp(col1,"Alice",5)!=0 || col2 != 1)
    flag = 0;
printf("\n");

printf("CLOSE ACURS;\n");
EXEC SQL CLOSE ACURS;
CHCKOK();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* restore database in its original state */
/* by dropping the grouped view */

printf("DROP VIEW VA759 CASCADE;\n");
EXEC SQL DROP VIEW VA759 CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* record results */
     if ( flag == 1 )
       {
          printf("\n\n       xts759.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7059','pass','PC');
       }
     else
       {
          printf("\n\n       xts759.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7059','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7059 *********************/

      exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

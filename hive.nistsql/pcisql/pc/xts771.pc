/*  EMBEDDED C (file " XTS771.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS771.PC                     TEST7071                      */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  CHARACTER SET ASCII_GRAPHIC in <data type>                   */
/*                                                               */
/*  REFERENCES                                                   */
/*    10.4    -- <Character set specification>                   */
/*     6.1    -- <Data type>                                     */
/*     6.1 SR.10                                                 */ 
/*     6.1 GR.1                                                  */
/*     F#6  -- VARCHAR data type                                 */
/*     F#3  -- Basic schema manipulation                         */
/*     F#46 -- Named character sets                              */
/*                                                               */
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 18/12/95                    */
/*         Print timestamp                                       */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*                                                               */
/*  QA STATUS : QA CHECK                                         */
/*                                                               */
/*  Revised by DWF 1996-02-27                                    */
/*    Removed status check after cursor definition               */
/*    Fixed variable declarations, string lengths                */
/*    Removed field widths from printfs                          */
/*    Fixed coding rule violations                               */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long  SQLCODE;
 char  SQLSTATE[6];
 char  uid[19];
 char  uidx[19];
 long  coun;
 long  c1;
 char CHARACTER SET ASCII_GRAPHIC cstr1[11];
 char CHARACTER SET ASCII_GRAPHIC cstr2[13];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
strcpy(uid,"CTS3              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts771.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run:  %s\n", ctime(&cal));

/******************** BEGIN TEST7071 ********************/
flag = 1;
printf("            FIPS TEST7071\n");
printf("    CHARACTER SET ASCII_GRAPHIC in <data type>\n");
printf(" References:\n");
printf("    10.4 -- <Character set specification>\n");
printf("    6.1  -- <Data type> \n");
printf("    6.1  SR.10 \n");
printf("    6.1  GR.1  \n");
printf("    F#6  -- VARCHAR data type \n");
printf("    F#3  -- Basic schema manipulation \n");
printf("    F#46 -- Named character sets \n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");
 
/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

/* create a table under the current schema TAB771 */
printf("CREATE TABLE TAB771\n");
printf("(COLNUM1 NUMERIC(5)  PRIMARY KEY,\n");
printf(" COLSTR1 CHAR(10)    CHARACTER SET ASCII_GRAPHIC,\n");
printf(" COLSTR2 VARCHAR(12) CHARACTER SET ASCII_GRAPHIC);\n");
EXEC SQL CREATE TABLE TAB771
     (COLNUM1 NUMERIC(5)  PRIMARY KEY,
      COLSTR1 CHAR(10)    CHARACTER SET ASCII_GRAPHIC,
      COLSTR2 CHAR(12) CHARACTER SET ASCII_GRAPHIC);
CHCKOK(); 
printf("\n");
 
printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK(); 
printf("\n");

/* insert three rows in the table */
printf("INSERT INTO TAB771\n");
printf(" VALUES(22,_ASCII_GRAPHIC'!$[\\]^`{}~',_ASCII_GRAPHIC'OK');\n");
EXEC SQL INSERT INTO TAB771
         VALUES(22,_ASCII_GRAPHIC'!$[\]^`{}~',_ASCII_GRAPHIC'OK');
CHCKOK();
printf("\n");

printf("INSERT INTO TAB771\n");
printf(" VALUES(20,_ASCII_GRAPHIC'`$NIK',_ASCII_GRAPHIC'MAY BE');\n");
EXEC SQL INSERT INTO TAB771
         VALUES(20,_ASCII_GRAPHIC'`$NIK',_ASCII_GRAPHIC'MAY BE');
CHCKOK();
printf("\n");

printf("INSERT INTO TAB771\n");
printf(" VALUES(21,_ASCII_GRAPHIC'~!KOS{}',_ASCII_GRAPHIC'{ERROR}');\n");
EXEC SQL INSERT INTO TAB771
         VALUES(21,_ASCII_GRAPHIC'~!KOS{}',_ASCII_GRAPHIC'{ERROR}');
CHCKOK();
printf("\n");

/* initialise host variable */
coun = 0;

printf("SELECT COUNT(*) INTO :coun FROM TAB771\n");
printf("WHERE COLSTR1 = _ASCII_GRAPHIC '!$[\\]^`{}~';\n");
EXEC SQL SELECT COUNT(*) INTO :coun FROM TAB771
           WHERE COLSTR1 = _ASCII_GRAPHIC '!$[\]^`{}~';
CHCKOK();
printf("coun should be 1; its value is %ld\n",coun);
if (coun != 1)
   flag = 0;
 printf("\n");

/* Use an ordered cursor and retrieve the rows of TAB771*/
/* and check if all the expected rows are present */
printf("DECLARE F CURSOR FOR SELECT COLNUM1,COLSTR1,COLSTR2\n");
printf("FROM TAB771\n");
printf("ORDER BY COLNUM1;\n\n");
EXEC SQL DECLARE F CURSOR
         FOR SELECT COLNUM1,COLSTR1,COLSTR2 FROM TAB771
         ORDER BY COLNUM1;

printf("OPEN F;\n");
EXEC SQL OPEN F;
CHCKOK(); 
printf("\n");

/* initialise host variables */
c1=0;
strcpy(cstr1,"xxxxxxxxxx");
strcpy(cstr2,"xxxxxxxxxxxx");

/* fetch all the rows three in total */
/* fetch first row */
printf("FETCH F INTO :c1,:cstr1,:cstr2;\n");
EXEC SQL FETCH F INTO :c1,:cstr1,:cstr2;
CHCKOK();
printf("COLNUM1  should be     20; its value is %ld\n",c1);
printf("COLSTR1  should be  `$NIK; its value is %s\n",cstr1);
printf("COLSTR2  should be MAY BE; its value is %s\n",cstr2);
if (strncmp(cstr1,"`$NIK",5)!=0 || c1 !=20 || strncmp(cstr2,"MAY BE",6)!=0) 
   flag = 0;
printf("\n");
 
/* initialise host variables */
c1=0;
strcpy(cstr1,"xxxxxxxxxx");
strcpy(cstr2,"xxxxxxxxxxxx");

/* fetch second row */
printf("FETCH F INTO :c1,:cstr1,:cstr2;\n");
EXEC SQL FETCH F INTO :c1,:cstr1,:cstr2;
CHCKOK();
printf("COLNUM1 should be      21; its value is %ld\n",c1);
printf("COLSTR1 should be ~!KOS{}; its value is %s\n",cstr1);
printf("COLSTR2 should be {ERROR}; its value is %s\n",cstr2);
if (strncmp(cstr1,"~!KOS{}",7)!=0 || c1 !=21) 
   flag = 0;
if (strncmp(cstr2,"{ERROR}",7)!=0)
   flag = 0;
printf("\n");

/* initialise host variables */
c1=0;
strcpy(cstr1,"xxxxxxxxxx");
strcpy(cstr2,"xxxxxxxxxxxx");

/* fetch final row */
printf("FETCH F INTO :c1,:cstr1,:cstr2;\n");
EXEC SQL FETCH F INTO :c1,:cstr1,:cstr2;
CHCKOK();
printf("COLNUM1 should be         22; its value is %ld\n",c1);
printf("COLSTR1 should be !$[\\]^`{}~; its value is %s\n",cstr1);
printf("COLSTR2 should be         OK; its value is %s\n",cstr2);
if (strncmp(cstr1,"!$[\\]^`{}~",10)!=0 || c1 !=22 || strncmp(cstr2,"OK",2)!=0)
   flag = 0;
printf("\n");

/* close the cursor */
printf("CLOSE F;\n");
EXEC SQL CLOSE F;
CHCKOK();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* Clean-up database */
printf("DROP TABLE TAB771 CASCADE;\n");
EXEC SQL DROP TABLE TAB771 CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

 /* record results */

     if ( flag == 1 )
       {
          printf("\n\n       xts771.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7071','pass','PC');
       }
     else
       {
          printf("\n\n       xts771.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7071','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;

/******************** END TEST7071 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

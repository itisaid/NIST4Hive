/*  EMBEDDED C (file " XTS726.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS726.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  Flagging - Full SQL - cursor with FOR UPDATE and ORDER BY    */
/*                                                               */
/*  REFERENCES                                                   */
/*    13.1    -- <declare cursor>                                */
/*    13.9    -- <update statement: positioned>                  */
/*    13.10   -- <update statement: searched>                    */
/*    13.9    SR.4                                               */
/*    F#37    -- Intermediate SQL Flagging                       */
/*                                                               */
/*  DATE LAST ALTERED  14/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 04/12/95:                   */
/*       Change values returned from table CL_STANDARD           */
/*              (JIM > MORRIS)                                   */
/*                                                               */
/*  QA Status: QA CHECK                                          */
/*                                                               */
/*  Revised by DWF 1/31/96                                       */
/*    Removed status checks after cursor definition              */
/*    Fixed char string lengths                                  */
/*    Fixed misinterpretations of SQL-92                         */
/*    Harmonized printfs with executed statements                */
/*    Corrected expected results                                 */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 long c_num1;
 long c_num2;
 char c_ch1[11];
 char c_ch2[11];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid); 
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if(strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts726.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run:  %s\n", ctime(&cal));

/***************** BEGIN TEST7026 ******************/
 flag = 1;

 printf("                 TEST7026 \n");
 printf("    Flagging Full SQL - cursor FOR UPDATE and ORDER BY\n");
 printf("References\n");
 printf("    13.1  -- <declare cursor>\n");
 printf("    13.9  -- <update statement: positioned> \n");
 printf("    13.10 -- <update statement: searched> \n");
 printf("    13.9  SR.4 \n");
 printf("    F#37  -- Intermediate SQL Flagging \n");
 printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Subtest 1 */

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

/* use table CL_STANDARD from the standard schema */
/* Use Valid Intermediate SQL & declare a cursor  */ 
/* for UPDATE only                                */
printf("Valid Intermediate SQL syntax:\n");
printf("DECLARE ALPHA CURSOR FOR SELECT COL_NUM1,\n");
printf("COL_CH1,COL_NUM2,COL_CH2\n");
printf("FROM CL_STANDARD \n");
printf("WHERE COL_NUM1 = 1004 AND COL_CH1 = 'MORRIS'\n");
printf("FOR UPDATE OF COL_CH1, COL_NUM2;\n\n");
EXEC SQL DECLARE ALPHA CURSOR FOR SELECT COL_NUM1,
         COL_CH1,COL_NUM2,COL_CH2 FROM CL_STANDARD 
         WHERE COL_NUM1 = 1004 AND COL_CH1 = 'MORRIS'
         FOR UPDATE OF COL_CH1, COL_NUM2;
 
printf("OPEN ALPHA;\n");
EXEC SQL OPEN ALPHA;
CHCKOK();
printf("\n");

/* initialise host variables */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");
c_num1=0;
c_num2=0;
printf("FETCH ALPHA INTO :c_num1, :c_ch1, :c_num2, :c_ch2;\n");
EXEC SQL FETCH ALPHA INTO :c_num1, :c_ch1, :c_num2, :c_ch2;
CHCKOK();
printf("Values of the columns BEFORE the UPDATE:\n");
printf("COL_NUM1 = %ld COL_CH1 = %s\n",c_num1,c_ch1);
printf("COL_NUM2 = %ld COL_CH2 = %s\n",c_num2,c_ch2); 
printf("\n");

/* use an <update statement:positioned and modify row */
/* that satisfies the <search condition> of the query */
printf("UPDATE CL_STANDARD\n");
printf("SET COL_CH1 = 'ELLIE', COL_NUM2 = COL_NUM2 + 10\n");
printf("WHERE CURRENT OF ALPHA;\n");
EXEC SQL UPDATE CL_STANDARD
         SET COL_CH1 = 'ELLIE',COL_NUM2 = COL_NUM2 + 10
         WHERE CURRENT OF ALPHA;
CHCKOK(); 
printf("\n");

/* close the cursor */
printf("CLOSE ALPHA;\n");
EXEC SQL CLOSE ALPHA;
CHCKOK();
printf("\n");

/* initialise host variables */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");
c_num1=0;
c_num2=0;

/* use a <select statement: single row> and check that */
/* the row has been successfully modified */
printf("SELECT COL_NUM1,COL_CH1,COL_NUM2,COL_CH2\n");
printf("INTO :c_num1, :c_ch1, c_num2, c_ch2\n");
printf("FROM CL_STANDARD\n");
printf("WHERE COL_NUM1 = 1004;\n");
EXEC SQL SELECT COL_NUM1,COL_CH1,COL_NUM2,COL_CH2
  INTO :c_num1,:c_ch1,:c_num2,:c_ch2
  FROM CL_STANDARD 
  WHERE COL_NUM1 = 1004;
CHCKOK();
printf("Values of the row after the UPDATE :\n");
printf("COL_NUM1 should be 1004;  it is %ld \n",c_num1);
printf("COL_CH1  should be ELLIE; it is %s  \n",c_ch1);
printf("COL_NUM2 should be 4014;  it is %ld \n",c_num2);
printf("COL_CH2  should be PARGA; it is %s  \n",c_ch2);
if(c_num1 != 1004 || strncmp(c_ch1,"ELLIE",5)!=0 || c_num2 != 4014)
  flag = 0;
if(strncmp(c_ch2,"PARGA",5) != 0)
  flag = 0;
printf("\n");

/* restore CL_STANDARD in its original state */
printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* Subtest 2 */
printf("FULL SQL SYNTAX:\n");
printf("DECLARE BETA CURSOR FOR SELECT\n");
printf("COL_NUM1,COL_CH1,COL_NUM2 FROM CL_STANDARD\n");
printf("WHERE COL_NUM1 = 1001\n");
printf("ORDER BY COL_NUM2 DESC FOR UPDATE OF COL_CH1;\n\n");
EXEC SQL DECLARE BETA CURSOR FOR SELECT 
         COL_NUM1,COL_CH1,COL_NUM2 FROM CL_STANDARD
         WHERE COL_NUM1 = 1001
         ORDER BY COL_NUM2 DESC FOR UPDATE OF COL_CH1;

printf("OPEN BETA;\n");
EXEC SQL OPEN BETA;
CHCKOK();  
printf("\n");

/* fetch the row */
/* initialise host variables */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");
c_num1=0;
c_num2=0;

printf("FETCH BETA INTO :c_num1, :c_ch1, :c_num2 ;\n");
EXEC SQL FETCH BETA INTO :c_num1,:c_ch1,:c_num2;
CHCKOK();  
printf("COL_NUM1 should be 1001   it is %ld \n",c_num1);
printf("COL_CH1  should be MARIA  it is %s  \n",c_ch1); 
printf("COL_NUM2 should be 4001   it is %ld \n",c_num2);
if(c_num1 != 1001 || strncmp(c_ch1,"MARIA",5)!=0 || c_num2 != 4001)
   flag = 0;
printf("\n");

printf("UPDATE CL_STANDARD \n");
printf("SET COL_CH1 = 'TAKIS'\n");
printf("WHERE CURRENT OF BETA;\n");
EXEC SQL UPDATE CL_STANDARD
         SET COL_CH1 = 'TAKIS'
         WHERE CURRENT OF BETA;
CHCKOK();
printf("\n");

 /* close cursor and record results */

printf("CLOSE BETA;\n");
EXEC SQL CLOSE BETA;
CHCKOK();  
printf("\n");

 /* restore CL_STANDARD in its original state */
 
printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");
 
     if( flag == 1 )
       {
          printf("\n\n       xts726.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7026','pass','PC');
          printf("SQL extension CURSOR FOR UPDATE AND ORDER BY\n");
          printf("has executed successfully\n"); 
          printf("Vendor must demonstrate Intermediate Flagger WARNING\n");
       }
     else
       {
        printf("\n\n       xts726.pc  *** NOGO *** \n");
        EXEC SQL INSERT INTO CTS1.TESTREPORT
        VALUES('7026','NOGO','PC');
        printf("Vendor does not support fully \n");
        printf("Intermediate SQL extension \n");
        printf("Support for CURSOR WITH ORDER BY & UPDATE is not required\n");
       }

/* BAK : Check again in order to insert a third option for fail */
/* DWF: ??? */

     printf("========================================\n\n");

EXEC SQL COMMIT WORK;

/***************** END TEST7026 *******************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

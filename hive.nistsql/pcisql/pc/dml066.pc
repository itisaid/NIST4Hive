/*  EMBEDDED C (file "DML066.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1989/11/21 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  DML066.PC                                                    */
/*  WRITTEN BY: SUN DAJUN                                        */
/*                                                               */
/*    THIS ROUTINE TESTS THE COMPATIBILITY OF STRUCTURES AND     */
/*  HOST VARIABLES.                                              */
/*                                                               */
/*  REFERENCES                                                   */
/*        AMERICAN NATIONAL STANDARD database language - SQL     */
/*                          X3.168-1989                          */
/*                                                               */
/*                 SECTION 9.1 <embedded SQL Host program>       */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
        char EMPNA1[21];
        long grade1;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long SQLCODE;
int errcnt;
/* date_time declaration */
time_t cal;
struct my_type {
     int col1;
     char col2[21];
};
struct my_type buf;
char nmlist[100][21];
int gdlist[100];
int rlt;



main()
{
    strcpy(uid,"HU");
    AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
if (strncmp(uid,uidx,2) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, dml066.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0286 ********************/

    printf("   Compatibility of structures and host variables\n");
    printf("Reference X3.168-1989 section 9.1 GR \n");
    printf("    ------------------------------------------ \n\n");
    printf("                  TEST0286     \n");
    printf("    Reference 9.1 General Rules )\n\n");
    printf("    - - - - - - - - - - - - - - - - - - - - -  \n\n");
printf("\n");
printf("         SELECT GRADE, EMPNAME \n");
printf("         INTO :grade1,:EMPNA1 FROM STAFF\n");
printf("         WHERE EMPNUM = 'E1';\n");
printf("\n");
EXEC SQL SELECT GRADE, EMPNAME 
         INTO :grade1,:EMPNA1 FROM STAFF
         WHERE EMPNUM = 'E1';
buf.col1 = 0;
strcpy(buf.col2,"NA");
buf.col1 = grade1;
strcpy(buf.col2,EMPNA1);
printf(" The correct answer is :\n");
printf("          buf.col1 = 12\n");
printf("          buf.col2 = Alice\n");
printf(" Your answer is :\n");

printf("        buf.col1 = %d\n",buf.col1);
printf("        buf.col2 = %s\n",buf.col2);
    if (buf.col1 == 12 && strncmp(buf.col2,"Alice",5) == 0)
      {
      printf("\n               *** pass *** ");
      EXEC SQL INSERT INTO TESTREPORT
        VALUES('0286','pass','PC');
      }
    else
      {
      printf("\n     dml066.pc  *** fail *** ");
      EXEC SQL INSERT INTO TESTREPORT
        VALUES('0286','fail','PC');
          errcnt = errcnt + 1;
      }
    printf("\n===============================================\n\n");

    EXEC SQL COMMIT WORK;

/******************** END TEST0286 ********************/




/******************** BEGIN TEST0287 ********************/

    printf("   Compatibility of array and host variables\n");
    printf("Reference X3.168-1989 section 9.1 GR \n");
    printf("    ------------------------------------------ \n\n");
    printf("                  TEST0287     \n");
    printf("    Reference 9.1 General Rules )\n\n");
    printf("    - - - - - - - - - - - - - - - - - - - - -  \n\n");
printf("\n");
printf("         SELECT GRADE, EMPNAME \n");
printf("         INTO :grade1,:EMPNA1 FROM STAFF\n");
printf("         WHERE EMPNUM = 'E1';\n");
printf("\n");
printf("         SELECT GRADE, EMPNAME \n");
printf("         INTO :grade1,:EMPNA1 FROM STAFF\n");
printf("         WHERE EMPNUM = 'E2';\n");
printf("\n");
EXEC SQL SELECT GRADE, EMPNAME 
         INTO :grade1,:EMPNA1 FROM STAFF
         WHERE EMPNUM = 'E1';
gdlist[0] = grade1;
strcpy(nmlist[0],EMPNA1);
EXEC SQL SELECT GRADE, EMPNAME 
         INTO :grade1,:EMPNA1 FROM STAFF
         WHERE EMPNUM = 'E2';
gdlist[1] = grade1;
strcpy(nmlist[1],EMPNA1);
printf(" The correct answer is :\n");
printf("          gdlist[0] = 12,  nmlist[0] = Alice\n");
printf("          gdlist[1] = 10,  nmlist[1] = Betty\n");
printf(" Your answer is :\n");

printf("        gdlist[0] = %d, nmlist[0] = %s\n",gdlist[0],nmlist[0]);
printf("        gdlist[1] = %d, nmlist[1] = %s\n",gdlist[1],nmlist[1]);
rlt = 0;
if (gdlist[0] == 12 && strncmp(nmlist[0],"Alice",5) == 0)
      rlt = 1;
if (gdlist[1] == 10 && strncmp(nmlist[1],"Betty",5) == 0 && rlt == 1)
      {
      printf("\n               *** pass *** ");
      EXEC SQL INSERT INTO TESTREPORT
        VALUES('0287','pass','PC');
      }
    else
      {
      printf("\n     dml066.pc  *** fail *** ");
      EXEC SQL INSERT INTO TESTREPORT
        VALUES('0287','fail','PC');
          errcnt = errcnt + 1;
      }
    printf("\n===============================================\n\n");

    EXEC SQL COMMIT WORK;

/******************** END TEST0287 ********************/






exit(errcnt);
}

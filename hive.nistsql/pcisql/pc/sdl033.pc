/*  EMBEDDED C (file "SDL033.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1992/06/16 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  SDL033.PC                                                    */
/*  WRITTEN BY: DAVID W. FLATER                                  */
/*                                                               */
/*    THIS ROUTINE TESTS THE SCHEMA DEFINITION LANGUAGE FOR SQL. */
/*                                                               */
/*  REFERENCES                                                   */
/*    ANSI SQL-1992                                              */
/*      11.36  <grant statement>                                 */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
     long tmpcnt;
     long cc1;
     long cc2;
     char uid[19];
     char uidx[19];
EXEC SQL END DECLARE SECTION;

long SQLCODE;
int errcnt;
/* date_time declaration */
time_t cal;
long     i;
long     ii;
long     flag;

main()
{
     strcpy(uid,"SCHANZLE");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
if (strncmp(uid,uidx,8) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, sdl033.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0473 ********************/
flag = 1;

     printf("                  TEST0473 \n");
     printf("    Priv.violation: GRANT all on view/not table\n");
     printf("Reference ANSI SQL-1992 11.36 <grant statement>\n");
     printf("     - - - - - - - - - - - - - - - - - - -\n\n");

/* Part one:  make sure we can do everything to the view. */

     printf ("DELETE FROM FLATER.VS1 WHERE C2 = 1;\n");
     printf ("SELECT COUNT(*) FROM FLATER.VS1;\n");
     EXEC SQL DELETE FROM FLATER.VS1 WHERE C2 = 1;
     ii = SQLCODE;
     cc1 = -1;
     EXEC SQL SELECT COUNT(*) INTO :cc1 FROM FLATER.VS1;
     i = SQLCODE;
     printf ("SQLCODE should be 0, 0; its value is %ld, %ld\n", ii, i);
     printf ("COUNT should be 1; its value is %ld\n", cc1);

     if (ii != 0 || cc1 != 1 || i != 0)
       flag = 0;

     printf ("INSERT INTO FLATER.VS1 VALUES (0,7);\n");
     EXEC SQL INSERT INTO FLATER.VS1 VALUES (0,7);     
     ii = SQLCODE;
     printf ("SQLCODE should be 0; its value is %ld\n", ii);

     if (ii != 0)
       flag = 0;

     printf ("UPDATE FLATER.VS1 SET C2 = 8 WHERE C2 = 7;\n");
     EXEC SQL UPDATE FLATER.VS1
       SET C2 = 8
       WHERE C2 = 7;
     ii = SQLCODE;
     printf ("SQLCODE should be 0; its value is %ld\n", ii);

     if (ii != 0)
       flag = 0;

     printf ("SELECT C1, C2 INTO :cc1, :cc2 FROM FLATER.VS1\n");
     printf ("  WHERE C2 = 0;\n");
     cc1 = -1;
     cc2 = -1;
     EXEC SQL SELECT C1, C2 INTO :cc1, :cc2
       FROM FLATER.VS1
       WHERE C2 = 0;
     ii = SQLCODE;
     printf ("SQLCODE should be 0; its value is %ld\n", ii);
     printf ("cc1 should be 0; its value is %ld\n", cc1);
     printf ("cc2 should be 0; its value is %ld\n", cc2);

     if (ii != 0 || cc1 != 0 || cc2 != 0)
       flag = 0;

     EXEC SQL ROLLBACK WORK;

/* Part two:  make sure we can't do anything to the table. */

     printf ("DELETE FROM FLATER.BASE_VS1;\n");
     EXEC SQL DELETE FROM FLATER.BASE_VS1;
     ii = SQLCODE;
     printf ("SQLCODE should be < 0; its value is %ld\n", ii);

     if (ii >= 0)
       flag = 0;

     printf ("SELECT COUNT(*) FROM FLATER.VS1;\n");
     tmpcnt = -1;
     EXEC SQL SELECT COUNT(*) INTO :tmpcnt
       FROM FLATER.VS1;
     ii = SQLCODE;
     printf ("SQLCODE should be 0; its value is %ld\n", ii);
     printf ("COUNT should be 2; its value is %ld\n", tmpcnt);

     if (ii != 0 || tmpcnt != 2)
       flag = 0;

     printf ("INSERT INTO FLATER.BASE_VS1 VALUES (0,7);\n");
     EXEC SQL INSERT INTO FLATER.BASE_VS1 VALUES (0,7);     
     ii = SQLCODE;
     printf ("SQLCODE should be < 0; its value is %ld\n", ii);

     if (ii >= 0)
       flag = 0;

     printf ("SELECT COUNT(*) FROM FLATER.VS1;\n");
     tmpcnt = -1;
     EXEC SQL SELECT COUNT(*) INTO :tmpcnt
       FROM FLATER.VS1;
     ii = SQLCODE;
     printf ("SQLCODE should be 0; its value is %ld\n", ii);
     printf ("COUNT should be 2; its value is %ld\n", tmpcnt);

     if (ii != 0 || tmpcnt != 2)
       flag = 0;

     printf ("UPDATE FLATER.BASE_VS1 SET C2 = 1;\n");
     EXEC SQL UPDATE FLATER.BASE_VS1
       SET C2 = 1;
     ii = SQLCODE;
     printf ("SQLCODE should be < 0; its value is %ld\n", ii);

     if (ii >= 0)
       flag = 0;

     printf ("SELECT COUNT(*) FROM FLATER.VS1\n");
     printf ("WHERE C2 = 1;\n");
     tmpcnt = -1;
     EXEC SQL SELECT COUNT(*) INTO :tmpcnt
       FROM FLATER.VS1 WHERE C2 = 1;
     ii = SQLCODE;
     printf ("SQLCODE should be 0; its value is %ld\n", ii);
     printf ("COUNT should be 1; its value is %ld\n", tmpcnt);

     if (ii != 0 || tmpcnt != 1)
       flag = 0;

     cc1 = -1;
     printf ("SELECT COUNT(*) FROM FLATER.BASE_VS1;\n");
     EXEC SQL SELECT COUNT(*) INTO :cc1 FROM FLATER.BASE_VS1;
     ii = SQLCODE;
     printf ("SQLCODE should be < 0; its value is %ld\n", ii);
     printf ("COUNT should NOT be 4; its value is %ld\n", cc1);

     if (ii >= 0 || cc1 == 4)
       flag = 0;

     EXEC SQL ROLLBACK WORK;

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0473','pass','PC');
       }
     else
       {
          printf("\n\n       sdl033.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0473','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0473 *********************/

     exit(errcnt);
}

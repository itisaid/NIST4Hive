/*  EMBEDDED C (file "YTS764.PC")  */

/* Copyright 1996 National Computing Centre Limited, */
/* and Computer Logic R&D S.A */
/* on behalf of the CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS764.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  <query expression> with UNION ALL CORRESPONDING BY           */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    7.10   <query expression>                                  */
/*    7.10   SR.9a                                               */
/*    7.10   SR.10a                                              */
/*    7.10   GR1.b                                               */
/*    7.3    <table expression>                                  */
/*    13.1   <declare cursor >                                   */
/*    F#30   Table operations                                    */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*  Program updated to replace derived table - 8th December 1995 */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-08                                    */
/*    Added rollback after authid                                */
/*    Made # columns match # values inserted                     */
/*    Fixed expected results                                     */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short i;
long h;
long s;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts764.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7519 ********************/
/* initialise all variables */
flag = 1;

     printf("                  TEST7519 \n");
     printf("   <query expression> with UNION ALL CORRESPONDING BY\n");
     printf("References:\n");
     printf("    7.10   <query expression>\n");
     printf("    7.10   SR.9a\n");
     printf("    7.10   SR.10a\n");
     printf("    7.10   GR.1b\n");
     printf("    7.3    <table expression>\n");
     printf("    13.1   <declare cursor>\n");
     printf("    F#30   Table operations\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

printf("DELETE FROM CTS1.ET;\n");
EXEC SQL DELETE FROM CTS1.ET;
printf("\n");

/* inserted into CTS1.STAFFb : */
/* are three or more copies of some rows, */
/* two copies of other rows and some rows that are not duplicated */
/* For rows that are not duplicated some rows are included which */
/* would be duplicates if only the corresponding rows were considered. */

/* Inserted into CTS1.STAFFa are : */
/* some rows which are duplicates of rows in CTS1.STAFFb */
/* considering only corresponding rows */
/* Some cases are included where the multiplicity of rows is more than, */
/* equal to and less than the multiplicity of that row in */
/* CTS1.STAFFb */

/* return no of rows in tables */
i = 0;
printf("Check the correct number of rows have been inserted\n");
printf("SELECT COUNT (*) INTO :i FROM CTS1.STAFFb;\n");
EXEC SQL SELECT COUNT (*) INTO :i FROM CTS1.STAFFb;
printf ("i should be 12; its value is %d\n\n", i);
if (i != 12)
   flag = 0;

/* reinitialise host variable */

i = 0;
printf("SELECT COUNT (*) INTO :i FROM CTS1.STAFFa;\n");
EXEC SQL SELECT COUNT (*) INTO :i FROM CTS1.STAFFa;
printf ("i should be 12; its value is %d\n\n", i);
if (i != 12)
   flag = 0;

/* define cursor */

printf("INSERT INTO CTS1.ET (col5, col6)\n");
printf("SELECT * FROM CTS1.STAFFB\n");
printf("UNION ALL CORRESPONDING BY (hours, salary)\n");
printf("SELECT * FROM CTS1.STAFFA;\n");
EXEC SQL INSERT INTO CTS1.ET (col5, col6)
SELECT * FROM CTS1.STAFFB
UNION ALL CORRESPONDING BY (hours, salary)
SELECT * FROM CTS1.STAFFA;
CHCKOK ();
printf("\n");

/* Hours Salary */
/* 24 rows */

printf("DECLARE data64 CURSOR FOR\n");
printf("SELECT COUNT (*), col5, col6\n");
printf("FROM CTS1.ET\n");
printf("GROUP BY col6, col5\n");
printf("ORDER BY 2,3;\n\n");
EXEC SQL DECLARE data64 CURSOR FOR
SELECT COUNT (*), col5, col6
FROM CTS1.ET
GROUP BY col6, col5
ORDER BY 2,3;

/* open cursor */
printf("OPEN data64;\n");
EXEC SQL OPEN data64;
CHCKOK ();
printf("\n");

i = 0;
h = 0;
s = 0;
printf("FETCH data64 INTO :i, :h, :s\n");
EXEC SQL FETCH data64 INTO :i, :h, :s;
CHCKOK ();
printf ("i should be 1; its value is %d\n", i);
printf ("h should be 15; its value is %ld\n", h);
printf ("s should be 7000; its value is %ld\n\n", s);
if (i != 1 || h != 15 || s != 7000)
  flag = 0;

i = 0;
h = 0;
s = 0;
printf("FETCH data64 INTO :i, :h, :s\n");
EXEC SQL FETCH data64 INTO :i, :h, :s;
CHCKOK ();
printf ("i should be 1; its value is %d\n", i);
printf ("h should be 30; its value is %ld\n", h);
printf ("s should be 8000; its value is %ld\n\n", s);
if (i != 1 || h != 30 || s != 8000)
  flag = 0;

i = 0;
h = 0;
s = 0;
printf("FETCH data64 INTO :i, :h, :s\n");
EXEC SQL FETCH data64 INTO :i, :h, :s;
CHCKOK ();
printf ("i should be 3; its value is %d\n", i);
printf ("h should be 30; its value is %ld\n", h);
printf ("s should be 20000; its value is %ld\n\n", s);
if (i != 3 || h != 30 || s != 20000)
  flag = 0;

i = 0;
h = 0;
s = 0;
printf("FETCH data64 INTO :i, :h, :s\n");
EXEC SQL FETCH data64 INTO :i, :h, :s;
CHCKOK ();
printf ("i should be 2; its value is %d\n", i);
printf ("h should be 35; its value is %ld\n", h);
printf ("s should be 15000; its value is %ld\n\n", s);
if (i != 2 || h != 35 || s != 15000)
  flag = 0;

i = 0;
h = 0;
s = 0;
printf("FETCH data64 INTO :i, :h, :s\n");
EXEC SQL FETCH data64 INTO :i, :h, :s;
CHCKOK ();
printf ("i should be 9; its value is %d\n", i);
printf ("h should be 40; its value is %ld\n", h);
printf ("s should be 10000; its value is %ld\n\n", s);
if (i != 9 || h != 40 || s != 10000)
  flag = 0;

i = 0;
h = 0;
s = 0;
printf("FETCH data64 INTO :i, :h, :s\n");
EXEC SQL FETCH data64 INTO :i, :h, :s;
CHCKOK ();
printf ("i should be 2; its value is %d\n", i);
printf ("h should be 60; its value is %ld\n", h);
printf ("s should be 45000; its value is %ld\n\n", s);
if (i != 2 || h != 60 || s != 45000)
  flag = 0;

i = 0;
h = 0;
s = 0;
printf("FETCH data64 INTO :i, :h, :s\n");
EXEC SQL FETCH data64 INTO :i, :h, :s;
CHCKOK ();
printf ("i should be 6; its value is %d\n", i);
printf ("h should be 70; its value is %ld\n", h);
printf ("s should be 40000; its value is %ld\n\n", s);
if (i != 6 || h != 70 || s != 40000)
  flag = 0;

printf("CLOSE data64\n");
EXEC SQL CLOSE data64;
CHCKOK ();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts764.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7519','pass','PC');
       }
     else
       {
          printf("\n\n       yts764.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7519','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7519 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


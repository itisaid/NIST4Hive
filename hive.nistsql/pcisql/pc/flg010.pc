/*  EMBEDDED C (file "FLG010.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1994/12/22 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  FLG010.PC                                                    */
/*  WRITTEN BY:  David W. Flater                                 */
/*                                                               */
/*  This routine tests an extension to FIPS SQL.                 */
/*                                                               */
/*  REFERENCES                                                   */
/*    XOP701.PC -- X/O,WHENEVER SQLWARNING and scoping of C      */
/*      labels (Colin O'Driscoll)                                */
/*    X/Open CAE SQL 4.6                                         */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
long i1;
char c1[4];
EXEC SQL END DECLARE SECTION;
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"FLATER            ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;

printf("SQL Test Suite, V6.0, Embedded C, flg010.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0830 ********************/
flag = 2;

     /* If this test will not compile the result is 'nogo'. */

     printf("                  TEST0830 \n");
     printf("      FIPS Flagger - WHENEVER SQLWARNING\n");
     printf("References:\n");
     printf("    X/Open CAE SQL 4.6\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("INSERT INTO USIG VALUES (1, 1);\n\n");
EXEC SQL INSERT INTO USIG VALUES (1, 1);

printf("INSERT INTO USIG VALUES (2, NULL);\n\n");
EXEC SQL INSERT INTO USIG VALUES (2, NULL);

printf("WHENEVER SQLWARNING GOTO P100;\n\n");
EXEC SQL WHENEVER SQLWARNING GOTO P100;

printf ("The next statement should generate a 01003 warning\n");
printf ("(null value eliminated in set function).\n\n");

printf("SELECT SUM(C_1) INTO :i1 FROM USIG;\n\n");
EXEC SQL SELECT SUM(C_1) INTO :i1 FROM USIG;

printf ("Jump to P100 failed to occur.\n\n");
flag = flag - 1;

P100:
printf ("SQLCODE is %ld\n", SQLCODE);
SQLSTATE[5] = '\0';
printf ("SQLSTATE is %s\n\n", SQLSTATE);

printf("WHENEVER SQLWARNING GOTO P101;\n\n");
EXEC SQL WHENEVER SQLWARNING GOTO P101;

printf ("The next statement should generate a 01004 warning\n");
printf ("(string data, right truncation).\n\n");

printf("SELECT EMPNAME INTO :c1 FROM HU.STAFF\n");
printf("  WHERE EMPNUM = 'E1';\n\n");
EXEC SQL SELECT EMPNAME INTO :c1 FROM HU.STAFF
  WHERE EMPNUM = 'E1';

printf ("Jump to P101 failed to occur.\n\n");
flag = flag - 1;

P101:
printf ("SQLCODE is %ld\n", SQLCODE);
SQLSTATE[5] = '\0';
printf ("SQLSTATE is %s\n\n", SQLSTATE);

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;

  if (flag == 0)
  {
    printf ("\n\n  WHENEVER SQLWARNING does not appear to be supported.\n");
    printf ("  Support for WHENEVER SQLWARNING is not required.\n");
    EXEC SQL INSERT INTO HU.TESTREPORT
    VALUES('0830','nogo','PC');
    errcnt = errcnt + 1;
  }
  else
  {
    printf ("\n\n  SQL extension WHENEVER SQLWARNING executed successfully\n");
    printf ("  (2 tries, %ld worked).\n", flag);
    printf ("  Vendor must demonstrate FIPS flagger WARNING.\n");
    EXEC SQL INSERT INTO HU.TESTREPORT
    VALUES('0830','pass','PC');
  }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0830 *********************/

     exit(errcnt);
}

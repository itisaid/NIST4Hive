/*  EMBEDDED C (file "YTS807.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS807.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  This routine tests TIMEZONE_HOUR and TIMEZONE_MINUTE in      */
/*                     <extract expression>                      */
/*                                                               */
/*  REFERENCES                                                   */
/*    6.6 SR6b     <numeric value function>                      */
/*    6.6 SR4                                                    */
/*    6.6 GR3)a)ii                                               */
/*    6.10 GR10    <cast expression>                             */
/*    F#41         Time zone specification                       */
/*    F#5          DATETIME data types                           */
/*    F#20         CAST functions                                */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*  Table Inserts corrected 24/10/95                             */
/*  Superfluous references to CASCADE removed from DELETE 3/11/95*/
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-28                                    */
/*    Added rollback after authid                                */
/*    Deleted extraneous code                                    */
/*    Fixed syntax errors                                        */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short id;
short id2;
short min;
short hrs;
short mn1;
short mn2;
short hr1;
short hr2;
short co;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts807.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7564 ********************/
flag = 1;

     printf("                  TEST7564 \n");
     printf("   TIMEZONE_HOUR & TIMEZONE_MINUTE in <extract expr.>\n");
     printf("References:\n");
     printf("    6.6  SR6b  <numeric value function\n");
     printf("    6.6  SR4\n");
     printf("    6.6  GR3)a)ii\n");
     printf("    6.10 GR10  <cast specification>\n");
     printf("    F#41 Time zone specification.\n");
     printf("    F#5  DATETIME data types.\n");
     printf("    F#20 CAST functions.\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* Ensure tables used in the test are empty */

printf("DELETE FROM TTIME_BASE;\n\n");
EXEC SQL DELETE FROM TTIME_BASE;

/* Insert values into TTIME */

printf("INSERT INTO TTIME (PK, TT)\n");
printf("VALUES (1, TIME '00:00:00');\n");
EXEC SQL INSERT INTO TTIME (PK, TT)
VALUES (1, TIME '00:00:00');
CHCKOK ();
printf("\n");

/* return the primary key and time hour and minutes from TTIME TT;

/* initialise host variables */

id = 99;
hrs = -1;
min = -1;

printf("SELECT PK,\n");
printf("  EXTRACT (TIMEZONE_HOUR FROM CAST (TT AS TIME WITH TIME ZONE)),\n");
printf("  EXTRACT (TIMEZONE_MINUTE FROM CAST (TT AS TIME WITH TIME ZONE))\n");
printf("INTO :id, :hrs, :min\n");
printf("FROM TTIME\n");
printf("WHERE PK = 1;\n");
EXEC SQL SELECT PK,
         EXTRACT (TIMEZONE_HOUR FROM CAST (TT AS TIME WITH TIME ZONE)),
         EXTRACT (TIMEZONE_MINUTE FROM CAST (TT AS TIME WITH TIME ZONE))
         INTO :id, :hrs, :min
         FROM TTIME
         WHERE PK = 1;
CHCKOK ();
printf ("id should be 1; its value is %d\n", id);
if (id != 1)
  flag = 0;
printf("hours should be in the range -12 to 13; its value is %d\n", hrs);
if (hrs < -12 || hrs > 13)
    flag = 0;
printf("minutes should be in the range 0 to 59; its value is %d\n\n", min);
if (min < 0 || min > 59)
   flag = 0;

/* tidy up TTIME before inserting into TTIME2 */

printf("DELETE FROM TTIME_BASE;\n\n");
EXEC SQL DELETE FROM TTIME_BASE;

/* insert into TTIME2 */

printf("INSERT INTO TTIME2 \n");
printf("VALUES (1, TIME '00:00:00+07:35',\n");
printf("TIMESTAMP '1995-12-25 00:00:00+07:35');\n");
EXEC SQL INSERT INTO TTIME2 
VALUES (1, TIME '00:00:00+07:35',
TIMESTAMP '1995-12-25 00:00:00+07:35');
CHCKOK ();
printf("\n");

printf("INSERT INTO TTIME2 \n");
printf("VALUES (2, TIME '01:00:15+09:15',\n");
printf("TIMESTAMP '1990-07-13 10:30:16+12:35');\n");
EXEC SQL INSERT INTO TTIME2 
VALUES (2, TIME '01:00:15+09:15',
TIMESTAMP '1990-07-13 10:30:16+12:35');
CHCKOK ();
printf("\n");

printf("INSERT INTO TTIME2 \n");
printf("VALUES (3, TIME '23:30:10-16:12',\n");
printf("TIMESTAMP '1989-03-30 07:58:10-02:20');\n");
EXEC SQL INSERT INTO TTIME2 
VALUES (3, TIME '23:30:10-16:12',
TIMESTAMP '1989-03-30 07:58:10-02:20');
CHCKOK ();
printf("\n");

printf("INSERT INTO TTIME2 \n");
printf("VALUES (4, TIME '12:55:05-07:35',\n");
printf("TIMESTAMP '1970-06-28 20:10:15-10:07');\n");
EXEC SQL INSERT INTO TTIME2 
VALUES (4, TIME '12:55:05-07:35',
TIMESTAMP '1970-06-28 20:10:15-10:07');
CHCKOK ();
printf("\n");

printf("INSERT INTO TTIME2 \n");
printf("VALUES (5, TIME '09:45:45+09:15',\n");
printf("TIMESTAMP '1961-04-21 01:02:03+05:29');\n");
EXEC SQL INSERT INTO TTIME2 
VALUES (5, TIME '09:45:45+09:15',
TIMESTAMP '1961-04-21 01:02:03+05:29');
CHCKOK ();
printf("\n");

/* Extract time zone hour and minute from TT2 and TS2 */
/* should be the same time zone as that inserted earlier */

/* initialise host variables */

id2 = -1;
hr1 = 99;
mn1 = 99;
hr2 = 99;
mn2 = 99;

printf("SELECT PK,\n");
printf("       EXTRACT (TIMEZONE_HOUR FROM TT2),\n");
printf("       EXTRACT (TIMEZONE_MINUTE FROM TT2),\n");
printf("       EXTRACT (TIMEZONE_HOUR FROM TS2),\n");
printf("       EXTRACT (TIMEZONE_MINUTE FROM TS2)\n");
printf("INTO :id2, :hr1, :mn1, :hr2, :mn2\n");
printf("FROM TTIME2\n");
printf("WHERE PK = 1;\n");

EXEC SQL SELECT PK,
                EXTRACT (TIMEZONE_HOUR FROM TT2),
                EXTRACT (TIMEZONE_MINUTE FROM TT2),
                EXTRACT (TIMEZONE_HOUR FROM TS2),
                EXTRACT (TIMEZONE_MINUTE FROM TS2)
         INTO :id2, :hr1, :mn1, :hr2, :mn2
         FROM TTIME2
         WHERE PK = 1;
CHCKOK ();
printf("id2 should be 1; its value is %d\n", id2);
printf("hr1 should be 7; its value is %d\n", hr1);
printf("mn1 should be 35; its value is %d\n", mn1);
printf("hr2 should be 7; its value is %d\n", hr2);
printf("mn2 should be 35; its value is %d\n\n", mn2);
if (id2 != 1 || hr1 != 7 || mn1 != 35)
  flag = 0;
if (hr2 != 7 || mn2 != 35)
  flag = 0;

/* select the number of distinct vals for TIME STAMP minute */

/* initialise host variables */

printf("INSERT INTO ET (col5)\n");
printf("SELECT EXTRACT (TIMEZONE_MINUTE FROM TS2) AS AA\n");
printf("FROM TTIME2;\n");
EXEC SQL INSERT INTO ET (col5)  
SELECT EXTRACT (TIMEZONE_MINUTE FROM TS2) AS AA
FROM TTIME2;
CHCKOK ();
printf("\n");

co = -1;
printf("SELECT COUNT (DISTINCT COL5) INTO :co\n");
printf("FROM CTS1.ET;\n");
EXEC SQL SELECT COUNT (DISTINCT COL5) INTO :co
FROM CTS1.ET;
CHCKOK ();
printf("co should be 4; its value is %d\n\n", co);
if (co != 4)
   flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts807.pc  *** pass ***\n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7564','pass','PC');
       }
     else
       {
          printf("\n\n       yts807.pc  *** fail ***\n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7564','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7564 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


/*  EMBEDDED C (file "YTS777.PC")  */

/* Copyright 1996 National Computing Centre Limited, */
/* and Computer Logic R&D S.A */
/* on behalf of the CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1994/12/08                                              */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS777.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  This routine tests DROP a non-empty schema using CASCADE     */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    11.2 <drop schema statement                                */
/*    11.1 <schema definition>                                   */
/*    F#38 Schema manipulation                                   */
/*    F#2  Basic information schema                              */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */ 
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-14                                    */
/*    Added rollback after authid                                */
/*    Fixed SDL transactions                                     */
/*    Fixed syntax errors                                        */
/*    Fixed bad schema references                                */
/*    Fixed printouts                                            */
/*    Removed EXEC SQL from printf                               */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short co;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;
long     flag2;

main()
{
     strcpy(uid,"CTS2              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts777.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7511 ********************/
flag = 1;
co = 0;

     printf("                  TEST7511 \n");
     printf("   DROP SCHEMA - non-empty schema\n");
     printf("References:\n");
     printf("    11.2   <drop schema statement\n");
     printf("    11.2   SR3\n");
     printf("    11.1   <schema definition>\n");
     printf("    F#38   schema manipulation\n");
     printf("    F#3    basic schema manipulation\n");
     printf("    F#1    dynamic SQL\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* Create schema SC777 */

printf("CREATE SCHEMA SC777;\n");
EXEC SQL CREATE SCHEMA SC777;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("Create schema objects for SC777\n");
printf("CREATE TABLE SC777.STAFF\n");
printf("(EMPNUM   CHAR(3) NOT NULL UNIQUE,\n");
printf("EMPNAME  CHAR(20),\n");
printf("GRADE    DECIMAL(4),\n");
printf("CITY     CHAR(15));\n");
EXEC SQL CREATE TABLE SC777.STAFF
(EMPNUM   CHAR(3) NOT NULL UNIQUE,
EMPNAME  CHAR(20),
GRADE    DECIMAL(4),
CITY     CHAR(15));
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("CREATE TABLE SC777.PROJ\n");
printf("(PNUM     CHAR(3) NOT NULL UNIQUE,\n");
printf("PNAME    CHAR(20),\n");
printf("PTYPE    CHAR(6),\n");
printf("BUDGET   DECIMAL(9),\n");
printf("CITY     CHAR(15));\n");
EXEC SQL CREATE TABLE SC777.PROJ
(PNUM     CHAR(3) NOT NULL UNIQUE,
PNAME    CHAR(20),
PTYPE    CHAR(6),
BUDGET   DECIMAL(9),
CITY     CHAR(15));
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("CREATE TABLE SC777.WORKS\n");
printf("(EMPNUM   CHAR(3) NOT NULL,\n");
printf("PNUM     CHAR(3) NOT NULL,\n");
printf("HOURS    DECIMAL(5),\n");
printf("UNIQUE(EMPNUM,PNUM));\n");
EXEC SQL CREATE TABLE SC777.WORKS
(EMPNUM   CHAR(3) NOT NULL,
 PNUM     CHAR(3) NOT NULL,
 HOURS    DECIMAL(5),
 UNIQUE(EMPNUM,PNUM));
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("CREATE VIEW SC777.EMP (NUM1, EMPNAME, GRADE, CITY,\n");
printf("NUM2, PNUM, HOURS) AS\n");
printf("   SELECT * FROM SC777.STAFF, SC777.WORKS\n");
printf("   WHERE SC777.STAFF.EMPNUM = SC777.WORKS.EMPNUM;\n");
EXEC SQL CREATE VIEW SC777.EMP (NUM1, EMPNAME, GRADE, CITY,
NUM2, PNUM, HOURS) AS
   SELECT * FROM SC777.STAFF, SC777.WORKS
   WHERE SC777.STAFF.EMPNUM = SC777.WORKS.EMPNUM;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* check schema SC777 referred to in schemata view */

co = 99;
printf("SELECT COUNT(*) INTO :co FROM INFORMATION_SCHEMA.SCHEMATA\n");
printf("WHERE SCHEMA_NAME = 'SC777';\n");
EXEC SQL SELECT COUNT(*) INTO :co FROM INFORMATION_SCHEMA.SCHEMATA
WHERE SCHEMA_NAME = 'SC777';
CHCKOK ();
printf ("co should be 1; its value is %d\n\n", co);
if (co != 1)
  flag = 0;

/* initialise flag */
flag2 = 1;

printf("Insert values into each of the tables\n");

printf("INSERT INTO SC777.STAFF VALUES ('E1','Adrian',10,'London');\n");
EXEC SQL INSERT INTO SC777.STAFF VALUES ('E1','Adrian',10,'London');
NOSUBCLASS();
if (strncmp(NORMSQ,"00000",5) != 0 || SQLCODE != 0)
   flag2 = 0;

printf("INSERT INTO SC777.STAFF VALUES ('E2','Brian',15,'Manchester');\n");
EXEC SQL INSERT INTO SC777.STAFF VALUES ('E2','Brian',15,'Manchester');
NOSUBCLASS();
if (strncmp(NORMSQ,"00000",5) != 0 || SQLCODE != 0)
   flag2 = 0;

printf("INSERT INTO SC777.PROJ\n");
printf("VALUES ('P23','Marketing','Local',20000,'London');\n");
EXEC SQL INSERT INTO SC777.PROJ
VALUES ('P23','Marketing','Local',20000,'London');
NOSUBCLASS();
if (strncmp(NORMSQ,"00000",5) != 0 || SQLCODE != 0)
   flag2 = 0;

printf("INSERT INTO SC777.PROJ\n");
printf("VALUES ('P2','Sales','Local',10000,'Bristol');\n");
EXEC SQL INSERT INTO SC777.PROJ
VALUES ('P2','Sales','Local',10000,'Bristol');
NOSUBCLASS();
if (strncmp(NORMSQ,"00000",5) != 0 || SQLCODE != 0)
   flag2 = 0;

printf("INSERT INTO SC777.WORKS VALUES ('E1','P2',60);\n");
EXEC SQL INSERT INTO SC777.WORKS VALUES ('E1','P2',60);
NOSUBCLASS();
if (strncmp(NORMSQ,"00000",5) != 0 || SQLCODE != 0)
   flag2 = 0;

printf("INSERT INTO SC777.WORKS VALUES ('E33','P4',20);\n\n");
EXEC SQL INSERT INTO SC777.WORKS VALUES ('E33','P4',20);
NOSUBCLASS();
if (strncmp(NORMSQ,"00000",5) != 0 || SQLCODE != 0)
   flag2 = 0;

if (flag2 != 1)
{
    flag = 0;
    printf("Problem occurred - table inserts\n\n");
}

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* Drop schema SC777 restrict - should not succeed */

printf("DROP SCHEMA SC777 RESTRICT;\n");
EXEC SQL DROP SCHEMA SC777 RESTRICT;
printf("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;
printf("SQLSTATE should be 42000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "42000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "42000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf ("\n");

printf("COMMIT WORK;\n\n");
EXEC SQL COMMIT WORK;

/* drop schema SC777 cascade - should succeed */
printf("DROP SCHEMA SC777 CASCADE;\n");
EXEC SQL DROP SCHEMA SC777 CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts777.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7511','pass','PC');
       }
     else
       {
          printf("\n\n       yts777.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7511','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("==========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7511 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


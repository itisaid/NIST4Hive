/*  EMBEDDED C (file " XTS751.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS751.PC                                                   */
/*  WRITTEN BY: Manolis Megaloikonomou                           */
/*                                                               */
/*  This routine tests Name of violated column constraint        */ 
/*                      returned in diagnostics.                 */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    18.1    -- <Get diagnostics statement>                     */
/*    18.1  LR.2a -- Raised. Entry SQL restriction which         */
/*                prohibited the use of                          */
/*                a <get diagnostics statement>.                 */
/*    11.4    -- <column definition>                             */
/*    11.6    -- <table constraint definition>                   */
/*    11.7    -- <unique constraint definition>                  */
/*    11.8    -- <referential constraint definition>             */
/*    11.9    -- <check constraint definition>                   */
/*    F#12 -- Get diagnostics.                                   */
/*    F#30 -- Table operations.                                  */
/*    F#49 -- Constraint management.                             */
/*                                                               */
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 15/12/95                    */
/*         Print timestamp                                       */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*                                                               */
/*  QA STATUS :                                                  */
/*                                                               */
/*  Revised by DWF 1996-02-15                                    */
/*    Entire test horribly broken; major changes to everything.  */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 char rstate[6];
 char cntnam[9];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;
long i;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts751.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run :  %s\n", ctime(&cal));

/******************** BEGIN TEST7051 ********************/

flag = 1;
printf("                  TEST7051 \n");
printf("    Name of violated column constraint returned in diagnostics.\n");
printf("References:\n");
printf("    18.1  -- <Get diagnostics statement>\n");
printf("    18.1  LR.2a -- Raised. Entry SQL restriction which\n");
printf("             prohibited the use of\n");
printf("             a <get diagnostics statement>.\n");
printf("    11.4  -- <column definition>\n");
printf("    11.6  -- <table constraint definition>\n");
printf("    11.7  -- <unique constraint definition>\n");
printf("    11.8  -- <referential constraint definition>\n");
printf("    11.9  -- <check constraint definition>\n");
printf("    F#12  -- Get diagnostics.\n");
printf("    F#30  -- Table operations.\n");
printf("    F#49  -- Constraint management.\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

printf("INSERT INTO CTS1.TEST12849A VALUES(2,'JACK','TOKYO',2,'BLACK',2,3);\n");
EXEC SQL INSERT INTO CTS1.TEST12849A VALUES(2,'JACK','TOKYO',2,'BLACK',2,3);
CHCKOK();
printf("\n");

/*Insert a row in table TEST12849A which attempts     */
/* to insert a duplicate value in the column that was */
/* associated with the unique specification.          */

/* Initialise host variables */
strcpy(rstate,"xxxxx");
strcpy(cntnam,"xxxxxxxx");

printf("INSERT INTO CTS1.TEST12849A VALUES(3,'JACK','TOKYO',3,'WHITE',3,2);\n");
EXEC SQL INSERT INTO CTS1.TEST12849A VALUES(3,'JACK','TOKYO',3,'WHITE',3,2);
printf("\n");

printf("GET DIAGNOSTICS\n");
printf("EXCEPTION 1\n");
printf(":rstate = RETURNED_SQLSTATE,\n");
printf(":cntnam = CONSTRAINT_NAME;\n");
EXEC SQL GET DIAGNOSTICS
         EXCEPTION 1
         :rstate = RETURNED_SQLSTATE,
         :cntnam = CONSTRAINT_NAME;
strcpy (SQLSTATE, rstate);
printf("RETURNED_SQLSTATE should be 23000; its value is %s\n", rstate); 
printf("CONSTRAINT_NAME   should be CONSTR_2; its value is %s\n", cntnam);
NOSUBCLASS();
if (strncmp(NORMSQ, "23000", 5) != 0)
  flag = 0;
if (strncmp(NORMSQ, "23000", 5) == 0 && strncmp(NORMSQ, SQLSTATE, 5) != 0)
  printf("Valid implementation-defined SQLSTATE accepted.\n");
if (strncmp (cntnam,"CONSTR_2", 8) != 0)
 flag = 0;
printf("\n");

/* Initialise host variables */
strcpy(rstate,"xxxxx");
strcpy(cntnam,"xxxxxxxx");

/* Insert one more row in the table attempting to violate */
/* the foreign key constraint by inserting a non existing */
/* value for the referenced column.                       */

printf("INSERT INTO CTS1.TEST12849A VALUES(4,'KEVIN','DUBLIN',9,'RED',9,4);\n");
EXEC SQL INSERT INTO CTS1.TEST12849A VALUES(4,'KEVIN','DUBLIN',9,'RED',9,4);
printf("\n");

printf("GET DIAGNOSTICS\n");
printf("EXCEPTION 1\n");
printf(":rstate = RETURNED_SQLSTATE,\n");
printf(":cntnam = CONSTRAINT_NAME;\n");
EXEC SQL GET DIAGNOSTICS
         EXCEPTION 1
         :rstate = RETURNED_SQLSTATE,
         :cntnam = CONSTRAINT_NAME;
strcpy (SQLSTATE, rstate);
printf("RETURNED_SQLSTATE should be 23000; its value is %s\n", rstate); 
printf("CONSTRAINT_NAME   should be CONSTR_1; its value is %s\n", cntnam);
NOSUBCLASS();
if (strncmp(NORMSQ, "23000", 5) != 0)
  flag = 0;
if (strncmp(NORMSQ, "23000", 5) == 0 && strncmp(NORMSQ, SQLSTATE, 5) != 0)
  printf("Valid implementation-defined SQLSTATE accepted.\n");
if (strncmp(cntnam,"CONSTR_1",8) != 0)
 flag = 0;
printf("\n");

/* Initialise host variables */
strcpy(rstate,"xxxxx");
strcpy(cntnam,"xxxxxxxx");

/*Insert one more row in the table attempting to insert in*/
/* the column associated with the other referential constraint */

printf("INSERT INTO CTS1.TEST12849A VALUES(5,'FOO','LONDON',5,'GREEN',2,5);\n");
EXEC SQL INSERT INTO CTS1.TEST12849A VALUES(5,'FOO','LONDON',5,'GREEN',2,5);
printf("\n");

printf("GET DIAGNOSTICS\n");
printf("EXCEPTION 1\n");
printf(":rstate = RETURNED_SQLSTATE,\n");
printf(":cntnam = CONSTRAINT_NAME;\n");
EXEC SQL GET DIAGNOSTICS
         EXCEPTION 1
         :rstate = RETURNED_SQLSTATE,
         :cntnam = CONSTRAINT_NAME;
strcpy (SQLSTATE, rstate);
printf("RETURNED_SQLSTATE should be 23000; its value is %s\n", rstate); 
printf("CONSTRAINT_NAME   should be CONSTR_3; its value is %s\n", cntnam);
NOSUBCLASS();
if (strncmp(NORMSQ, "23000", 5) != 0)
  flag = 0;
if (strncmp(NORMSQ, "23000", 5) == 0 && strncmp(NORMSQ, SQLSTATE, 5) != 0)
  printf("Valid implementation-defined SQLSTATE accepted.\n");
if (strncmp(cntnam,"CONSTR_3",8) != 0)
 flag = 0;
printf("\n");

/* undo the insertion of the rows */
printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       xts751.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7051','pass','PC');
       }
     else
       {
          printf("\n\n       xts751.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7051','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7051 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

/*  EMBEDDED C (file "IST007.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1993/06/22 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  IST007.PC                                                    */
/*  WRITTEN BY:  David W. Flater                                 */
/*                                                               */
/*    THIS ROUTINE TESTS THE INFORMATION SCHEMA FOR              */
/*    TRANSITIONAL SQL.                                          */
/*                                                               */
/*  REFERENCES                                                   */
/*    ANSI SQL-1992                                              */
/*      21 Information Schema and Definition Schema              */
/*    X3H2-93-389  Corrections to FIPS Transitional SQL          */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
long ctr1;
long ctr2;
char catlog[129];
char junk1[40];
char junk2[40];
char junk3[40];
char junk4[40];
char junk5[40];
char junk6[40];
char junk7[40];
char junk8[40];
char junk9[40];
char junk10[40];
long junk11;
short indic1;
short indic2;
short indic3;
short indic4;
short indic5;
short indic6;
short indic7;
short indic8;
short indic9;
short indica;
short indicb;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"FLATER            ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, ist007.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0609 ********************/
flag = 1;

/* Transitional SQL.  USAGE_PRIVILEGES is required for        */
/* TSQL, but domains, character sets, collations, and         */
/* translations are not.  This test also checks for existence */
/* of columns pertaining to domains, character sets,          */
/* collations, and translations in the other TSQL data        */
/* structures.                                                */

/* FIPS PUB 127-2 section 14.2 # 35 says:                     */
/*   In Entry SQL or Intermediate SQL, some of these tables   */
/* may have empty or trivial contents, but an implementation  */
/* supporting this feature is required to process statements  */
/* that properly reference any of these tables.               */

     printf("                  TEST0609 \n");
     printf("Orphaned IS data structures, Transitional SQL\n");
     printf("         Reference FIPS PUB 127-2;\n");
     printf("Also ANSI X3H2-93-148 Corrections to ANSI SQL-1992,\n");
     printf("  page 16 -- changes to COLUMNS view,\n");
     printf("and X3H2-93-389  Corrections to FIPS Transitional SQL\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");
     ctr1 = -1;

/* Catalog names are Full SQL.  Make sure that there is  */
/* exactly one catalog name in all the TSQL INFO_        */
/* SCHEM data structures.                                */

printf ("SELECT COUNT (DISTINCT TABLE_CAT)\n");
printf ("INTO :ctr1\n");
printf ("FROM INFO_SCHEM.TABLES;\n");

EXEC SQL SELECT COUNT (DISTINCT TABLE_CAT)
INTO :ctr1
FROM INFO_SCHEM.TABLES;

CHCKOK ();
printf ("ctr1 should be 1; its value is %ld\n\n", ctr1);
if (ctr1 != 1)
  flag = 0;

printf ("SELECT COUNT (DISTINCT TABLE_CAT)\n");
printf ("INTO :ctr1\n");
printf ("FROM INFO_SCHEM.VIEWS;\n");

EXEC SQL SELECT COUNT (DISTINCT TABLE_CAT)
INTO :ctr1
FROM INFO_SCHEM.VIEWS;

CHCKOK ();
printf ("ctr1 should be 1; its value is %ld\n\n", ctr1);
if (ctr1 != 1)
  flag = 0;

printf ("SELECT COUNT (DISTINCT TABLE_CAT)\n");
printf ("INTO :ctr1\n");
printf ("FROM INFO_SCHEM.COLUMNS;\n");

EXEC SQL SELECT COUNT (DISTINCT TABLE_CAT)
INTO :ctr1
FROM INFO_SCHEM.COLUMNS;

CHCKOK ();
printf ("ctr1 should be 1; its value is %ld\n\n", ctr1);
if (ctr1 != 1)
  flag = 0;

printf ("SELECT COUNT (DISTINCT CAT_NAME)\n");
printf ("INTO :ctr1\n");
printf ("FROM INFO_SCHEM.SCHEMATA;\n");

EXEC SQL SELECT COUNT (DISTINCT CAT_NAME)
INTO :ctr1
FROM INFO_SCHEM.SCHEMATA;

CHCKOK ();
printf ("ctr1 should be 1; its value is %ld\n\n", ctr1);
if (ctr1 != 1)
  flag = 0;

printf ("SELECT COUNT (DISTINCT TABLE_CAT)\n");
printf ("INTO :ctr1\n");
printf ("FROM INFO_SCHEM.TABLE_PRIVILEGES;\n");

EXEC SQL SELECT COUNT (DISTINCT TABLE_CAT)
INTO :ctr1
FROM INFO_SCHEM.TABLE_PRIVILEGES;

CHCKOK ();
printf ("ctr1 should be 1; its value is %ld\n\n", ctr1);
if (ctr1 != 1)
  flag = 0;

printf ("SELECT COUNT (DISTINCT TABLE_CAT)\n");
printf ("INTO :ctr1\n");
printf ("FROM INFO_SCHEM.COLUMN_PRIVILEGES;\n");

EXEC SQL SELECT COUNT (DISTINCT TABLE_CAT)
INTO :ctr1
FROM INFO_SCHEM.COLUMN_PRIVILEGES;

CHCKOK ();
printf ("ctr1 should be 1; its value is %ld\n\n", ctr1);
if (ctr1 != 1)
  flag = 0;

printf ("SELECT COUNT (DISTINCT OBJECT_CAT)\n");
printf ("INTO :ctr1\n");
printf ("FROM INFO_SCHEM.USAGE_PRIVILEGES;\n");

EXEC SQL SELECT COUNT (DISTINCT OBJECT_CAT)
INTO :ctr1
FROM INFO_SCHEM.USAGE_PRIVILEGES;

/* Relaxed pass condition in case it's empty. */

CHCKOK ();
printf ("ctr1 should be 0 or 1; its value is %ld\n\n", ctr1);
if (ctr1 != 0 && ctr1 != 1)
  flag = 0;

printf("SELECT TABLE_CAT INTO :catlog\n");
printf("FROM INFO_SCHEM.TABLES\n");
printf("WHERE TABLE_NAME = 'WCOV';\n");

/* Note to translator:  catlog is too long to initialize the entire length. */
strcpy (catlog, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
EXEC SQL SELECT TABLE_CAT INTO :catlog
FROM INFO_SCHEM.TABLES
WHERE TABLE_NAME = 'WCOV';
CHCKOK ();
printf ("catlog is '%s'\n\n", catlog);

printf ("IMPORTANT:  If SQLSTATE indicated truncation,\n");
printf ("increase the size of the catlog string and re-\n");
printf ("run the test; otherwise you will fail needlessly.\n\n");

/* This is overkill but it checks for NULLs in TABLES. */

printf("SELECT COUNT(*) INTO :ctr1\n");
printf("FROM INFO_SCHEM.TABLES\n");
printf("WHERE TABLE_CAT <> :catlog\n");
printf("OR TABLE_CAT IS NULL;\n");

ctr1 = -1;
EXEC SQL SELECT COUNT(*) INTO :ctr1
FROM INFO_SCHEM.TABLES
WHERE TABLE_CAT <> :catlog
OR TABLE_CAT IS NULL;

CHCKOK ();
printf ("ctr1 should be 0; its value is %ld\n\n", ctr1);
if (ctr1 != 0)
  flag = 0;

printf("SELECT COUNT(*) INTO :ctr1\n");
printf("FROM INFO_SCHEM.VIEWS\n");
printf("WHERE TABLE_CAT <> :catlog\n");
printf("OR TABLE_CAT IS NULL;\n");

ctr1 = -1;
EXEC SQL SELECT COUNT(*) INTO :ctr1
FROM INFO_SCHEM.VIEWS
WHERE TABLE_CAT <> :catlog
OR TABLE_CAT IS NULL;

CHCKOK ();
printf ("ctr1 should be 0; its value is %ld\n\n", ctr1);
if (ctr1 != 0)
  flag = 0;

printf("SELECT COUNT(*) INTO :ctr1\n");
printf("FROM INFO_SCHEM.COLUMNS\n");
printf("WHERE TABLE_CAT <> :catlog\n");
printf("OR TABLE_CAT IS NULL;\n");

ctr1 = -1;
EXEC SQL SELECT COUNT(*) INTO :ctr1
FROM INFO_SCHEM.COLUMNS
WHERE TABLE_CAT <> :catlog
OR TABLE_CAT IS NULL;

CHCKOK ();
printf ("ctr1 should be 0; its value is %ld\n\n", ctr1);
if (ctr1 != 0)
  flag = 0;

printf("SELECT COUNT(*) INTO :ctr1\n");
printf("FROM INFO_SCHEM.SCHEMATA\n");
printf("WHERE CAT_NAME <> :catlog\n");
printf("OR CAT_NAME IS NULL;\n");

ctr1 = -1;
EXEC SQL SELECT COUNT(*) INTO :ctr1
FROM INFO_SCHEM.SCHEMATA
WHERE CAT_NAME <> :catlog
OR CAT_NAME IS NULL;

CHCKOK ();
printf ("ctr1 should be 0; its value is %ld\n\n", ctr1);
if (ctr1 != 0)
  flag = 0;

printf("SELECT COUNT(*) INTO :ctr1\n");
printf("FROM INFO_SCHEM.TABLE_PRIVILEGES\n");
printf("WHERE TABLE_CAT <> :catlog\n");
printf("OR TABLE_CAT IS NULL;\n");

ctr1 = -1;
EXEC SQL SELECT COUNT(*) INTO :ctr1
FROM INFO_SCHEM.TABLE_PRIVILEGES
WHERE TABLE_CAT <> :catlog
OR TABLE_CAT IS NULL;

CHCKOK ();
printf ("ctr1 should be 0; its value is %ld\n\n", ctr1);
if (ctr1 != 0)
  flag = 0;

printf("SELECT COUNT(*) INTO :ctr1\n");
printf("FROM INFO_SCHEM.COLUMN_PRIVILEGES\n");
printf("WHERE TABLE_CAT <> :catlog\n");
printf("OR TABLE_CAT IS NULL;\n");

ctr1 = -1;
EXEC SQL SELECT COUNT(*) INTO :ctr1
FROM INFO_SCHEM.COLUMN_PRIVILEGES
WHERE TABLE_CAT <> :catlog
OR TABLE_CAT IS NULL;

CHCKOK ();
printf ("ctr1 should be 0; its value is %ld\n\n", ctr1);
if (ctr1 != 0)
  flag = 0;

printf("SELECT COUNT(*) INTO :ctr1\n");
printf("FROM INFO_SCHEM.USAGE_PRIVILEGES\n");
printf("WHERE OBJECT_CAT <> :catlog\n");
printf("OR OBJECT_CAT IS NULL;\n");

ctr1 = -1;
EXEC SQL SELECT COUNT(*) INTO :ctr1
FROM INFO_SCHEM.USAGE_PRIVILEGES
WHERE OBJECT_CAT <> :catlog
OR OBJECT_CAT IS NULL;

CHCKOK ();
printf ("ctr1 should be 0; its value is %ld\n\n", ctr1);
if (ctr1 != 0)
  flag = 0;

/* Remaining orphaned columns in COLUMNS. */

printf("SELECT CHAR_SET_CAT,\n");
printf("CHAR_SET_SCHEM,\n");
printf("CHAR_SET_NAME,\n");
printf("COLLATION_CAT,\n");
printf("COLLATION_SCHEM,\n");
printf("COLLATION_NAME,\n");
printf("DOMAIN_CAT,\n");
printf("DOMAIN_SCHEM,\n");
printf("DOMAIN_NAME,\n");
printf("INTERVAL_TYPE,\n");
printf("INTERVAL_PREC\n");
printf("INTO :junk1:indic1,\n");
printf(":junk2:indic2,\n");
printf(":junk3:indic3,\n");
printf(":junk4:indic4,\n");
printf(":junk5:indic5,\n");
printf(":junk6:indic6,\n");
printf(":junk7:indic7,\n");
printf(":junk8:indic8,\n");
printf(":junk9:indic9,\n");
printf(":junk10:indica,\n");
printf(":junk11:indicb\n");
printf("FROM INFO_SCHEM.COLUMNS\n");
printf("WHERE TABLE_SCHEM = 'FLATER'\n");
printf("AND TABLE_NAME = 'USIG'\n");
printf("AND COLUMN_NAME = 'C1';\n");

EXEC SQL SELECT CHAR_SET_CAT,
CHAR_SET_SCHEM,
CHAR_SET_NAME,
COLLATION_CAT,
COLLATION_SCHEM,
COLLATION_NAME,
DOMAIN_CAT,
DOMAIN_SCHEM,
DOMAIN_NAME,
INTERVAL_TYPE,
INTERVAL_PREC
INTO :junk1:indic1,
:junk2:indic2,
:junk3:indic3,
:junk4:indic4,
:junk5:indic5,
:junk6:indic6,
:junk7:indic7,
:junk8:indic8,
:junk9:indic9,
:junk10:indica,
:junk11:indicb
FROM INFO_SCHEM.COLUMNS
WHERE TABLE_SCHEM = 'FLATER'
AND TABLE_NAME = 'USIG'
AND COLUMN_NAME = 'C1';

/* Ignore values of parameters */
printf ("SQLCODE should be >= 0; its value is %ld\n", SQLCODE);
if (SQLCODE < 0)
  flag = 0;
printf ("SQLSTATE should be 00000 or 01004; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "00000", 5) != 0 && strncmp (NORMSQ, "01004", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");

/* Remaining orphaned columns in SCHEMATA. */

printf("SELECT DEF_CHAR_SET_CAT,\n");
printf("DEF_CHAR_SET_SCHEM,\n");
printf("DEF_CHAR_SET_NAME\n");
printf("INTO :junk1:indic1,\n");
printf(":junk2:indic2,\n");
printf(":junk3:indic3\n");
printf("FROM INFO_SCHEM.SCHEMATA\n");
printf("WHERE SCHEM_NAME = 'FLATER';\n");

EXEC SQL SELECT DEF_CHAR_SET_CAT,
DEF_CHAR_SET_SCHEM,
DEF_CHAR_SET_NAME
INTO :junk1:indic1,
:junk2:indic2,
:junk3:indic3
FROM INFO_SCHEM.SCHEMATA
WHERE SCHEM_NAME = 'FLATER';

/* Ignore values of parameters */
printf ("SQLCODE should be >= 0; its value is %ld\n", SQLCODE);
if (SQLCODE < 0)
  flag = 0;
printf ("SQLSTATE should be 00000 or 01004; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "00000", 5) != 0 && strncmp (NORMSQ, "01004", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");

/* The regular rigamarole for USAGE_PRIVILEGES. */

/* Verify visibility condition */

ctr1 = -1;
printf("SELECT COUNT(*) INTO :ctr1\n");
printf("FROM INFO_SCHEM.USAGE_PRIVILEGES\n");
printf("WHERE GRANTEE NOT IN ('PUBLIC', USER)\n");
printf("AND GRANTOR <> USER;\n");

EXEC SQL SELECT COUNT(*) INTO :ctr1
FROM INFO_SCHEM.USAGE_PRIVILEGES
WHERE GRANTEE NOT IN ('PUBLIC', USER)
AND GRANTOR <> USER;

CHCKOK ();
printf ("ctr1 should be 0; its value is %ld\n\n", ctr1);
if (ctr1 != 0)
  flag = 0;

/* Verify existence of 'USAGE' AS PRIVILEGE_TYPE */

ctr1 = -1;
printf("SELECT COUNT(*) INTO :ctr1\n");
printf("FROM INFO_SCHEM.USAGE_PRIVILEGES\n");
printf("WHERE PRIVILEGE_TYPE <> 'USAGE'\n");
printf("OR PRIVILEGE_TYPE IS NULL;\n");

EXEC SQL SELECT COUNT(*) INTO :ctr1
FROM INFO_SCHEM.USAGE_PRIVILEGES
WHERE PRIVILEGE_TYPE <> 'USAGE'
OR PRIVILEGE_TYPE IS NULL;

CHCKOK ();
printf ("ctr1 should be 0; its value is %ld\n\n", ctr1);
if (ctr1 != 0)
  flag = 0;


/* Verify CONSTRAINT USAGE_PRIVILEGES_IS_GRANTABLE_NOT_NULL */

printf("SELECT COUNT(*) INTO :ctr1\n");
printf("FROM INFO_SCHEM.USAGE_PRIVILEGES\n");
printf("WHERE IS_GRANTABLE IS NULL;\n");

ctr1 = -1;
EXEC SQL SELECT COUNT(*) INTO :ctr1
FROM INFO_SCHEM.USAGE_PRIVILEGES
WHERE IS_GRANTABLE IS NULL;

CHCKOK ();
printf ("ctr1 should be 0; its value is %ld\n\n", ctr1);
if (ctr1 != 0)
  flag = 0;

/* Verify CONSTRAINT USAGE_PRIVILEGES_IS_GRANTABLE_CHECK */

printf("SELECT COUNT(*) INTO :ctr1\n");
printf("FROM INFO_SCHEM.USAGE_PRIVILEGES\n");
printf("WHERE IS_GRANTABLE NOT IN\n");
printf("('YES', 'NO');\n");

ctr1 = -1;
EXEC SQL SELECT COUNT(*) INTO :ctr1
FROM INFO_SCHEM.USAGE_PRIVILEGES
WHERE IS_GRANTABLE NOT IN
('YES', 'NO');

CHCKOK ();
printf ("ctr1 should be 0; its value is %ld\n\n", ctr1);
if (ctr1 != 0)
  flag = 0;

/* Verify constraint USAGE_PRIVILEGES_PRIMARY_KEY */

printf("SELECT COUNT(*) INTO :ctr1\n");
printf("FROM INFO_SCHEM.USAGE_PRIVILEGES\n");
printf("WHERE GRANTOR IS NULL\n");
printf("OR GRANTEE IS NULL\n");
printf("OR OBJECT_SCHEM IS NULL\n");
printf("OR OBJECT_NAME IS NULL\n");
printf("OR OBJECT_TYPE IS NULL;\n");

ctr1 = -1;
EXEC SQL SELECT COUNT(*) INTO :ctr1
FROM INFO_SCHEM.USAGE_PRIVILEGES
WHERE GRANTOR IS NULL
OR GRANTEE IS NULL
OR OBJECT_SCHEM IS NULL
OR OBJECT_NAME IS NULL
OR OBJECT_TYPE IS NULL;

CHCKOK ();
printf ("ctr1 should be 0; its value is %ld\n\n", ctr1);
if (ctr1 != 0)
  flag = 0;

ctr1 = -1;
printf("SELECT COUNT(*) INTO :ctr1\n");
printf("FROM INFO_SCHEM.USAGE_PRIVILEGES;\n");

EXEC SQL SELECT COUNT(*) INTO :ctr1
FROM INFO_SCHEM.USAGE_PRIVILEGES;

CHCKOK ();
printf ("\n");

printf("SELECT COUNT(*) INTO :ctr2\n");
printf("FROM INFO_SCHEM.USAGE_PRIVILEGES A,\n");
printf("INFO_SCHEM.USAGE_PRIVILEGES B\n");
printf("WHERE A.GRANTOR = B.GRANTOR\n");
printf("AND A.GRANTEE = B.GRANTEE\n");
printf("AND A.OBJECT_SCHEM = B.OBJECT_SCHEM\n");
printf("AND A.OBJECT_NAME = B.OBJECT_NAME\n");
printf("AND A.OBJECT_TYPE = B.OBJECT_TYPE;\n");

ctr2 = -1;
EXEC SQL SELECT COUNT(*) INTO :ctr2
FROM INFO_SCHEM.USAGE_PRIVILEGES A,
INFO_SCHEM.USAGE_PRIVILEGES B
WHERE A.GRANTOR = B.GRANTOR
AND A.GRANTEE = B.GRANTEE
AND A.OBJECT_SCHEM = B.OBJECT_SCHEM
AND A.OBJECT_NAME = B.OBJECT_NAME
AND A.OBJECT_TYPE = B.OBJECT_TYPE;

CHCKOK ();
printf ("ctr1 should be equal to ctr2.\n");
printf ("ctr1 is %ld; ctr2 is %ld.\n\n", ctr1, ctr2);
if (ctr1 != ctr2)
  flag = 0;

/* It might be reasonable to check the row for SQL_TEXT, but */
/* I'll omit it since it's an orphaned feature.  The only    */
/* requirement is that, IF there is anything at all in the   */
/* table, then it meets all of the above constraints.        */

     EXEC SQL ROLLBACK WORK;

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0609','pass','PC');
       }
     else
       {
          printf("\n\n       ist007.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0609','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0609 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

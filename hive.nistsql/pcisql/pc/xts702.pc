/*  EMBEDDED C (file " XTS702.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS702.PC                                                   */
/*  WRITTEN  BY : Manolis Megaloikonomou                         */
/*  REVIEWED BY : Nickos  Backalidis                             */    
/*                                                               */
/*  This program tests :                                         */
/*               a) LIKE with unrestricted <match value>         */
/*               b) LIKE with general character value for        */
/*                  pattern and escape                           */
/*               c) LIKE with zero-length escape                 */
/*                                                               */
/*---------------------------------------------------------------*/
/*                            TEST7007                           */
/*                                                               */
/*               LIKE with unrestricted <match value>            */
/*           References                                          */
/*               8.5 FT.2    <match value> format                */
/*               8.5 SR.1                                        */
/*               8.5 GR.3                                        */
/*               8.5 LR.2.a  Raising the rule that the match     */
/*                           value shall be a <column reference> */
/*               6.13 FT.5   <character primary>                 */
/*               6.11 FT.2   <value expression primary>          */
/*               6.2  FT.2   <unsigned value specification>      */
/*               F#28        LIKE enhancements                   */
/*                                                               */
/*---------------------------------------------------------------*/
/*                          TEST7008                             */
/*                                                               */
/*               LIKE with general char. value for pattern &     */
/*		     escape                                          */
/*           References:                                         */
/*               8.5 FT.3    <pattern> format                    */
/*               8.5 FT.4    <escape character>                  */
/*               8.5 LR.2.b  Raising the rule that the pattern   */
/*                           shall be a <value specification>    */
/*               8.5 LR.2.c  Raising the rule that the escape    */
/*                           character shall be a <value         */   
/*                           specification>                      */
/*               F#28        LIKE enhancements                   */
/*                                                               */
/*---------------------------------------------------------------*/
/*                             TEST7009                          */
/*                                                               */
/*               LIKE with zero-length escape                    */
/*           References                                          */
/*               8.5 FT.4    <escape character> format           */
/*               8.5 GR.3.a.i The length of the string in        */
/*                           <escape character> should be 1      */
/*               8.5 LR.2.c  Raising the rule that the escape    */
/*                           character shall be a <value         */
/*                           specification>     	           */
/*               6.7 FT.7    <trim function>                     */
/*               F#28        LIKE enhancements                   */
/*               F#7         TRIM support is required            */
/*                                                               */
/*---------------------------------------------------------------*/
/*                                                               */
/*  DATE LAST ALTERED  14/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 01/12/95:                   */
/*       Initialize ALPNUM                                       */
/*       Respect length of strings                               */
/*       Tide up printouts                                       */
/*       Modify values inserted in STAFF (test7008)              */
/*       Modify tests according to test specifications           */
/*                                                               */
/*  QA Status: QA check                                          */
/*                                                               */
/* Revised by DWF 1/19/96                                        */
/*     Fixed exceptions                                          */
/*     Fixed printout                                            */
/*     Fixed check for wrong SQLCODE                             */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h> 
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION; 
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 char hv2[25];
 long  coun;
EXEC SQL END DECLARE SECTION; 
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
int    flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid); 
strcpy(uidx,"not logged in, not"); 
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK; 
if (strncmp(uid,uidx,4) != 0)
     {
      printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
      exit(99);
     }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts702.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
 time(&cal);
 printf("\n Time run:  %s\n", ctime(&cal));

/******************** BEGIN TEST7007 ********************/

flag = 1;
printf("                  TEST7007 \n");
printf("    LIKE with unrestricted <match value>\n");
printf("References:\n");
printf("    8.5 FT.2   <match value> format\n");
printf("    8.5 SR.1\n");
printf("    8.5 GR.3\n");
printf("    8.5 LR.2.a Raising the rule that the match value\n");
printf("               shall be a <column reference>\n");
printf("    6.13 FT.5  <character primary>\n");
printf("    6.11 FT.2  <value expression primary>\n");
printf("    6.2  FT.2  <unsigned value specification>\n");
printf("    F#28       LIKE enhancements\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* execute a series of select statements which include */ 
/* a like predicate                                    */
/* match values should be of types : character literal */
/*                      character string host variable */
/*                                                USER */

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

/* Subtest 1 */
coun = 99;
printf("SELECT COUNT(*) INTO :coun FROM STAFF\n");
printf("WHERE 'Alice' LIKE 'Alice';\n");
EXEC SQL SELECT COUNT(*)
     INTO   :coun
     FROM   STAFF
     WHERE  'Alice' LIKE 'Alice';
CHCKOK();
printf("coun should be 5; its value is %ld\n",coun);
  if (coun != 5)
     flag = 0;
printf("\n");
 
/* Subtest 2 */
strcpy(hv2,"Equal_literal");
printf ("hv2 = '%s'\n", hv2);
coun = 99;
printf("SELECT COUNT(*) INTO :coun FROM STAFF\n");
printf("WHERE :hv2 NOT LIKE 'Eq_alS_literal%%' ESCAPE 'S';\n");
EXEC SQL SELECT COUNT(*)
     INTO   :coun
     FROM   STAFF
     WHERE  :hv2 NOT LIKE 'Eq_alS_literal%' ESCAPE 'S';
CHCKOK();
printf("coun should be 0; its value is %ld\n",coun);
  if (coun != 0)
     flag = 0;
printf("\n");

/* Subtest 3 */
coun = 0;
printf("SELECT COUNT(*) INTO :coun FROM STAFF\n");
printf("WHERE USER LIKE 'CTS1%%';\n");
EXEC SQL SELECT COUNT(*)
     INTO   :coun
     FROM   STAFF
     WHERE  USER LIKE 'CTS1%';
CHCKOK();
printf("coun should be 5; its value is %ld\n",coun);
  if (coun != 5)
     flag = 0;
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();

     if ( flag == 1 )
       {
          printf("\n\n       xts702.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7007','pass','PC');
       }
     else
       {
          printf("\n\n       xts702.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7007','fail','PC'); 
          errcnt = errcnt + 1;
       }
     
     printf("========================================\n\n");

     EXEC SQL COMMIT WORK; 

/******************** END TEST7007 *********************/
/******************** BEGIN TEST7008 *******************/

flag = 1;
printf("                  TEST7008 \n");
printf("    LIKE with general char. value for pattern & escape\n");
printf("References:\n");
printf("    8.5 FT.3   <pattern> format\n");
printf("    8.5 FT.4   <escape character> format\n");
printf("    8.5 LR.2.b Raising the rule that the pattern\n");
printf("               shall be a <value specification>\n");
printf("    8.5 LR.2.c Raising the rule that the escape character\n");
printf("               shall be a <value specification>\n");
printf("    F#28       LIKE enhancements\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* execute a series of select statements with LIKE */
/* predicates where the match pattern and/or escape */
/* value is a <general character value> */

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

/* Subtest 1 */
coun = 0;
printf("SELECT COUNT(*) INTO :coun FROM STAFF\n");
printf("WHERE EMPNAME LIKE EMPNAME;\n");
EXEC SQL SELECT COUNT(*)
     INTO   :coun
     FROM   STAFF
     WHERE  EMPNAME LIKE EMPNAME; 
CHCKOK();
printf("coun should be 5; its value is %ld\n",coun);
  if (coun != 5)
     flag = 0;
printf("\n");

/* Subtest 2 */
printf("INSERT INTO STAFF\n");
printf("VALUES('E6','Theodora_FL',14,'T%%S_FL%%%%%%%%%%%%%%%%%%');\n");
EXEC SQL INSERT INTO STAFF
     VALUES('E6','Theodora_FL',14,'T%S_FL%%%%%%%%%'); 
CHCKOK();
printf("\n");

coun = 0;
printf("SELECT COUNT(*) INTO :coun FROM STAFF WHERE\n");
printf("EMPNAME LIKE CITY ESCAPE 'S';\n");
EXEC SQL SELECT COUNT(*)
     INTO   :coun
     FROM   STAFF
     WHERE  EMPNAME LIKE CITY ESCAPE 'S'; 
CHCKOK();
printf("coun should be 1; its value is %ld\n",coun);
  if (coun != 1)
     flag = 0;
printf("\n");
  
/* Subtest 3 */
printf("DELETE FROM STAFF;\n");
EXEC SQL DELETE FROM STAFF;
CHCKOK();
printf("\n");

printf("INSERT INTO STAFF\n");
printf("VALUES('S','Dana%%ELFT',14,'D%%S%%%%%%%%%%%%%%%%%%%%%%%%');\n");
EXEC SQL INSERT INTO STAFF
     VALUES('S','Dana%ELFT',14,'D%S%%%%%%%%%%%%'); 
CHCKOK();
printf("\n");

coun = 0;
printf("SELECT COUNT(*) INTO :coun FROM STAFF WHERE\n");
printf("EMPNAME LIKE CITY ESCAPE EMPNUM;\n");
EXEC SQL SELECT COUNT(*)
     INTO   :coun
     FROM   STAFF
     WHERE  EMPNAME LIKE CITY ESCAPE EMPNUM; 
CHCKOK();
printf("coun should be 1; its value is %ld\n",coun);
  if (coun != 1)
     flag = 0;
printf("\n");
  
/* Subtest 4 */
coun = 0;
printf("SELECT COUNT(*) INTO :coun FROM STAFF WHERE\n");
printf("'Del%%' LIKE CITY ESCAPE EMPNUM;\n");
EXEC SQL SELECT COUNT(*)
     INTO   :coun
     FROM   STAFF
     WHERE  'Del%' LIKE CITY ESCAPE EMPNUM; 
CHCKOK();
printf("coun should be 1; its value is %ld\n",coun);
  if (coun != 1)
     flag = 0;
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK; 
CHCKOK();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       xts702.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7008','pass','PC'); 
       }
     else
       {
          printf("\n\n       xts702.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7008','fail','PC'); 
          errcnt = errcnt + 1;
       }
     
     printf("========================================\n\n");

     EXEC SQL COMMIT WORK; 


/******************** END TEST7008 *********************/
/******************** BEGIN TEST7009 ********************/
flag = 1;

     printf("                  TEST7009 \n");
     printf("    LIKE with zero-length escape\n");
     printf("References:\n");
     printf("    8.5 FT.4     <escape character> format\n");
     printf("    8.5 GR.3.a.i The length of the string in\n");
     printf("                 <escape character> should be 1\n");
     printf("    8.5 LR.2.c   Raising the rule that the escape\n");
     printf("                 character shall be a <value specification>\n");
     printf("    6.7 FT.7     <trim function>\n");
     printf("    F#28         LIKE enhancements\n");
     printf("    F#7          TRIM support is required\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Initialise error reporting variables */
     SQLCODE = -1;
     strcpy(SQLSTATE, "xxxxx");

/* execute a select where the length in characters of the*/ 
/* result of the <character value expression> specified  */
/* as the <escape character> in a like predicate is zero */
/* this should not succeed */

printf("DELETE FROM STAFF;\n");
EXEC SQL DELETE FROM STAFF;
CHCKOK();
printf("\n");

printf("INSERT INTO STAFF\n");
printf("VALUES('   ','Dana%%ELFT',14,'D%%0%%%%%%%%%%%%%%%%%%%%%%%%');\n");
EXEC SQL INSERT INTO STAFF
     VALUES('   ','Dana%ELFT',14,'D%0%%%%%%%%%%%%'); 
CHCKOK();
printf("\n");

/* this should not succeed */
SQLCODE = 10000;
strcpy(SQLSTATE, "xxxxx");
coun = 99;
printf("SELECT COUNT(*) INTO :coun FROM STAFF WHERE\n");
printf("EMPNAME LIKE CITY ESCAPE TRIM(EMPNUM);\n");
EXEC SQL SELECT COUNT(*)
     INTO   :coun
     FROM   STAFF
     WHERE  EMPNAME LIKE CITY ESCAPE TRIM(EMPNUM); 
printf("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
SQLSTATE[5] = '\0';
printf("SQLSTATE should be 22019;its value is %s\n",SQLSTATE);
NOSUBCLASS();
if (SQLCODE >= 0 || strncmp(NORMSQ, "22019", 5) != 0)
     flag = 0;
if (strncmp(NORMSQ, "22019", 5) == 0 && strncmp(NORMSQ, SQLSTATE, 5) != 0)
     printf("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK; 
CHCKOK();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       xts702.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7009','pass','PC'); 
       }
     else
       {
          printf("\n\n       xts702.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7009','fail','PC'); 
          errcnt = errcnt + 1;
       }
     
     printf("========================================\n\n");

     EXEC SQL COMMIT WORK; 

/******************** END TEST7009 *********************/

     exit(errcnt);
}
void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

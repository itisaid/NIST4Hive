/*  EMBEDDED C (file " XTS763.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS763.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  Access to CHARACTER_SETS view                                */
/*                                                               */
/*  REFERENCES                                                   */
/*    21.3.23 -- CHARACTER_SETS base table                       */
/*    21.2.18 -- CHARACTER_SETS view                             */
/*    10.4       <character set specification>                   */
/*    F#2     -- Basic Information schema                        */
/*    F#45    -- Character set definition                        */
/*                                                               */
/*  DATE LAST ALTERED  20/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 18/12/95                    */
/*         Print timestamp                                       */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*                                                               */
/*  QA STATUS : QA CHECK                                         */
/*                                                               */
/* Rewritten by DWF 1996-02-21                                   */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
long coun;
char chr1[31];
char chr2[31];
char chr3[31];
long num1;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if(strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts763.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run :  %s\n", ctime(&cal));

/******************** BEGIN TEST7063 ********************/
flag = 1;
printf("                   TEST7063\n");
printf("    Access to CHARACTER_SETS view \n");
printf(" References \n");                                           
printf("    21.3.23 -- CHARACTER_SETS base table \n");                      
printf("    21.2.18 -- CHARACTER_SETS view \n");         
printf("    10.4       <character set specification>\n");
printf("    F#2     -- Basic Information schema \n");
printf("    F#45    -- Character set definition \n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

coun = 0;
printf("SELECT COUNT(*) INTO :coun\n");
printf("  FROM INFORMATION_SCHEMA.CHARACTER_SETS\n");
printf("  WHERE CHARACTER_SET_SCHEMA = 'INFORMATION_SCHEMA'\n");
printf("  AND CHARACTER_SET_NAME = 'SQL_TEXT'\n");
printf("  AND DEFAULT_COLLATE_SCHEMA = 'INFORMATION_SCHEMA'\n");
printf("  AND DEFAULT_COLLATE_NAME = 'SQL_TEXT'\n");
printf("  AND CHARACTER_SET_CATALOG IS NOT NULL\n");
printf("  AND DEFAULT_COLLATE_CATALOG IS NOT NULL\n");
printf("  AND FORM_OF_USE IS NOT NULL\n");
printf("  AND NUMBER_OF_CHARACTERS > 0;\n");
EXEC SQL SELECT COUNT(*) INTO :coun
  FROM INFORMATION_SCHEMA.CHARACTER_SETS
  WHERE CHARACTER_SET_SCHEMA = 'INFORMATION_SCHEMA'
  AND CHARACTER_SET_NAME = 'SQL_TEXT'
  AND DEFAULT_COLLATE_SCHEMA = 'INFORMATION_SCHEMA'
  AND DEFAULT_COLLATE_NAME = 'SQL_TEXT'
  AND CHARACTER_SET_CATALOG IS NOT NULL
  AND DEFAULT_COLLATE_CATALOG IS NOT NULL
  AND FORM_OF_USE IS NOT NULL
  AND NUMBER_OF_CHARACTERS > 0;
CHCKOK();
printf ("coun should be 1; its value is %ld\n\n", coun);
if (coun != 1)
  flag = 0;

coun = 0;
printf("SELECT COUNT(*) INTO :coun\n");
printf("  FROM INFORMATION_SCHEMA.CHARACTER_SETS\n");
printf("  WHERE CHARACTER_SET_SCHEMA = 'CTS1'\n");
printf("  AND CHARACTER_SET_NAME = 'CS'\n");
printf("  AND DEFAULT_COLLATE_SCHEMA = 'INFORMATION_SCHEMA'\n");
printf("  AND DEFAULT_COLLATE_NAME = 'SQL_TEXT'\n");
printf("  AND CHARACTER_SET_CATALOG IS NOT NULL\n");
printf("  AND DEFAULT_COLLATE_CATALOG IS NOT NULL\n");
printf("  AND FORM_OF_USE IS NOT NULL\n");
printf("  AND NUMBER_OF_CHARACTERS > 0;\n");
EXEC SQL SELECT COUNT(*) INTO :coun
  FROM INFORMATION_SCHEMA.CHARACTER_SETS
  WHERE CHARACTER_SET_SCHEMA = 'CTS1'
  AND CHARACTER_SET_NAME = 'CS'
  AND DEFAULT_COLLATE_SCHEMA = 'INFORMATION_SCHEMA'
  AND DEFAULT_COLLATE_NAME = 'SQL_TEXT'
  AND CHARACTER_SET_CATALOG IS NOT NULL
  AND DEFAULT_COLLATE_CATALOG IS NOT NULL
  AND FORM_OF_USE IS NOT NULL
  AND NUMBER_OF_CHARACTERS > 0;
CHCKOK();
printf ("coun should be 1; its value is %ld\n\n", coun);
if (coun != 1)
  flag = 0;

strcpy (chr1, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy (chr2, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy (chr3, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

/* All these columns should exist and contain non-null values */
/* If string truncation happens, make chr1, chr2, chr3 longer. */
printf("SELECT CHARACTER_SET_CATALOG, DEFAULT_COLLATE_CATALOG,\n");
printf("  FORM_OF_USE, NUMBER_OF_CHARACTERS INTO :chr1, :chr2, :chr3,\n");
printf("  :num1 FROM INFORMATION_SCHEMA.CHARACTER_SETS WHERE\n");
printf("  CHARACTER_SET_SCHEMA = 'CTS1' AND\n");
printf("  CHARACTER_SET_NAME = 'CS';\n");
EXEC SQL SELECT CHARACTER_SET_CATALOG, DEFAULT_COLLATE_CATALOG,
  FORM_OF_USE, NUMBER_OF_CHARACTERS INTO :chr1, :chr2, :chr3,
  :num1 FROM INFORMATION_SCHEMA.CHARACTER_SETS WHERE
  CHARACTER_SET_SCHEMA = 'CTS1' AND
  CHARACTER_SET_NAME = 'CS';
CHCKOK();
printf ("chr1 is %s\n", chr1);
printf ("chr2 is %s\n", chr2);
printf ("chr3 is %s\n", chr3);
printf ("num1 is %ld\n\n", num1);

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

 /* record results */

     if( flag == 1 )
       {
          printf("\n\n       xts763.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7063','pass','PC');
       }
     else
       {
          printf("\n\n       xts763.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7063','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7063 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

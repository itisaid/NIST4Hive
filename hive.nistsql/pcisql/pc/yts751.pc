/*  EMBEDDED C (file "YTS751.PC")  */

/* Copyright 1996 National Computing Centre Limited, */
/* and Computer Logic R&D S.A */
/* on behalf of the CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS751.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  CREATE DOMAIN as SQL procedure statement with default        */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    11.21   SR.1                                               */
/*    11.21   GR.3                                               */
/*    11.5    <default clause>                                   */
/*    21.2.5  DOMAINS view                                       */
/*    F#25    Domain definition                                  */
/*    F#3     Basic schema manipulation                          */
/*    F#2     Basic information schema                           */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-02-29                                    */
/*    Removed EXEC SQL from inside printfs                       */
/*    Initialized vars that are checked and printed              */
/*    Stopped initializing vars that aren't                      */
/*    Renamed indicators                                         */
/*    Tightened pass criteria                                    */
/*    Improved feedback                                          */
/*    Added rollback after authid                                */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short co;
char domcat[129];
char dtype[30];
long cnum;
long olen;
char colcat[129];
char colnam[129];
char colsch[129];
char chrset[129];
char chrsch[129];
char chrnme[129];
long numpre;
long numrad;
long numscl;
char domdef[11];
long dttime;
short indic1;
short indic2;
short indic3;
short indic4;
short indic5;
short indic6;
short indic7;
short indic8;
short indic9;
short indica;
short indicb;
short indicc;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
short i;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts751.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7501 ********************/
flag = 1;

     printf("                  TEST7501 \n");
     printf("   CREATE DOMAIN as SQL proc statement with default\n");
     printf("References:\n");
     printf("    11.21   SR.1\n");
     printf("    11.21   GR.3\n");
     printf("    11.5    <default clause>\n");
     printf("    21.2.5  DOMAINS view\n");
     printf("    F#25    Domain definition\n");
     printf("    F#3     Basic schema manipulation\n");
     printf("    F#2     Basic information schema\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* initialise all host variables */

strcpy(dtype, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
cnum = 99;
olen = 99;
strcpy(domdef,"jjjjjjjjjj");
indic1 = 99;
indic2 = 99;
indic3 = 99;
indic4 = 99;
indic5 = 99;
indic6 = 99;
indic7 = 99;
indic8 = 99;
indic9 = 99;
indica = 99;
indicb = 99;
indicc = 99;

/* create domain chardomain */

SQLCODE = -1;
strcpy (SQLSTATE, "xxxxx");

printf("CREATE DOMAIN chardomain\n");
printf("AS CHAR(10) DEFAULT 'MANCHESTER';\n");
EXEC SQL CREATE DOMAIN chardomain
AS CHAR(10) DEFAULT 'MANCHESTER';

CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* Ensure chardomain is referenced in DOMAINS view */

co = 0;
printf("SELECT COUNT(*) INTO :co FROM INFORMATION_SCHEMA.DOMAINS\n");
printf("WHERE DOMAIN_NAME = 'CHARDOMAIN'\n");
printf("AND DOMAIN_SCHEMA = 'CTS1'\n");
EXEC SQL SELECT COUNT(*) INTO :co
FROM INFORMATION_SCHEMA.DOMAINS
WHERE DOMAIN_NAME = 'CHARDOMAIN'
AND DOMAIN_SCHEMA = 'CTS1';

CHCKOK ();
printf("Count should equal 1, count is %d\n", co);
if (co != 1)
  flag = 0;

printf("\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("SELECT DOMAIN_CATALOG,\n");
printf("         DATA_TYPE, CHARACTER_MAXIMUM_LENGTH,\n");
printf("         CHARACTER_OCTET_LENGTH, COLLATION_CATALOG,\n");
printf("         COLLATION_SCHEMA, COLLATION_NAME,\n");
printf("         CHARACTER_SET_CATALOG, CHARACTER_SET_SCHEMA,\n");
printf("         CHARACTER_SET_NAME, NUMERIC_PRECISION,\n");
printf("         NUMERIC_PRECISION_RADIX, NUMERIC_SCALE,\n");
printf("         DATETIME_PRECISION, DOMAIN_DEFAULT\n");
printf("         INTO :domcat:indic1,\n");
printf("         :dtype, :cnum, :olen:indic2,\n");
printf("         :colcat:indic3, :colsch:indic4, :colnam:indic5,\n");
printf("         :chrset:indic6, :chrsch:indic7, :chrnme:indic8,\n");
printf("         :numpre:indic9, :numrad:indica,\n");
printf("         :numscl:indicb, :dttime:indicc,\n");
printf("         :domdef\n");
printf("         FROM INFORMATION_SCHEMA.DOMAINS\n");
printf("         WHERE DOMAIN_NAME = 'CHARDOMAIN'\n");
printf("         AND DOMAIN_SCHEMA = 'CTS1';\n");
EXEC SQL SELECT DOMAIN_CATALOG,
         DATA_TYPE, CHARACTER_MAXIMUM_LENGTH,
         CHARACTER_OCTET_LENGTH, COLLATION_CATALOG,
         COLLATION_SCHEMA, COLLATION_NAME,
         CHARACTER_SET_CATALOG, CHARACTER_SET_SCHEMA,
         CHARACTER_SET_NAME, NUMERIC_PRECISION,
         NUMERIC_PRECISION_RADIX, NUMERIC_SCALE,
         DATETIME_PRECISION, DOMAIN_DEFAULT
         INTO :domcat:indic1,
         :dtype, :cnum, :olen:indic2,
         :colcat:indic3, :colsch:indic4, :colnam:indic5,
         :chrset:indic6, :chrsch:indic7, :chrnme:indic8,
         :numpre:indic9, :numrad:indica,
         :numscl:indicb, :dttime:indicc,
         :domdef
         FROM INFORMATION_SCHEMA.DOMAINS
         WHERE DOMAIN_NAME = 'CHARDOMAIN'
         AND DOMAIN_SCHEMA = 'CTS1';

CHCKOK ();

printf("indic1 should be 0; its value is %d\n", indic1);
if (indic1 != 0)
   flag = 0;

printf("dtype should be CHARACTER; its value is %s\n", dtype);
if (strncmp(dtype,"CHARACTER                    ",29) != 0 )
   flag = 0;

printf("cnum should be 10; its value is %ld\n", cnum);
if (cnum != 10)
   flag = 0;

printf("domdef should be MANCHESTER; its value is %s\n", domdef);
if (strncmp(domdef,"MANCHESTER",10) != 0)
      flag = 0;

printf("indic2 should be 0; its value is %d\n", indic2);
if (indic2 != 0)
   flag = 0;

printf("indic3 should be 0; its value is %d\n", indic3);
if (indic3 != 0)
   flag = 0;

printf("indic4 should be 0; its value is %d\n", indic4);
if (indic4 != 0)
   flag = 0;

printf("indic5 should be 0; its value is %d\n", indic5);
if (indic5 != 0)
   flag = 0;

printf("indic6 should be 0; its value is %d\n", indic6);
if (indic6 != 0)
   flag = 0;

printf("indic7 should be 0; its value is %d\n", indic7);
if (indic7 != 0)
   flag = 0;

printf("indic8 should be 0; its value is %d\n", indic8);
if (indic8 != 0)
   flag = 0;

printf("indic9 should be -1; its value is %d\n", indic9);
if (indic9 != -1)
   flag = 0;

printf("indica should be -1; its value is %d\n", indica);
if (indica != -1)
   flag = 0;

printf("indicb should be -1; its value is %d\n", indicb);
if (indicb != -1)
   flag = 0;

printf("indicc should be -1; its value is %d\n\n", indicc);
if (indicc != -1)
   flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP DOMAIN chardomain CASCADE;\n");
EXEC SQL DROP DOMAIN chardomain CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts751.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7501','pass','PC');
       }
     else
       {
          printf("\n\n       yts751.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7501','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7501 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

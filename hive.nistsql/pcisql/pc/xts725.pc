/*  EMBEDDED C (file "XTS725.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS725.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  Flagging, Full SQL INSENSITIVE cursor                        */
/*                                                               */
/*  REFERENCES                                                   */
/*    13.1    -- <declare cursor>                                */
/*    13.2    -- <open statement>                                */
/*    13.3    -- GR.3.e.i                                        */
/*    F#79    -- Insensitive cursors                             */
/*    F#37    -- Intermediate SQL Flagging                       */
/*                                                               */
/*  DATE LAST ALTERED  14/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 04/12/95:                   */
/*       Change in the values of rows inserted in the table      */
/*                                                               */
/*  QA Status: QA check                                          */
/*                                                               */
/*  Revised by DWF 1/30/96                                       */
/*    Removed status checks after cursor definition              */
/*    Fixed char string lengths                                  */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 long c_num1;
 long c_num2;
 char c_ch1[11];
 char c_ch2[11];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts725.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run:  %s\n", ctime(&cal));

/******************** BEGIN TEST7025 ********************/
flag = 1;

printf("                 TEST7025\n");
printf("    Flagging - Full SQL INSENSITIVE cursor\n");
printf("References\n");
printf("    13.1    -- <declare cursor> \n");
printf("    13.2    -- <open statement> \n");
printf("    13.3 GR.3.e.i \n");
printf("    F#79    -- Insensitive cursors \n");
printf("    F#37    -- Intermediate SQL Flagging \n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

/* Use standard schema table CTS1.CL_STANDARD        */
/* declare an insensitive cursor based on columns of */
/* CTS1.CL_STANDARD                                  */
printf("DECLARE CLCURS INSENSITIVE CURSOR\n");
printf("FOR SELECT COL_NUM1,COL_CH1,COL_NUM2,COL_CH2\n");
printf("FROM CL_STANDARD\n");
printf("ORDER BY COL_NUM1 DESC;\n\n");
EXEC SQL DECLARE CLCURS INSENSITIVE CURSOR 
         FOR SELECT COL_NUM1, COL_CH1, COL_NUM2,COL_CH2
         FROM CL_STANDARD
         ORDER BY COL_NUM1 DESC;
  
printf("OPEN CLCURS;\n");
EXEC SQL OPEN CLCURS;
CHCKOK();
printf("\n");

/* NOW insert a row in CL_STANDARD  */
printf("INSERT INTO CL_STANDARD VALUES(1005,'KEVIN',4005,'XIOS');\n");
EXEC SQL INSERT INTO CL_STANDARD 
         VALUES(1005,'KEVIN',4005,'XIOS');   
CHCKOK();
printf("\n");

/* initialise host variables */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");
c_num1=0;
c_num2=0;

/* use a select <statement: single row> and determine */
/* that the row was inserted and is visible           */
printf("SELECT COL_NUM1,COL_CH1,COL_NUM2,COL_CH2 \n");
printf("INTO :c_num1, :c_ch1, :c_num2, :c_ch2 \n");
printf("FROM CL_STANDARD WHERE COL_NUM1 = 1005;\n");
EXEC SQL SELECT COL_NUM1,COL_CH1,COL_NUM2,COL_CH2 
         INTO :c_num1, :c_ch1, :c_num2, :c_ch2
         FROM CL_STANDARD WHERE COL_NUM1 = 1005;
CHCKOK();
printf("COL_NUM1 should be 1005;   it is : %ld\n",c_num1);
printf("COL_CH1  should be KEVIN;  it is : %s\n",c_ch1);
printf("COL_NUM2 should be 4005;   it is : %ld\n",c_num2);
printf("COL_CH2  should be XIOS;   it is : %s\n",c_ch2);
if (c_num1 != 1005 || strncmp(c_ch1,"KEVIN",5)!=0 || c_num2 != 4005)
     flag = 0;
if (strncmp(c_ch2,"XIOS",4) != 0)
     flag = 0;
printf("\n");

/* re-initialise host variables */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");
c_num1=0;
c_num2=0;
 
/* now start fetching rows from CL_STANDARD */
printf("FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2;\n"); 
EXEC SQL FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2; 
CHCKOK();     
/* since the cursor is declared insensitive with cursor  */
/* specification ORDER BY DESC the last row will be      */ 
/* returned first however if the inserted row is visible */
/* through the cursor then record a NOGO                 */
printf("COL_NUM1 should be 1004;  it is %ld \n",c_num1);
printf("COL_CH1  should be MORRIS;it is %s  \n",c_ch1);  
printf("COL_NUM2 should be 4004;  it is %ld \n",c_num2);
printf("COL_CH2  should be PARGA; it is %s \n" ,c_ch2); 
/* check if the inserted row is visible through           */
/* the cursor proceed if not record a NOGO if it is       */
if (c_num1 != 1004 || strncmp(c_ch1,"MORRIS",6)!=0 || c_num2 != 4004) 
    flag = 0;
if (strncmp(c_ch2,"PARGA",5) != 0)
     flag = 0;
printf("\n");

/* re-initialise host variables */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");
c_num1=0;
c_num2=0;
 
/* fetch second row */
printf("FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2;\n"); 
EXEC SQL FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2; 
CHCKOK();     
printf("COL_NUM1 should be 1003;   it is %ld \n",c_num1);
printf("COL_CH1  should be GEORGE; it is %s  \n",c_ch1);
printf("COL_NUM2 should be 4003;   it is %ld \n",c_num2);
printf("COL_CH2  should be ARTA;   it is %s \n" ,c_ch2); 
if (c_num1 != 1003 || strncmp(c_ch1,"GEORGE",6)!=0 || c_num2 != 4003)
   flag = 0;
if (strncmp(c_ch2,"ARTA",4) != 0)
      flag = 0;
printf("\n");

/* re-initialise host variables */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");
c_num1=0;
c_num2=0;
 
/* fetch third row */
printf("FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2;\n"); 
EXEC SQL FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2; 
CHCKOK();     
printf("COL_NUM1 should be 1002;   it is %ld \n",c_num1);
printf("COL_CH1  should be MAKIS;  it is %s  \n",c_ch1);
printf("COL_NUM2 should be 4002;   it is %ld \n",c_num2);
printf("COL_CH2  should be HANIA;  it is %s \n" ,c_ch2); 
if (c_num1 != 1002 || strncmp(c_ch1,"MAKIS",5)!=0 || c_num2 != 4002)
     flag = 0;
if (strncmp(c_ch2,"HANIA",5) != 0 )
     flag = 0;
printf("\n");

/* re-initialise host variables */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");
c_num1=0;
c_num2=0;
 
/* fetch fourth row */
printf("FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2;\n"); 
EXEC SQL FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2; 
CHCKOK();     
printf("COL_NUM1 should be 1001;   it is %ld \n",c_num1);
printf("COL_CH1  should be MARIA;  it is %s  \n",c_ch1);
printf("COL_NUM2 should be 4001;   it is %ld \n",c_num2);
printf("COL_CH2  should be RHODES; it is %s \n" ,c_ch2); 
if (c_num1 != 1001 || strncmp(c_ch1,"MARIA",5)!=0 || c_num2 != 4001)
     flag = 0;
if (strncmp(c_ch2,"RHODES",6) != 0)
     flag = 0;
printf("\n");

/* re-initialise host variables */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");
c_num1=0;
c_num2=0;
 
/* fetch fifth row */
printf("FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2;\n"); 
EXEC SQL FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2; 
CHCKOK();     
printf("COL_NUM1 should be 1000;   it is %ld \n",c_num1);
printf("COL_CH1  should be NICKOS; it is %s  \n",c_ch1);
printf("COL_NUM2 should be 4000;   it is %ld \n",c_num2);
printf("COL_CH2  should be ATHENS; it is %s \n" ,c_ch2); 
if (c_num1 != 1000 || strncmp(c_ch1,"NICKOS",6)!=0 || c_num2 != 4000)
   flag = 0;
if (strncmp(c_ch2,"ATHENS",6) != 0)
    flag = 0;
printf("\n");

/* end fetches */
/* close the cursor and open it again. If the vendor      */
/* supports the extension then the inserted row should be */
/* now visible through the cursor                         */

printf("CLOSE CLCURS;\n");
EXEC SQL CLOSE CLCURS;
CHCKOK();
printf("\n");

/* open the cursor again */
printf("OPEN CLCURS;\n");
EXEC SQL OPEN CLCURS;
CHCKOK();
printf("\n");

/* now fetch and check if the inserted row is visible */
/* initialise host variables */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");
c_num1=0;
c_num2=0;
 
printf("FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2;\n"); 
EXEC SQL FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2; 
CHCKOK();     
/* since the cursor is declared insensitive with cursor  */
/* specification ORDER BY DESC the last row will be      */ 
/* returned first */
printf("COL_NUM1 should be 1005;   it is %ld \n",c_num1);
printf("COL_CH1  should be KEVIN; it is %s  \n",c_ch1);
printf("COL_NUM2 should be 4005;   it is %ld \n",c_num2);
printf("COL_CH2  should be XIOS;   it is %s \n" ,c_ch2); 
/* check if the inserted row is visible through the cursor*/
/* proceed if not record a NOGO if it is                  */
if (c_num1 != 1005 || strncmp(c_ch1,"KEVIN",5)!=0 || c_num2 != 4005)
   flag = 0;
if (strncmp(c_ch2,"XIOS",4) != 0)
    flag = 0;
printf("\n");

/* fetch remaining 5 rows, initialising before the host variables */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");
c_num1=0;
c_num2=0;
printf("FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2;\n"); 
EXEC SQL FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2; 
CHCKOK();     
printf("COL_NUM1 should be 1004;  it is %ld \n",c_num1);
printf("COL_CH1  should be MORRIS;it is %s  \n",c_ch1);
printf("COL_NUM2 should be 4004;  it is %ld \n",c_num2);
printf("COL_CH2  should be PARGA; it is %s \n" ,c_ch2); 
if (c_num1 != 1004 || strncmp(c_ch1,"MORRIS",6)!=0 || c_num2 != 4004)
   flag = 0;
if (strncmp(c_ch2,"PARGA",5) != 0)
      flag = 0;
printf("\n");

/* 4 remaining */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");
c_num1=0;
c_num2=0;
printf("FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2;\n"); 
EXEC SQL FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2; 
CHCKOK();     
printf("COL_NUM1 should be  1003;   it is %ld \n",c_num1);
printf("COL_CH1  should be  GEORGE; it is %s  \n",c_ch1);
printf("COL_NUM2 should be  4003;   it is %ld \n",c_num2);
printf("COL_CH2  should be  ARTA;   it is %s \n" ,c_ch2); 
if (c_num1 != 1003 || strncmp(c_ch1,"GEORGE",6)!=0 || c_num2 != 4003)
   flag = 0;
if (strncmp(c_ch2,"ARTA",4) != 0)
      flag = 0;
printf("\n");

/* 3 remaining */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");
c_num1=0;
c_num2=0;
printf("FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2;\n"); 
EXEC SQL FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2; 
CHCKOK();     
printf("COL_NUM1 should be 1002;   it is %ld \n",c_num1);
printf("COL_CH1  should be MAKIS;  it is %s  \n",c_ch1);
printf("COL_NUM2 should be 4002;   it is %ld \n",c_num2);
printf("COL_CH2  should be HANIA;  it is %s \n" ,c_ch2); 
if (c_num1 != 1002 || strncmp(c_ch1,"MAKIS",5)!=0 || c_num2 != 4002)
   flag = 0;
if (strncmp(c_ch2,"HANIA",5) != 0)
    flag = 0;
printf("\n");

/* 2 remaining */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");
c_num1=0;
c_num2=0;
printf("FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2;\n"); 
EXEC SQL FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2; 
CHCKOK();     
printf("COL_NUM1 should be 1001;   it is %ld \n",c_num1);
printf("COL_CH1  should be MARIA;  it is %s  \n",c_ch1);
printf("COL_NUM2 should be 4001;   it is %ld \n",c_num2);
printf("COL_CH2  should be RHODES; it is %s \n" ,c_ch2); 
if (c_num1 != 1001 || strncmp(c_ch1,"MARIA",5)!=0 || c_num2 != 4001)
     flag = 0;
if (strncmp(c_ch2,"RHODES",6) != 0)
     flag = 0;
printf("\n");

/* 1 remaining */
strcpy(c_ch1,"xxxxxxxxxx");
strcpy(c_ch2,"xxxxxxxxxx");
c_num1=0;
c_num2=0;
printf("FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2;\n"); 
EXEC SQL FETCH CLCURS INTO :c_num1, :c_ch1, :c_num2, :c_ch2; 
CHCKOK();     
printf("COL_NUM1 should be 1000;   it is %ld \n",c_num1);
printf("COL_CH1  should be NICKOS; it is %s  \n",c_ch1);
printf("COL_NUM2 should be 4000;   it is %ld \n",c_num2);
printf("COL_CH2  should be ATHENS  it is %s \n" ,c_ch2); 
if (c_num1 != 1000 || strncmp(c_ch1,"NICKOS",6)!=0 || c_num2 != 4000)
   flag = 0;
if (strncmp(c_ch2,"ATHENS",6) != 0)
    flag = 0;
printf("\n");

/* end fetches */
/* now close the cursor */
printf("CLOSE CLCURS;\n");
EXEC SQL CLOSE CLCURS;
CHCKOK();
printf("\n");

/* restore table CL_STANDARD in its original state */
printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* record results */

  if ( flag == 1 )
       {
          printf("\n\n       xts725.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7025','pass','PC');
          printf("SQL extension INSENSITIVE cursor executed successfully\n");
          printf("Vendor must demonstrate Intermediate Flagger WARNING\n"); 
        }
     else
       {
          printf("\n\n       xts725.pc  *** NOGO *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7025','NOGO','PC');
          printf("Vendor does not support fully \n");
          printf("Intermediate SQL extension \n");
          printf("Support for Insensitive cursors is not required\n");
       }

     printf("========================================\n\n");

/* BAK : Check again in order to insert a third option for fail */
/* DWF: ??? */

EXEC SQL COMMIT WORK;

/******************** END TEST7025 *********************/

 exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

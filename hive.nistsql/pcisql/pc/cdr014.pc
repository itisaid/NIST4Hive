/*  EMBEDDED C (file "CDR014.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1989/04/13 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  CDR014.PC                                                    */
/*  WRITTEN BY: SUN DAJUN                                        */
/*                                                               */
/*    THIS ROUTINE TESTS THE REFERENCE INTEGRITY CONSTRAINT FOR  */
/*  SQL.                                                         */
/*                                                               */
/*  REFERENCES                                                   */
/*        AMERICAN NATIONAL STANDARD database language - SQL     */
/*                           with Integrity Enhancement          */
/*                                                               */
/*             SECTION 6.6 <unique constraint definition>        */
/*                <unique constraint definition>::=              */
/*                        <unique specifition>(<unique column    */
/*                        list>)                                 */
/*                 <unique specifition>::= UNIQUE|PRIMARY KEY    */
/*                                                               */
/*             SECTION 6.7 <referential constraint definition>   */
/*                <referential constraint definition>::=         */
/*                      FOREIGN KEY (<referencing columns>)      */
/*                      <references specification>               */
/*                <references specification>::=                  */
/*                      REFERENCES <referenced table and columns>*/
/*                <referencing columns>::=                       */
/*                        <reference column list>                */
/*                <refereced table and columns>::=               */
/*                        <table name>[(<reference column list>  */
/*                <reference column list>::=                     */
/*                        <column name>[{,<column name>}...]     */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>




EXEC SQL BEGIN DECLARE SECTION;
long count1;
long count2;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long SQLCODE;
int errcnt;
/* date_time declaration */
time_t cal;

long code1;

main()

{
        strcpy(uid,"SUN");
        AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM SUN.ECCO;
if (strncmp(uid,uidx,3) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, cdr014.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
/******************** BEGIN TEST0347 ********************/
/* This program inserts two rows into PRIMARY KEY TABLE */
/* -- SIZ1_P, these two rows have the same value  in    */
/* PRIMARY COLUMNs.                                     */ 
/*  PRIMARY KEY can contain at most 6 columns.          */

printf("\n         FIPS sizing TEST0347             \n");
printf("                     PRIMARY KEY     \n");
printf("      SQL with Integrity Enhancement section 6.5,6.6\n");
printf("      - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("\n");
printf("        INSERT INTO SIZ1_P\n");
printf("        VALUES('E1','TTT',1,'SSS',10,'RRR','HHH','ZZZ',6);\n");
printf("\n");
printf("        SELECT COUNT(*) INTO:count1\n");
printf("        FROM SIZ1_P\n");
printf("        WHERE  S1 = 'E1';\n");
printf("\n");
count1 = 0;
EXEC SQL INSERT INTO SIZ1_P
        VALUES('E1','TTT',1,'SSS',10,'RRR','HHH','ZZZ',6);
code1 = SQLCODE;
EXEC SQL SELECT COUNT(*) INTO:count1
        FROM SIZ1_P
        WHERE S1 = 'E1';
EXEC SQL ROLLBACK WORK;
printf(" The correct answer is :\n");
printf("           SQLCODE of second INSERT is less than 0.\n");
printf("           count1 is 3\n");
printf(" Your answer is :\n");
printf("           SQLCOD of second INSERT  is %ld\n",code1);
printf("           count1 is %ld\n",count1);
        if (code1 < 0 && count1 == 3)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0347','pass','PC');
       printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0347','fail','PC');
          errcnt = errcnt + 1;
       printf("\n\n       cdr014.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;
/**************** END TEST 0347 ***********/








/******************** BEGIN TEST0348 ********************/
/* This test  inserts  a row  in FOREIGN KEY TABLE --   */
/* SIZ1_F, but its primary columns value  of this row   */
/* has not been inserted into PRIMARY KEY TABLE --      */
/* SIZ1_P. This should be an Error.                     */
/*  PRIMARY KEY can contain at most 6 columns.          */
/*  So does FOREIGN KEY .                               */

printf("\n         FIPS sizing TEST0348             \n");
printf("              PRIMARY KEY & FOREIGN KEY    \n");
printf("  SQL with Integrity Enhancement section 6.5,6.6,6.7\n");
printf("  - - - - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("\n");
printf("        INSERT INTO SIZ1_F\n");
printf("        VALUES('E1','TTT',1,'SSS',20,'RRS','TTT',5,6);\n");
printf("\n");
printf("        SELECT COUNT(*) INTO:count1\n");
printf("        FROM SIZ1_F\n");
printf("        WHERE F6 = 'RRS';\n");
count1 = -1;
EXEC SQL INSERT INTO SIZ1_F
        VALUES('E1','TTT',1,'SSS',19,'RRS','TTT',5,6);
code1 = SQLCODE;
EXEC SQL SELECT COUNT(*) INTO:count1
        FROM SIZ1_F
        WHERE F6 = 'RRS';
EXEC SQL ROLLBACK WORK;
 printf(" The correct answer is :\n");
 printf("           SQLCODE of second INSERT is less than 0.\n");
 printf("           count1 is 0\n");
 printf(" Your answer is :\n");
 printf("           SQLCOD of second insert is %ld\n",code1);
 printf("           count1 is %ld\n",count1);
        if (code1 != 0 && count1 == 0)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0348','pass','PC');
       printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0348','fail','PC');
          errcnt = errcnt + 1;
       printf("\n\n       cdr014.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;
/************************ END TEST0348 *************************/




     exit(errcnt);
}


/*  EMBEDDED C (file " XTS762.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS762.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  Defined character set in <like predicate>                    */
/*                                                               */
/*  REFERENCES                                                   */
/*    10.4     --  <character set specification>                 */
/*    10.4 SR.3                                                  */
/*    10.4 GR.3                                                  */
/*    ISO 9075 Section 4.2.3                                     */
/*             Rules determining collating sequence usage        */
/*    11.28    --  <Character set definition>                    */
/*    8.5      --  <Like predicate>                              */
/*    8.5      SR.1                                              */
/*    F#45     --  Character set definition                      */
/*                                                               */
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 18/12/95                    */
/*         Print timestamp                                       */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*                                                               */
/*  QA STATUS : QA CHECK                                         */
/*                                                               */
/*  Revised by DWF 1996-02-21                                    */
/*    Fixed LIKE comparison                                      */
/*    Removed status checks after cursor definition              */
/*    Fixed declarations and string lengths                      */
/*    Cleaned up                                                 */
/*    Fixed transactions                                         */
/*    Shortened variable names to 6 chars                        */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 long coun1;
 long colnum;
char CHARACTER SET IS CS cstr1[11];
char CHARACTER SET IS CS cstr2[11];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts762.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run :  %s\n", ctime(&cal));

/******************** BEGIN TEST7062 ********************/
flag = 1;
printf("                 TEST7062\n");
printf("    Defined character set in <like predicate>\n");
printf(" References \n");                        
printf("    10.4     -- <character set specification>  \n");
printf("    10.4     SR.3   \n");
printf("    10.4     GR.3   \n");
printf("    Section 4.2.3\n");
printf("             Rules determining collating sequence usage\n");
printf("    8.2      --  <Comparison predicate> \n");
printf("    8.2      SR.3  \n");
printf("    11.28    -- <character set definition>\n");  
printf("    F#45     -- Character set definition \n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

printf("DECLARE S CURSOR FOR SELECT COLUN, COLSTR1, COLSTR2\n");
printf("FROM CTS1.TABCS\n");
printf("WHERE COLSTR1 LIKE _CS 'NICKKOS%%' ESCAPE _CS 'K' \n");
printf("ORDER BY COLUN;\n\n");
EXEC SQL DECLARE S CURSOR FOR SELECT COLUN, COLSTR1, COLSTR2
         FROM CTS1.TABCS
         WHERE COLSTR1 LIKE _CS 'NICKKOS%' ESCAPE _CS 'K'
         ORDER BY COLUN;

printf("OPEN S;\n");
EXEC SQL OPEN S;
CHCKOK();
printf("\n");

/* initialise host variables */
colnum = 0;
strcpy(cstr1,"xxxxxxxxxx");
strcpy(cstr2,"xxxxxxxxxx");

/* two rows satisfy the <search condition> of the cursor */
printf("FETCH S INTO :colnum, :cstr1, :cstr2;\n");
EXEC SQL FETCH S INTO :colnum, :cstr1, :cstr2;
CHCKOK();
printf("COLUN   should be      1; its value is %ld\n",colnum);
printf("COLSTR1 should be NICKOS; its value is %s\n",cstr1);
printf("COLSTR2 should be  MARIA; its value is %s\n",cstr2);
if (strncmp(cstr1,"NICKOS",6)!=0 || strncmp(cstr2,"MARIA",5)!=0)
      flag = 0;
if (colnum != 1)
      flag = 0;
printf("\n");

/* initialise host variables */
colnum = 0;
strcpy(cstr1,"xxxxxxxxxx");
strcpy(cstr2,"xxxxxxxxxx");

/* fetch the second row */
printf("FETCH S INTO :colnum, :cstr1, :cstr2;\n");
EXEC SQL FETCH S INTO :colnum, :cstr1, :cstr2;
CHCKOK();
printf("COLUN   should be      3; it is %ld\n",colnum);
printf("COLSTR1 should be NICKOS; it is %s\n",cstr1);
printf("COLSTR2 should be  TAKIS; it is %s\n\n",cstr2);
if (strncmp(cstr1,"NICKOS",6)!=0 || strncmp(cstr2,"TAKIS",5)!=0)
    flag = 0;
if (colnum != 3)
    flag = 0;
 
printf("CLOSE S;\n");
EXEC SQL CLOSE S;
CHCKOK();
printf("\n");

coun1 = 5;
printf("SELECT COUNT(*) INTO :coun1\n");
printf("         FROM TABCS\n");
printf("         WHERE COLSTR1 LIKE _CS 'VLASSIS%%' ESCAPE _CS 'S'\n");
printf("         OR COLSTR2   LIKE _CS 'YANNIS%%'  ESCAPE _CS 'N';\n");
EXEC SQL SELECT COUNT(*) INTO :coun1
         FROM TABCS
         WHERE COLSTR1 LIKE _CS 'VLASSIS%' ESCAPE _CS 'S'
         OR COLSTR2   LIKE _CS 'YANNIS%'  ESCAPE _CS 'N';
CHCKOK();
printf ("coun1 should be 0; its value is %ld\n\n",coun1);
if (coun1 != 0)
    flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

 /* record results */

     if ( flag == 1 )
       {
          printf("\n\n       xts762.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7062','pass','PC');
       }
     else
       {
          printf("\n\n       xts762.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7062','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7062 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

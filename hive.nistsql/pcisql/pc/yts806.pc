/*  EMBEDDED C (file "YTS806.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS806.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  This routine tests NATURAL FULL OUTER JOIN <table ref> -     */
/*                     dynamic                                   */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    7.5      <joined table>                                    */
/*    7.5 SR.6                                                   */
/*    7.5 GR.1d                                                  */
/*    7.5 GR.5d                                                  */
/*    7.5 GR.6a                                                  */
/*    17.1     Description of SQL item descriptor areas          */
/*    17.2     <allocate descriptor statement>                   */
/*    17.3     <deallocate descriptor statement>                 */
/*    17.4     <get descriptor statement>                        */
/*    17.6     <prepare statement>                               */
/*    17.7     <deallocate prepared statement>                   */
/*    17.8     <describe statement>                              */
/*    17.9     <using clause>                                    */
/*    17.12    <dynamic declare cursor>                          */
/*    17.14    <dynamic open statement>                          */
/*    17.15    <dynamic fetch statement>                         */
/*    17.16    <dynamic close statement>                         */
/*    F#4      Joined table                                      */
/*    F#40     Full outer join                                   */
/*    F#1      Dynamic SQL                                       */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-27                                    */
/*    Added rollback after authid                                */
/*    Removed EXEC SQL from printf                               */
/*    Renamed variables                                          */
/*    Fixed coding rule violations                               */
/*    Fixed syntax errors                                        */
/*    Fixed descriptor usage                                     */
/*    Fixed string lengths                                       */
/*    Fixed printout                                             */
/*    Fixed expected results                                     */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char colnam[21];
long coltyp;
char eno[4];
char enaam[21];
short grd;
char cit[16];
short hrs;
long sal;
short pno;
short indic1;
short indic2;
short indic3;
char uid[19];
char uidx[19];
char longst[241];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts806.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7563 ********************/
flag = 1;

     printf("                  TEST7563 \n");
     printf("   NATURAL FULL OUTER JOIN <table ref> - dynamic\n");
     printf("References:\n");
     printf("    7.5      <joined table>\n");
     printf("    7.5 SR.6\n");
     printf("    7.5 GR.1d\n");
     printf("    7.5 GR.5d\n");
     printf("    7.5 GR.6a\n");
     printf("    17.1     Description of SQL item descriptor areas\n");
     printf("    17.2     <allocate descriptor statement>\n");
     printf("    17.3     <deallocate descriptor statements>\n");
     printf("    17.4     <get descriptor statement>\n");
     printf("    17.6     <prepare statement>\n");
     printf("    17.7     <deallocate prepared statement>\n");
     printf("    17.8     <describe statement>\n");
     printf("    17.9     <using clause>\n");
     printf("    17.12    <dynamic declare statement>\n");
     printf("    17.14    <dynamic open statement>\n");
     printf("    17.15    <dynamic fetch statement>\n");
     printf("    17.16    <dynamic close statement>\n");
     printf("    F#4      Joined table.\n");
     printf("    F#40     Full outer join.\n");
     printf("    F#1      Dynamic SQL.\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* prepare database */

printf("DELETE FROM CTS1.STAFF1;\n");
EXEC SQL DELETE FROM CTS1.STAFF1;
printf("DELETE FROM CTS1.STAFFa;\n\n");
EXEC SQL DELETE FROM CTS1.STAFFa;

printf("INSERT INTO CTS1.STAFF1 VALUES\n");
printf("('E1','Alice',4,'Lyon');\n");
EXEC SQL INSERT INTO CTS1.STAFF1 VALUES
('E1','Alice',4,'Lyon');
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.STAFF1 VALUES\n");
printf("('E1','Alice',8,'Lyon');\n");
EXEC SQL INSERT INTO CTS1.STAFF1 VALUES
('E1','Alice',8,'Lyon');
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.STAFF1 VALUES\n");
printf("('E1','Alice',12,'Geneva');\n");
EXEC SQL INSERT INTO CTS1.STAFF1 VALUES
('E1','Alice',12,'Geneva');
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.STAFF1 VALUES\n");
printf("('E2','Betty',16,'Strasbourg');\n");
EXEC SQL INSERT INTO CTS1.STAFF1 VALUES
('E2','Betty',16,'Strasbourg');
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.STAFF1 VALUES\n");
printf("('E2','Betty',20,'Munich');\n");
EXEC SQL INSERT INTO CTS1.STAFF1 VALUES
('E2','Betty',20,'Munich');
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.STAFF1 VALUES\n");
printf("('E3','Colin',24,'Leuven');\n");
EXEC SQL INSERT INTO CTS1.STAFF1 VALUES
('E3','Colin',24,'Leuven');
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.STAFF1 VALUES\n");
printf("('E4','Daniel',28,'Cologne');\n");
EXEC SQL INSERT INTO CTS1.STAFF1 VALUES
('E4','Daniel',28,'Cologne');
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.STAFFa VALUES\n");
printf("(20,40000,'E1',11,'Alice');\n");
EXEC SQL INSERT INTO CTS1.STAFFa VALUES
(20,40000,'E1',11,'Alice');
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.STAFFa VALUES\n");
printf("(15,20000,'E2',12,'Betty');\n");
EXEC SQL INSERT INTO CTS1.STAFFa VALUES
(15,20000,'E2',12,'Betty');
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.STAFFa VALUES\n");
printf("(15,20000,'E2',13,'Betty');\n");
EXEC SQL INSERT INTO CTS1.STAFFa VALUES
(15,20000,'E2',13,'Betty');
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.STAFFa VALUES\n");
printf("(10,15000,'E3',14,'Colin');\n");
EXEC SQL INSERT INTO CTS1.STAFFa VALUES
(10,15000,'E3',14,'Colin');
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.STAFFa VALUES\n");
printf("(10,8000,'E3',15,'Colin');\n");
EXEC SQL INSERT INTO CTS1.STAFFa VALUES
(10,8000,'E3',15,'Colin');
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.STAFFa VALUES\n");
printf("(10,8000,'E3',16,'Colin');\n");
EXEC SQL INSERT INTO CTS1.STAFFa VALUES
(10,8000,'E3',16,'Colin');
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.STAFFa VALUES\n");
printf("(30,50000,'E5',17,'Edward');\n");
EXEC SQL INSERT INTO CTS1.STAFFa VALUES
(30,50000,'E5',17,'Edward');
CHCKOK ();
printf("\n");

     EXEC SQL DELETE FROM CTS1.CONCATBUF;
     EXEC SQL INSERT INTO CTS1.CONCATBUF VALUES (
       'SELECT * FROM STAFF1 NATURAL FULL OUTER JOIN' ||
       '  STAFFA ORDER BY EMPNUM, EMPNAME, GRADE, PNUM'
     );
     EXEC SQL SELECT ZZ INTO :longst FROM CTS1.CONCATBUF;
     printf("longst=\"%s\"\n", longst);


printf("PREPARE sn FROM :longst;\n");
EXEC SQL PREPARE sn FROM :longst;
CHCKOK ();
printf("\n");

/* Demand that they be able to allocate at least 7.  This is an */
/* Intermediate test, so their descriptors have no excuse to be */
/* wimpy. */

printf("ALLOCATE DESCRIPTOR 'dn' WITH MAX 7;\n");
EXEC SQL ALLOCATE DESCRIPTOR 'dn' WITH MAX 7;
CHCKOK ();
printf("\n");

printf("DESCRIBE sn USING SQL DESCRIPTOR 'dn';\n");
EXEC SQL DESCRIBE sn USING SQL DESCRIPTOR 'dn'; 
CHCKOK ();
printf("\n");

strcpy (colnam, "xxxxxxxxxxxxxxxxxxxx");
coltyp = 0;
printf("GET DESCRIPTOR 'dn' VALUE 1 :colnam = NAME, :coltyp = TYPE;\n");
EXEC SQL GET DESCRIPTOR 'dn' VALUE 1 :colnam = NAME, :coltyp = TYPE;
printf ("colnam should be EMPNUM; its value is %s\n", colnam);
printf ("coltyp should be 1 (CHAR); its value is %ld\n\n", coltyp);
if (strncmp(colnam,"EMPNUM",6) != 0 || coltyp != 1)
  flag = 0;

strcpy (colnam, "xxxxxxxxxxxxxxxxxxxx");
coltyp = 0;
printf("GET DESCRIPTOR 'dn' VALUE 2 :colnam = NAME, :coltyp = TYPE;\n");
EXEC SQL GET DESCRIPTOR 'dn' VALUE 2 :colnam = NAME, :coltyp = TYPE;
printf ("colnam should be EMPNAME; its value is %s\n", colnam);
printf ("coltyp should be 1 (CHAR); its value is %ld\n\n", coltyp);
if (strncmp(colnam,"EMPNAME",7) != 0 || coltyp != 1)
  flag = 0;

strcpy (colnam, "xxxxxxxxxxxxxxxxxxxx");
coltyp = 0;
printf("GET DESCRIPTOR 'dn' VALUE 3 :colnam = NAME, :coltyp = TYPE;\n");
EXEC SQL GET DESCRIPTOR 'dn' VALUE 3 :colnam = NAME, :coltyp = TYPE;
printf ("colnam should be GRADE; its value is %s\n", colnam);
printf ("coltyp should be 3 (DECIMAL); its value is %ld\n\n", coltyp);
if (strncmp(colnam,"GRADE",5) != 0 || coltyp != 3)
  flag = 0;

strcpy (colnam, "xxxxxxxxxxxxxxxxxxxx");
coltyp = 0;
printf("GET DESCRIPTOR 'dn' VALUE 4 :colnam = NAME, :coltyp = TYPE;\n");
EXEC SQL GET DESCRIPTOR 'dn' VALUE 4 :colnam = NAME, :coltyp = TYPE;
printf ("colnam should be CITY; its value is %s\n", colnam);
printf ("coltyp should be 1 (CHAR); its value is %ld\n\n", coltyp);
if (strncmp(colnam,"CITY",4) != 0 || coltyp != 1)
  flag = 0;

strcpy (colnam, "xxxxxxxxxxxxxxxxxxxx");
coltyp = 0;
printf("GET DESCRIPTOR 'dn' VALUE 5 :colnam = NAME, :coltyp = TYPE;\n");
EXEC SQL GET DESCRIPTOR 'dn' VALUE 5 :colnam = NAME, :coltyp = TYPE;
printf ("colnam should be HOURS; its value is %s\n", colnam);
printf ("coltyp should be 4 (INT); its value is %ld\n\n", coltyp);
if (strncmp(colnam,"HOURS",5) != 0 || coltyp != 4)
  flag = 0;

strcpy (colnam, "xxxxxxxxxxxxxxxxxxxx");
coltyp = 0;
printf("GET DESCRIPTOR 'dn' VALUE 6 :colnam = NAME, :coltyp = TYPE;\n");
EXEC SQL GET DESCRIPTOR 'dn' VALUE 6 :colnam = NAME, :coltyp = TYPE;
printf ("colnam should be SALARY; its value is %s\n", colnam);
printf ("coltyp should be 3 (DECIMAL); its value is %ld\n\n", coltyp);
if (strncmp(colnam,"SALARY",6) != 0 || coltyp != 3)
  flag = 0;

strcpy (colnam, "xxxxxxxxxxxxxxxxxxxx");
coltyp = 0;
printf("GET DESCRIPTOR 'dn' VALUE 7 :colnam = NAME, :coltyp = TYPE;\n");
EXEC SQL GET DESCRIPTOR 'dn' VALUE 7 :colnam = NAME, :coltyp = TYPE;
printf ("colnam should be PNUM; its value is %s\n", colnam);
printf ("coltyp should be 3 (DECIMAL); its value is %ld\n\n", coltyp);
if (strncmp(colnam,"PNUM",4) != 0 || coltyp != 3)
  flag = 0;

/* execute a <dynamic declare cursor> for statement sn */

printf("DECLARE cn CURSOR for sn;\n\n");
EXEC SQL DECLARE cn CURSOR FOR sn;

printf("OPEN cn;\n");
EXEC SQL OPEN cn;
CHCKOK ();
printf("\n");

/* Return each row defined by the cursor */

strcpy (eno, "xxx");
strcpy (enaam, "xxxxxxxxxxxxxxxxxxxx");
grd = -1;
strcpy (cit, "xxxxxxxxxxxxxxx");
hrs = -1;
sal = -1;
pno = -1;
printf("FETCH cn INTO :eno, :enaam, :grd, :cit, :hrs, :sal, :pno;\n");
EXEC SQL FETCH cn INTO 
:eno, :enaam, :grd, :cit, :hrs, :sal, :pno;
CHCKOK ();
printf ("eno should be E1; its value is %s\n", eno);
printf ("enaam should be Alice; its value is %s\n", enaam);
printf ("grd should be 4; its value is %d\n", grd);
printf ("cit should be Lyon; its value is %s\n", cit);
printf ("hrs should be 20; its value is %d\n", hrs);
printf ("sal should be 40000; its value is %ld\n", sal);
printf ("pno should be 11; its value is %d\n\n", pno);
if (strncmp(eno,"E1",2) != 0 || strncmp(enaam,"Alice",5) != 0 || grd != 4)
   flag = 0;
if (strncmp(cit,"Lyon",4) != 0 || hrs != 20 || sal != 40000)
   flag = 0;
if (pno != 11)
   flag = 0;

strcpy (eno, "xxx");
strcpy (enaam, "xxxxxxxxxxxxxxxxxxxx");
grd = -1;
strcpy (cit, "xxxxxxxxxxxxxxx");
hrs = -1;
sal = -1;
pno = -1;
printf("FETCH cn INTO :eno, :enaam, :grd, :cit, :hrs, :sal, :pno;\n");
EXEC SQL FETCH cn INTO 
:eno, :enaam, :grd, :cit, :hrs, :sal, :pno;
CHCKOK ();
printf ("eno should be E1; its value is %s\n", eno);
printf ("enaam should be Alice; its value is %s\n", enaam);
printf ("grd should be 8; its value is %d\n", grd);
printf ("cit should be Lyon; its value is %s\n", cit);
printf ("hrs should be 20; its value is %d\n", hrs);
printf ("sal should be 40000; its value is %ld\n", sal);
printf ("pno should be 11; its value is %d\n\n", pno);
if (strncmp(eno,"E1",2) != 0 || strncmp(enaam,"Alice",5) != 0 || grd != 8)
   flag = 0;
if (strncmp(cit,"Lyon",4) != 0 || hrs != 20 || sal != 40000)
   flag = 0;
if (pno != 11)
   flag = 0;

strcpy (eno, "xxx");
strcpy (enaam, "xxxxxxxxxxxxxxxxxxxx");
grd = -1;
strcpy (cit, "xxxxxxxxxxxxxxx");
hrs = -1;
sal = -1;
pno = -1;
printf("FETCH cn INTO :eno, :enaam, :grd, :cit, :hrs, :sal, :pno;\n");
EXEC SQL FETCH cn INTO 
:eno, :enaam, :grd, :cit, :hrs, :sal, :pno;
CHCKOK ();
printf ("eno should be E1; its value is %s\n", eno);
printf ("enaam should be Alice; its value is %s\n", enaam);
printf ("grd should be 12; its value is %d\n", grd);
printf ("cit should be Geneva; its value is %s\n", cit);
printf ("hrs should be 20; its value is %d\n", hrs);
printf ("sal should be 40000; its value is %ld\n", sal);
printf ("pno should be 11; its value is %d\n\n", pno);
if (strncmp(eno,"E1",2) != 0 || strncmp(enaam,"Alice",5) != 0 || grd != 12)
   flag = 0;
if (strncmp(cit,"Geneva",6) != 0 || hrs != 20 || sal != 40000)
   flag = 0;
if (pno != 11)
   flag = 0;

strcpy (eno, "xxx");
strcpy (enaam, "xxxxxxxxxxxxxxxxxxxx");
grd = -1;
strcpy (cit, "xxxxxxxxxxxxxxx");
hrs = -1;
sal = -1;
pno = -1;
printf("FETCH cn INTO :eno, :enaam, :grd, :cit, :hrs, :sal, :pno;\n");
EXEC SQL FETCH cn INTO 
:eno, :enaam, :grd, :cit, :hrs, :sal, :pno;
CHCKOK ();
printf ("eno should be E2; its value is %s\n", eno);
printf ("enaam should be Betty; its value is %s\n", enaam);
printf ("grd should be 16; its value is %d\n", grd);
printf ("cit should be Strasbourg; its value is %s\n", cit);
printf ("hrs should be 15; its value is %d\n", hrs);
printf ("sal should be 20000; its value is %ld\n", sal);
printf ("pno should be 12; its value is %d\n\n", pno);
if (strncmp(eno,"E2",2) != 0 || strncmp(enaam,"Betty",5) != 0 || grd != 16)
   flag = 0;
if (strncmp(cit,"Strasbourg",10) != 0 || hrs != 15 || sal != 20000)
   flag = 0;
if (pno != 12)
   flag = 0;

strcpy (eno, "xxx");
strcpy (enaam, "xxxxxxxxxxxxxxxxxxxx");
grd = -1;
strcpy (cit, "xxxxxxxxxxxxxxx");
hrs = -1;
sal = -1;
pno = -1;
printf("FETCH cn INTO :eno, :enaam, :grd, :cit, :hrs, :sal, :pno;\n");
EXEC SQL FETCH cn INTO 
:eno, :enaam, :grd, :cit, :hrs, :sal, :pno;
CHCKOK ();
printf ("eno should be E2; its value is %s\n", eno);
printf ("enaam should be Betty; its value is %s\n", enaam);
printf ("grd should be 16; its value is %d\n", grd);
printf ("cit should be Strasbourg; its value is %s\n", cit);
printf ("hrs should be 15; its value is %d\n", hrs);
printf ("sal should be 20000; its value is %ld\n", sal);
printf ("pno should be 13; its value is %d\n\n", pno);
if (strncmp(eno,"E2",2) != 0 || strncmp(enaam,"Betty",5) != 0 || grd != 16)
   flag = 0;
if (strncmp(cit,"Strasbourg",10) != 0 || hrs != 15 || sal != 20000)
   flag = 0;
if (pno != 13)
   flag = 0;

strcpy (eno, "xxx");
strcpy (enaam, "xxxxxxxxxxxxxxxxxxxx");
grd = -1;
strcpy (cit, "xxxxxxxxxxxxxxx");
hrs = -1;
sal = -1;
pno = -1;
printf("FETCH cn INTO :eno, :enaam, :grd, :cit, :hrs, :sal, :pno;\n");
EXEC SQL FETCH cn INTO 
:eno, :enaam, :grd, :cit, :hrs, :sal, :pno;
CHCKOK ();
printf ("eno should be E2; its value is %s\n", eno);
printf ("enaam should be Betty; its value is %s\n", enaam);
printf ("grd should be 20; its value is %d\n", grd);
printf ("cit should be Munich; its value is %s\n", cit);
printf ("hrs should be 15; its value is %d\n", hrs);
printf ("sal should be 20000; its value is %ld\n", sal);
printf ("pno should be 12; its value is %d\n\n", pno);
if (strncmp(eno,"E2",2) != 0 || strncmp(enaam,"Betty",5) != 0 || grd != 20)
   flag = 0;
if (strncmp(cit,"Munich",6) != 0 || hrs != 15 || sal != 20000)
   flag = 0;
if (pno != 12)
   flag = 0;

strcpy (eno, "xxx");
strcpy (enaam, "xxxxxxxxxxxxxxxxxxxx");
grd = -1;
strcpy (cit, "xxxxxxxxxxxxxxx");
hrs = -1;
sal = -1;
pno = -1;
printf("FETCH cn INTO :eno, :enaam, :grd, :cit, :hrs, :sal, :pno;\n");
EXEC SQL FETCH cn INTO 
:eno, :enaam, :grd, :cit, :hrs, :sal, :pno;
CHCKOK ();
printf ("eno should be E2; its value is %s\n", eno);
printf ("enaam should be Betty; its value is %s\n", enaam);
printf ("grd should be 20; its value is %d\n", grd);
printf ("cit should be Munich; its value is %s\n", cit);
printf ("hrs should be 15; its value is %d\n", hrs);
printf ("sal should be 20000; its value is %ld\n", sal);
printf ("pno should be 13; its value is %d\n\n", pno);
if (strncmp(eno,"E2",2) != 0 || strncmp(enaam,"Betty",5) != 0 || grd != 20)
   flag = 0;
if (strncmp(cit,"Munich",6) != 0 || hrs != 15 || sal != 20000)
   flag = 0;
if (pno != 13)
   flag = 0;

strcpy (eno, "xxx");
strcpy (enaam, "xxxxxxxxxxxxxxxxxxxx");
grd = -1;
strcpy (cit, "xxxxxxxxxxxxxxx");
hrs = -1;
sal = -1;
pno = -1;
printf("FETCH cn INTO :eno, :enaam, :grd, :cit, :hrs, :sal, :pno;\n");
EXEC SQL FETCH cn INTO 
:eno, :enaam, :grd, :cit, :hrs, :sal, :pno;
CHCKOK ();
printf ("eno should be E3; its value is %s\n", eno);
printf ("enaam should be Colin; its value is %s\n", enaam);
printf ("grd should be 24; its value is %d\n", grd);
printf ("cit should be Leuven; its value is %s\n", cit);
printf ("hrs should be 10; its value is %d\n", hrs);
printf ("sal should be 15000; its value is %ld\n", sal);
printf ("pno should be 14; its value is %d\n\n", pno);
if (strncmp(eno,"E3",2) != 0 || strncmp(enaam,"Colin",5) != 0 || grd != 24)
   flag = 0;
if (strncmp(cit,"Leuven",6) != 0 || hrs != 10 || sal != 15000)
   flag = 0;
if (pno != 14)
   flag = 0;

strcpy (eno, "xxx");
strcpy (enaam, "xxxxxxxxxxxxxxxxxxxx");
grd = -1;
strcpy (cit, "xxxxxxxxxxxxxxx");
hrs = -1;
sal = -1;
pno = -1;
printf("FETCH cn INTO :eno, :enaam, :grd, :cit, :hrs, :sal, :pno;\n");
EXEC SQL FETCH cn INTO 
:eno, :enaam, :grd, :cit, :hrs, :sal, :pno;
CHCKOK ();
printf ("eno should be E3; its value is %s\n", eno);
printf ("enaam should be Colin; its value is %s\n", enaam);
printf ("grd should be 24; its value is %d\n", grd);
printf ("cit should be Leuven; its value is %s\n", cit);
printf ("hrs should be 10; its value is %d\n", hrs);
printf ("sal should be 8000; its value is %ld\n", sal);
printf ("pno should be 15; its value is %d\n\n", pno);
if (strncmp(eno,"E3",2) != 0 || strncmp(enaam,"Colin",5) != 0 || grd != 24)
   flag = 0;
if (strncmp(cit,"Leuven",6) != 0 || hrs != 10 || sal != 8000)
   flag = 0;
if (pno != 15)
   flag = 0;

strcpy (eno, "xxx");
strcpy (enaam, "xxxxxxxxxxxxxxxxxxxx");
grd = -1;
strcpy (cit, "xxxxxxxxxxxxxxx");
hrs = -1;
sal = -1;
pno = -1;
printf("FETCH cn INTO :eno, :enaam, :grd, :cit, :hrs, :sal, :pno;\n");
EXEC SQL FETCH cn INTO 
:eno, :enaam, :grd, :cit, :hrs, :sal, :pno;
CHCKOK ();
printf ("eno should be E3; its value is %s\n", eno);
printf ("enaam should be Colin; its value is %s\n", enaam);
printf ("grd should be 24; its value is %d\n", grd);
printf ("cit should be Leuven; its value is %s\n", cit);
printf ("hrs should be 10; its value is %d\n", hrs);
printf ("sal should be 8000; its value is %ld\n", sal);
printf ("pno should be 16; its value is %d\n\n", pno);
if (strncmp(eno,"E3",2) != 0 || strncmp(enaam,"Colin",5) != 0 || grd != 24)
   flag = 0;
if (strncmp(cit,"Leuven",6) != 0 || hrs != 10 || sal != 8000)
   flag = 0;
if (pno != 16)
   flag = 0;

strcpy (eno, "xxx");
strcpy (enaam, "xxxxxxxxxxxxxxxxxxxx");
grd = -1;
strcpy (cit, "xxxxxxxxxxxxxxx");
indic1 = 99;
indic2 = 99;
indic3 = 99;
printf("FETCH cn INTO :eno, :enaam, :grd, :cit, :hrs:indic1,\n");
printf(":sal:indic2, :pno:indic3;\n");
EXEC SQL FETCH cn INTO 
:eno, :enaam, :grd, :cit, :hrs:indic1, :sal:indic2, :pno:indic3;
printf ("eno should be E4; its value is %s\n", eno);
printf ("enaam should be Daniel; its value is %s\n", enaam);
printf ("grd should be 28; its value is %d\n", grd);
printf ("cit should be Cologne; its value is %s\n", cit);
printf ("indic1 should be -1; its value is %d\n", indic1);
printf ("indic2 should be -1; its value is %d\n", indic2);
printf ("indic3 should be -1; its value is %d\n\n", indic3);
if (strncmp(eno,"E4",2) != 0 || strncmp(enaam,"Daniel",6) != 0 || grd != 28)
   flag = 0;
if (strncmp(cit,"Cologne",7) != 0 || indic1 != -1 || indic2 != -1)
   flag = 0;
if (indic3 != -1)
   flag = 0;

strcpy (eno, "xxx");
strcpy (enaam, "xxxxxxxxxxxxxxxxxxxx");
indic1 = 99;
indic2 = 99;
hrs = -1;
sal = -1;
pno = -1;
printf("FETCH cn INTO \n");
printf(":eno, :enaam, :grd:indic1, :cit:indic2, :hrs, :sal, :pno;\n");
EXEC SQL FETCH cn INTO 
:eno, :enaam, :grd:indic1, :cit:indic2, :hrs, :sal, :pno;
printf ("eno should be E5; its value is %s\n", eno);
printf ("enaam should be Edward; its value is %s\n", enaam);
printf ("hrs should be 30; its value is %d\n", hrs);
printf ("sal should be 50000; its value is %ld\n", sal);
printf ("pno should be 17; its value is %d\n", pno);
printf ("indic1 should be -1; its value is %d\n", indic1);
printf ("indic2 should be -1; its value is %d\n\n", indic2);
if (strncmp(eno,"E5",2) != 0 || strncmp(enaam,"Edward",6) != 0)
   flag = 0;
if (indic1 != -1 || indic2 != -1)
   flag = 0;
if (hrs != 30 || sal != 50000)
   flag = 0;
if (pno != 17)
   flag = 0;

printf("FETCH cn INTO :eno, :enaam, :grd, :cit, :hrs, :sal, :pno;\n"); 
EXEC SQL FETCH cn INTO 
:eno, :enaam, :grd, :cit, :hrs, :sal, :pno;

/* That should generate a no data exception */
/* which is SQLSTATE 02000 */

printf("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;
printf("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

printf("CLOSE cn;\n");
EXEC SQL CLOSE cn;
CHCKOK ();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts806.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7563','pass','PC');
       }
     else
       {
          printf("\n\n       yts806.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7563','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7563 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


/*  EMBEDDED C (file "YTS767.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS767.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  Access To CHECK_CONSTRAINTS view                             */
/*  a) Explicit table constraints in CHECK_CONSTRAINTS view      */
/*  b) Column constraints in CHECK_CONSTRAINTS view.             */
/*  c) Domain constraints in CHECK_CONSTRAINTS view.             */
/*  d) Unique identification in CHECK_CONSTRAINTS view.          */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    21.2.15  CHECK_CONSTRAINTS view                            */
/*    21.2.13  TABLE_CONSTRAINTS view                            */
/*    11.4 SR9 <column constraint definition>                    */
/*    11.6 SR1 <table constraint definition>                     */
/*    11.9     <check constraint definition>                     */
/*    10.6 SR2 <constraint name definition> and                  */
/*             <constraint attributes>                           */
/*    11.6 SR2 <table constraint definition>                     */
/*    11.21    <domain definition>                               */
/*    F# 33    Constraint tables                                 */
/*    F# 25    Domain definition                                 */
/*    F# 17    Multiple schemas per user                         */
/*    F# 3     Basic schema manipulation                         */
/*    F# 2     Basic information schema                          */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*  12.12.95 Remove references to CONSTRAINT_SCHEMA              */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-11                                    */
/*    Added rollback after authid                                */
/*    Removed EXEC SQL from inside printf                        */
/*    Fixed identifiers in info schem                            */
/*    Get constraint schema too in case name is re-used          */
/*    Cleanups                                                   */
/*    Added visual check warning                                 */
/*    Fixed string length                                        */
/*    Fixed syntax errors                                        */
/*    Fixed bad schema references                                */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char conam1[129];
char cosch1[129];
char chck[31];
short indic1;
short co;
short co2;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
short    i;
long     flag;
long flag2;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts767.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7544 ********************/
flag = 1;
flag2 = 1;

     printf("                  TEST7544 \n");
     printf("   Explicit table constr. in CHECK_CONSTRAINTS view\n");
     printf("References:\n");
     printf("    21.2.15   CHECK_CONSTRAINTS view\n");
     printf("    21.3.13   TABLE_CONSTRAINTS view\n");
     printf("    11.4 SR9  <column definition>\n");
     printf("    11.6 SR1  <table constraint definition>\n");
     printf("    11.9      <check constraint definition>\n");
     printf("    10.6 SR2  <constraint name definition> and \n");
     printf("              <constraint attributes>\n");
     printf("    11.6 SR2  <table constraint definition>\n");
     printf("    F# 33     Constraint tables\n");
     printf("    F# 17     Multiple schemas per user\n");
     printf("    F# 3      Basic schema manipulation\n");
     printf("    F# 2      Basic information schema\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

SQLCODE = -1;
strcpy (SQLSTATE, "xxxxx");

/* ensure CHECK CONSTRAINT in table staff7 schema CTS1 appears */
/* initialise all variables */
for (i = 0; i < 128; i++)  
    {  
      conam1[i] = 'x';
      cosch1[i] = 'x';
    }
conam1[128] = '\0';
cosch1[128] = '\0';

strcpy(chck,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

indic1 = 99;

printf("SELECT CONSTRAINT_SCHEMA, CONSTRAINT_NAME\n");
printf("INTO :cosch1, :conam1\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_SCHEMA = 'CTS1' AND\n");
printf("TABLE_NAME = 'STAFF7' AND\n");
printf("CONSTRAINT_TYPE = 'CHECK';\n");
EXEC SQL SELECT CONSTRAINT_SCHEMA, CONSTRAINT_NAME
INTO :cosch1, :conam1
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE TABLE_SCHEMA = 'CTS1' AND
TABLE_NAME = 'STAFF7' AND
CONSTRAINT_TYPE = 'CHECK';
CHCKOK ();
printf("\n");

/* check row is featured in the CHECK_CONSTRAINTS view */

printf("SELECT CHECK_CLAUSE INTO :chck:indic1\n");
printf("FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_SCHEMA = :cosch1\n");
printf("AND CONSTRAINT_NAME = :conam1;\n");
EXEC SQL SELECT CHECK_CLAUSE INTO :chck:indic1
FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA = :cosch1
AND CONSTRAINT_NAME = :conam1;
CHCKOK ();
printf("\n");

/* check value returned is correct */
/* as length of check clause is above 18 chars the implementation */
/* may store either a NULL value or the check clause itself */

if (indic1 == -1)
{
  printf ("indic1 is -1 -- skip subtest\n");
}
else
{
  printf ("Value expected is CHECK (GRADE BETWEEN 1 AND 20)\n");
  printf ("chck is %s\n", chck);
   if (strncmp(chck,"CHECK (GRADE BETWEEN 1 AND 20)",30) != 0)
   {
      printf("VISUAL CHECK REQUIRED -- ALTERNATE SYNTAX MAY BE VALID\n");
      flag2 = 0;
   }
}

printf("\n");

/* ensure CHECK_CONSTRAINT in table staff7, schema cts1b appears */
/* initialise all variables */

for (i = 0; i < 128; i++) 
    { 
      cosch1[i] = 'x';
      conam1[i] = 'x'; 
    } 
conam1[128] = '\0';
cosch1[128] = '\0';
strcpy(chck,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
indic1 = 99;

printf("SELECT CONSTRAINT_SCHEMA, CONSTRAINT_NAME\n");
printf("INTO :cosch1, :conam1\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_SCHEMA = 'CTS1B' AND\n");
printf("TABLE_NAME = 'STAFF7';\n");
EXEC SQL SELECT CONSTRAINT_SCHEMA, CONSTRAINT_NAME
INTO :cosch1, :conam1
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE TABLE_SCHEMA = 'CTS1B' AND
TABLE_NAME = 'STAFF7';
CHCKOK ();
printf("\n");

/* check row is featured in the CHECK_CONSTRAINTS view */

printf("SELECT CHECK_CLAUSE INTO :chck:indic1\n");
printf("FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_SCHEMA = :cosch1\n");
printf("AND CONSTRAINT_NAME = :conam1;\n");
EXEC SQL SELECT CHECK_CLAUSE INTO :chck:indic1
FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA = :cosch1
AND CONSTRAINT_NAME = :conam1;
CHCKOK ();
printf("\n");

/* check value returned is correct */
/* as length of check clause is above 18 chars the implementation */
/* may store either a NULL value or the check clause itself */

if (indic1 == -1)
{
  printf ("indic1 is -1 -- skip subtest\n");
}
else
{
  printf ("Value expected is CHECK (GRADE BETWEEN 1 AND 20)\n");
  printf ("chck is %s\n", chck);
   if (strncmp(chck,"CHECK (GRADE BETWEEN 1 AND 20)",30) != 0)
   {
      printf("VISUAL CHECK REQUIRED -- ALTERNATE SYNTAX MAY BE VALID\n");
      flag2 = 0;
   }
}
printf("\n");

/* ensure CHECK CONSTRAINT in PROJ_DURATION schema CTS1 appears */

/* reinitialise all variables */

for (i = 0; i < 128; i++) 
    { 
      cosch1[i] = 'x';
      conam1[i] = 'x'; 
    } 
conam1[128] = '\0';
cosch1[128] = '\0';
strcpy(chck,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("SELECT CONSTRAINT_SCHEMA, CONSTRAINT_NAME\n");
printf("INTO :cosch1, :conam1\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_SCHEMA = 'CTS1' AND\n");
printf("TABLE_NAME = 'PROJ_DURATION';\n");
EXEC SQL SELECT CONSTRAINT_SCHEMA, CONSTRAINT_NAME
INTO :cosch1, :conam1
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE TABLE_SCHEMA = 'CTS1' AND
TABLE_NAME = 'PROJ_DURATION';
CHCKOK ();
printf("\n");

/* check row is featured in the CHECK_CONSTRAINTS view */

printf("SELECT CHECK_CLAUSE INTO :chck:indic1\n");
printf("FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_SCHEMA = :cosch1\n");
printf("AND CONSTRAINT_NAME = :conam1;\n");
EXEC SQL SELECT CHECK_CLAUSE INTO :chck:indic1
FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA = :cosch1
AND CONSTRAINT_NAME = :conam1;
CHCKOK ();
printf("\n");

if (indic1 == -1)
{
  printf ("indic1 is -1 -- skip subtest\n");
}
else
{
  printf ("Value expected is CHECK (MONTHS > 0)\n");
  printf ("chck is %s\n", chck);
   if (strncmp(chck,"CHECK (MONTHS > 0)",18) != 0)
   {
      printf("VISUAL CHECK REQUIRED -- ALTERNATE SYNTAX MAY BE VALID\n");
      flag2 = 0;
   }
}
printf("\n");

/* ensure CHECK CONSTRAINT in PROJ_DURATION schema CTS1b appears */

/* reinitialise all variables */

for (i = 0; i < 128; i++) 
    {
      cosch1[i] = 'x';
      conam1[i] = 'x'; 
    } 
conam1[128] = '\0';
cosch1[128] = '\0';
strcpy(chck,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("SELECT CONSTRAINT_SCHEMA, CONSTRAINT_NAME\n");
printf("INTO :cosch1, :conam1\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_SCHEMA = 'CTS1B' AND\n");
printf("TABLE_NAME = 'PROJ_DURATION';\n");
EXEC SQL SELECT CONSTRAINT_SCHEMA, CONSTRAINT_NAME
INTO :cosch1, :conam1
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE TABLE_SCHEMA = 'CTS1B' AND
TABLE_NAME = 'PROJ_DURATION';
CHCKOK ();
printf("\n");

/* check row is featured in the CHECK_CONSTRAINTS view */

printf("SELECT CHECK_CLAUSE INTO :chck:indic1\n");
printf("FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_SCHEMA = :cosch1\n");
printf("AND CONSTRAINT_NAME = :conam1;\n");
EXEC SQL SELECT CHECK_CLAUSE INTO :chck:indic1
FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA = :cosch1
AND CONSTRAINT_NAME = :conam1;
CHCKOK ();
printf("\n");

/* ensure value for CHECK_CLAUSE is as expected */

if (indic1 == -1)
{
  printf ("indic1 is -1 -- skip subtest\n");
}
else
{
  printf ("Value expected is CHECK (MONTHS > 0)\n");
  printf ("chck is %s\n", chck);
   if (strncmp(chck,"CHECK (MONTHS > 0)",18) != 0)
   {
      printf("VISUAL CHECK REQUIRED -- ALTERNATE SYNTAX MAY BE VALID\n");
      flag2 = 0;
   }
}
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

if (flag != 1)
{
          printf("\n\n       yts767.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7544','fail','PC');
          errcnt = errcnt + 1;
}
else
{
  if (flag2 == 1)
  {
          printf("\n\n       yts767.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7544','pass','PC');
  }
  else
  {
          printf("\n\n       yts767.pc  *** nogo *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7544','nogo','PC');
          errcnt = errcnt + 1;
  }
}

     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7544 *********************/
/******************** BEGIN TEST7545 ********************/
flag = 1;
flag2 = 1;

     printf("                  TEST7545 \n");
     printf("   Column constraints in CHECK_CONSTRAINTS view\n");
     printf("References:\n");
     printf("    21.2.15   CHECK_CONSTRAINTS view\n");
     printf("    21.3.13   TABLE_CONSTRAINTS view\n");
     printf("    11.4 SR9  <column definition>\n");
     printf("    11.6 SR1  <table constraint definition>\n");
     printf("    11.9      <check constraint definition>\n");
     printf("    10.6 SR2  <constraint name definition> and \n");
     printf("              <constraint attributes>\n");
     printf("    11.6 SR2  <table constraint definition>\n");
     printf("    F# 33     Constraint tables\n");
     printf("    F# 17     Multiple Schemas Per User\n");
     printf("    F# 3      Basic Schema Manipulation\n");
     printf("    F# 2      Basic information schema\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

for (i = 0; i < 128; i++) 
    {
      cosch1[i] = 'x';
      conam1[i] = 'x'; 
    } 
conam1[128] = '\0';
cosch1[128] = '\0';
strcpy(chck,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("SELECT CONSTRAINT_SCHEMA, CONSTRAINT_NAME\n");
printf("INTO :cosch1, :conam1\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_SCHEMA = 'CTS1' AND\n");
printf("CONSTRAINT_TYPE = 'CHECK' AND\n");
printf("TABLE_NAME = 'STAFFZ';\n");
EXEC SQL SELECT CONSTRAINT_SCHEMA, CONSTRAINT_NAME
INTO :cosch1, :conam1
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE TABLE_SCHEMA = 'CTS1' AND
CONSTRAINT_TYPE = 'CHECK' AND
TABLE_NAME = 'STAFFZ';
CHCKOK ();
printf("\n");

printf("SELECT CHECK_CLAUSE INTO :chck:indic1\n");
printf("FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_SCHEMA = :cosch1\n");
printf("AND CONSTRAINT_NAME = :conam1;\n");
EXEC SQL SELECT CHECK_CLAUSE INTO :chck:indic1
FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA = :cosch1
AND CONSTRAINT_NAME = :conam1;
CHCKOK ();
printf("\n");

if (indic1 == -1)
{
  printf ("indic1 is -1 -- skip subtest\n");
}
else
{
  printf ("Value expected is CHECK (SALARY > 0)\n");
  printf ("chck is %s\n", chck);
   if (strncmp(chck,"CHECK (SALARY > 0)",18) != 0)
   {
      printf("VISUAL CHECK REQUIRED -- ALTERNATE SYNTAX MAY BE VALID\n");
      flag2 = 0;
   }
}
printf("\n");

for (i = 0; i < 128; i++) 
    {
      cosch1[i] = 'x';
      conam1[i] = 'x'; 
    } 
conam1[128] = '\0';
cosch1[128] = '\0';
strcpy(chck,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("SELECT CONSTRAINT_SCHEMA, CONSTRAINT_NAME\n");
printf("INTO :cosch1, :conam1\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_SCHEMA = 'CTS1B' AND\n");
printf("CONSTRAINT_TYPE = 'CHECK' AND\n");
printf("TABLE_NAME = 'STAFFZ';\n");
EXEC SQL SELECT CONSTRAINT_SCHEMA, CONSTRAINT_NAME
INTO :cosch1, :conam1
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE TABLE_SCHEMA = 'CTS1B' AND
CONSTRAINT_TYPE = 'CHECK' AND
TABLE_NAME = 'STAFFZ';
CHCKOK ();
printf("\n");

printf("SELECT CHECK_CLAUSE INTO :chck:indic1\n");
printf("FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_SCHEMA = :cosch1\n");
printf("AND CONSTRAINT_NAME = :conam1;\n");
EXEC SQL SELECT CHECK_CLAUSE INTO :chck:indic1
FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA = :cosch1
AND CONSTRAINT_NAME = :conam1;
CHCKOK ();
printf("\n");

if (indic1 == -1)
{
  printf ("indic1 is -1 -- skip subtest\n");
}
else
{
  printf ("Value expected is CHECK (SALARY > 0)\n");
  printf ("chck is %s\n", chck);
   if (strncmp(chck,"CHECK (SALARY > 0)",18) != 0)
   {
      printf("VISUAL CHECK REQUIRED -- ALTERNATE SYNTAX MAY BE VALID\n");
      flag2 = 0;
   }
}
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

if (flag != 1)
{
          printf("\n\n       yts767.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7545','fail','PC');
          errcnt = errcnt + 1;
}
else
{
  if (flag2 == 1)
  {
          printf("\n\n       yts767.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7545','pass','PC');
  }
  else
  {
          printf("\n\n       yts767.pc  *** nogo *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7545','nogo','PC');
          errcnt = errcnt + 1;
  }
}

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7545 *********************/
/******************** BEGIN TEST7546 ********************/
flag = 1;
flag2 = 1;

     printf("                  TEST7546 \n");
     printf("   Domain constraints in CHECK_CONSTRAINTS view\n");
     printf("References:\n");
     printf("    21.2.15   CHECK_CONSTRAINTS view\n");
     printf("    21.3.13   TABLE_CONSTRAINTS view\n");
     printf("    11.4 SR9  <column definition>\n");
     printf("    11.6 SR1  <table constraint definition>\n");
     printf("    11.9      <check constraint definition>\n");
     printf("    10.6 SR2  <constraint name definition> and \n");
     printf("              <constraint attributes>\n");
     printf("    11.6 SR2  <table constraint definition>\n");
     printf("    11.21     <domain definition>\n");
     printf("    F# 33     Constraint tables\n");
     printf("    F# 25     Domain definition\n");
     printf("    F# 17     Multiple Schemas Per User\n");
     printf("    F# 3      Basic Schema Manipulation\n");
     printf("    F# 2      Basic information schema\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

for (i = 0; i < 128; i++) 
    {
      cosch1[i] = 'x';
      conam1[i] = 'x'; 
    } 
conam1[128] = '\0';
cosch1[128] = '\0';
strcpy(chck,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("SELECT CONSTRAINT_SCHEMA, CONSTRAINT_NAME\n");
printf("INTO :cosch1, :conam1\n");
printf("FROM INFORMATION_SCHEMA.DOMAIN_CONSTRAINTS\n");
printf("WHERE DOMAIN_SCHEMA = 'CTS1' AND\n");
printf("DOMAIN_NAME = 'ESAL';\n");
EXEC SQL SELECT CONSTRAINT_SCHEMA, CONSTRAINT_NAME
INTO :cosch1, :conam1
FROM INFORMATION_SCHEMA.DOMAIN_CONSTRAINTS
WHERE DOMAIN_SCHEMA = 'CTS1' AND
DOMAIN_NAME = 'ESAL';
CHCKOK ();
printf("\n");

printf("SELECT CHECK_CLAUSE INTO :chck:indic1\n");
printf("FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_SCHEMA = :cosch1\n");
printf("AND CONSTRAINT_NAME = :conam1;\n");
EXEC SQL SELECT CHECK_CLAUSE INTO :chck:indic1
FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA = :cosch1
AND CONSTRAINT_NAME = :conam1;

CHCKOK ();
printf("\n");

if (indic1 == -1)
{
  printf ("indic1 is -1 -- skip subtest\n");
}
else
{
  printf ("Value expected is CHECK (VALUE > 500)\n");
  printf ("chck is %s\n", chck);
   if (strncmp(chck,"CHECK (VALUE > 500)", 19) != 0)
   {
      printf("VISUAL CHECK REQUIRED -- ALTERNATE SYNTAX MAY BE VALID\n");
      flag2 = 0;
   }
}
printf("\n");

for (i = 0; i < 128; i++) 
    {
      cosch1[i] = 'x';
      conam1[i] = 'x'; 
    } 
conam1[128] = '\0';
cosch1[128] = '\0';
strcpy(chck,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

printf("SELECT CONSTRAINT_SCHEMA, CONSTRAINT_NAME\n");
printf("INTO :cosch1, :conam1\n");
printf("FROM INFORMATION_SCHEMA.DOMAIN_CONSTRAINTS\n");
printf("WHERE DOMAIN_SCHEMA = 'CTS1B' AND\n");
printf("DOMAIN_NAME = 'ESAL';\n");
EXEC SQL SELECT CONSTRAINT_SCHEMA, CONSTRAINT_NAME
INTO :cosch1, :conam1
FROM INFORMATION_SCHEMA.DOMAIN_CONSTRAINTS
WHERE DOMAIN_SCHEMA = 'CTS1B' AND
DOMAIN_NAME = 'ESAL';

CHCKOK ();
printf("\n");

printf("SELECT CHECK_CLAUSE INTO :chck:indic1\n");
printf("FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_SCHEMA = :cosch1\n");
printf("AND CONSTRAINT_NAME = :conam1;\n");
EXEC SQL SELECT CHECK_CLAUSE INTO :chck:indic1
FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA = :cosch1
AND CONSTRAINT_NAME = :conam1;
CHCKOK ();
printf("\n");

if (indic1 == -1)
{
  printf ("indic1 is -1 -- skip subtest\n");
}
else
{
  printf ("Value expected is CHECK (VALUE > 500)\n");
  printf ("chck is %s\n", chck);
   if (strncmp(chck,"CHECK (VALUE > 500)", 19) != 0)
   {
      printf("VISUAL CHECK REQUIRED -- ALTERNATE SYNTAX MAY BE VALID\n");
      flag2 = 0;
   }
}
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

if (flag != 1)
{
          printf("\n\n       yts767.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7546','fail','PC');
          errcnt = errcnt + 1;
}
else
{
  if (flag2 == 1)
  {
          printf("\n\n       yts767.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7546','pass','PC');
  }
  else
  {
          printf("\n\n       yts767.pc  *** nogo *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7546','nogo','PC');
          errcnt = errcnt + 1;
  }
}
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7546 *********************/
/******************** BEGIN TEST7547 ********************/
flag = 1;

     printf("                  TEST7547 \n");
     printf("   Unique identification in CHECK_CONSTRAINTS view\n");
     printf("References:\n");
     printf("    21.2.15   CHECK_CONSTRAINTS view\n");
     printf("    21.3.13   TABLE_CONSTRAINTS view\n");
     printf("    11.4 SR9  <column definition>\n");
     printf("    11.6 SR1  <table constraint definition>\n");
     printf("    11.9      <check constraint definition>\n");
     printf("    10.6 SR2  <constraint name definition> and \n");
     printf("              <constraint attributes>\n");
     printf("    11.6 SR2  <table constraint definition>\n");
     printf("    F# 33     Constraint tables\n");
     printf("    F# 17     Multiple Schemas Per User\n");
     printf("    F# 3      Basic Schema Manipulation\n");
     printf("    F# 2      Basic information schema\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* check CONSTRAINT_CATALOG contains no NULL values */

printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_CATALOG IS NULL\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS
WHERE CONSTRAINT_CATALOG IS NULL;
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
  flag = 0;

/* check constraint_schema contains no null values */
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_SCHEMA IS NULL;\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA IS NULL;
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
  flag = 0;

/* check constraint_name contains no NULL values */

printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS\n");
printf("WHERE CONSTRAINT_NAME IS NULL;\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS
WHERE CONSTRAINT_NAME IS NULL;
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
  flag = 0;

/* check combined values of CATALOG, */
/* NAME and SCHEMA are unique */

co = 99;
co2 = -1;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS;\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS;
CHCKOK ();
printf("\n");

printf("SELECT COUNT (*) INTO :co2\n");
printf("FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS AS T\n");
printf("WHERE\n");
printf("UNIQUE (\n");
printf("       SELECT * FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS\n");
printf("       WHERE CONSTRAINT_CATALOG = T.CONSTRAINT_CATALOG AND\n");
printf("       CONSTRAINT_NAME = T.CONSTRAINT_NAME AND\n");
printf("       CONSTRAINT_SCHEMA = T.CONSTRAINT_SCHEMA\n");
printf("       );\n");
EXEC SQL SELECT COUNT (*) INTO :co2
FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS AS T
WHERE
UNIQUE (
       SELECT * FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS
       WHERE CONSTRAINT_CATALOG = T.CONSTRAINT_CATALOG AND
       CONSTRAINT_NAME = T.CONSTRAINT_NAME AND
       CONSTRAINT_SCHEMA = T.CONSTRAINT_SCHEMA
       );
CHCKOK ();
printf("co should be equal to co2; co is %d, co2 is %d\n\n", co, co2);
if (co != co2)
   flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts767.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7547','pass','PC');
       }
     else
       {
          printf("\n\n       yts767.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7547','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7547 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


/*  EMBEDDED C (file "YTS769.PC")  */

/* Copyright 1996 National Computing Centre Limited, */
/* and Computer Logic R&D S.A */
/* on behalf of the CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS769.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  This routine tests Access to DOMAINS view                    */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    21.2.5   DOMAINS view                                      */
/*    11.21    <domain definition>                               */
/*    F#35     Intermediate information schema                   */
/*    F#17     Multiple schemas per user                         */
/*    F#25     Domain definition                                 */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-12                                    */
/*    Added rollback after authid                                */
/*    Removed EXEC SQL from inside printf                        */
/*    Fixed syntax errors                                        */
/*    Major cleanups                                             */
/*    Removed unused variables and surplus syntax                */
/*    Harmonized printouts with statements                       */
/*    Fixed pass criteria                                        */
/*    Fixed info schem identifiers                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short co;
char domsch[129]; 
char dtype[30];  
char domn[129];
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
short    i;
long     flag;
long     flag2;
long     flag3;
long     flag4;
long     flag5;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts769.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7551 ********************/
flag = 1;

     printf("                  TEST7551 \n");
     printf("   Access to DOMAINS view\n");
     printf("References:\n");
     printf("    21.2.5  DOMAINS view\n");
     printf("    11.21   <domain definition>\n");
     printf("    F#35    Intermediate information schema\n");
     printf("    F#17    Multiple schemas per user\n");
     printf("    F#25    Domain definition>\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* This view has already been tested along with the errata columns in */
/* yts750 */

SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* prepare database */
/* On startup there is a domain CTS1.ESAL and a domain CTS1B.ESAL */
/* Both owned by CTS1 */

printf("DROP DOMAIN CTS1b.esal CASCADE;\n");
EXEC SQL DROP DOMAIN CTS1b.esal CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* initialise all host variables */
for (i = 0; i < 128; i++)   
  { 
    domsch[i] = 'b'; 
    domn[i] = 'h';
  }

domsch[128] = '\0'; 
domn[128] = '\0';

strcpy(dtype,"ccccccccccccccccccccccccccccc");  

/* initialise all flags */

flag2 = 1;
flag3 = 1;
flag4 = 1;
flag5 = 1;

/* declare cursor */

printf("DECLARE data769 CURSOR FOR\n");
printf("SELECT DOMAIN_SCHEMA, DOMAIN_NAME, DATA_TYPE\n");
printf("FROM INFORMATION_SCHEMA.DOMAINS\n");
printf("WHERE DOMAIN_NAME IN\n");
printf("('ESAL','NUMDOM','DOMCHAR','DOMSMALL');\n\n");
EXEC SQL DECLARE data769 CURSOR FOR
SELECT DOMAIN_SCHEMA, DOMAIN_NAME, DATA_TYPE
FROM INFORMATION_SCHEMA.DOMAINS
WHERE DOMAIN_NAME IN
('ESAL','NUMDOM','DOMCHAR','DOMSMALL');

/* The surviving ESAL is in CTS1 */
/* DOMCHAR and DOMSMALL are in CTS1B */
/* NUMDOM is in CTS2 with usage granted to CTS1 */

printf("OPEN data769\n");
EXEC SQL OPEN data769;
CHCKOK ();

P100:
printf("\n");
printf("FETCH DATA769 INTO :domsch, :domn, :dtype;\n");
EXEC SQL FETCH DATA769 INTO :domsch, :domn, :dtype;

   NOSUBCLASS();

if (strncmp(NORMSQ,"00000",5) != 0)
   goto P101;

CHCKOK ();
printf ("(Checking for legal values)\n");

if (strncmp(domn,"ESAL",4) == 0 && flag2 == 1)
     goto P102;
else
     goto P103;

P102:
   flag2 = 0;
   printf("domain 'ESAL' returned \n");
   if (strncmp(domsch,"CTS1 ",5) != 0 || strncmp(dtype,"INTEGER",7) != 0)
   {
       flag = 0;
       printf("Domain schema 'CTS1' expected, got %s\n", domsch);
       printf("Datatype INTEGER expected, got %s\n", dtype);
   }
   goto P100;
      
P103:      
  if (strncmp(domn,"NUMDOM",6) == 0 && flag3 == 1)
     goto P104;
  else 
     goto P105;

P104:
       flag3 = 0;
       printf("domain 'NUMDOM' returned \n");
       if (strncmp(domsch,"CTS2",4) != 0 || strncmp(dtype,"INTEGER",7) != 0)
       { 
           flag = 0; 
           printf("Domain schema 'CTS2' expected, got %s\n", domsch); 
           printf("Datatype INTEGER expected, got %s\n", dtype);
       }          
       goto P100;
    
P105:
   if (strncmp(domsch,"CTS1B",5) == 0) {
       if (strncmp(domn,"DOMCHAR",7) == 0 && flag4 == 1)
          goto P106;
       goto P107;
   }
printf ("Incorrect domain returned\n");
printf ("Domain schema is %s\n", domsch);
printf ("Domain name is %s\n", domn);
goto P100;

P106:
             flag4 = 0;
             printf("domain 'DOMCHAR' returned \n");
             if (strncmp(dtype,"CHARACTER",9) != 0)
                 {
                  printf("Datatype CHARACTER expected, got %s\n", dtype);
                  flag = 0;
                 }
             goto P100;
       
P107:
       if (strncmp(domn,"DOMSMALL",8) == 0 && flag5 == 1)
       {  
           printf("Domain 'DOMSMALL' returned\n");
           flag5 = 0;
           if (strncmp(dtype,"SMALLINT",8) != 0)
              {
                printf("Datatype SMALLINT expected, got %s\n", dtype);
                flag = 0;
              }
       }
       else 
       {
printf ("Incorrect domain returned\n");
printf ("Domain schema is %s\n", domsch);
printf ("Domain name is %s\n", domn);
                 flag = 0;
       }
       goto P100; 

P101:
printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
printf ("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (SQLCODE != 100 || strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

/* check all correct rows returned */
if (flag2 == 0 && flag3 == 0 && flag4 == 0 && flag5 == 0)
   printf("All the expected rows were correctly returned\n");
else
{
   printf("Not all the expected rows were correctly returned\n");
   flag = 0;
}
printf ("\n");

/* close cursor */

printf("CLOSE data769\n");
EXEC SQL CLOSE data769;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* create domain esal in schema CTS1b */
/* an identical domain already exists in CTS1 */

printf("CREATE DOMAIN cts1b.esal AS INTEGER\n");
EXEC SQL CREATE DOMAIN cts1b.esal AS INTEGER;
CHCKOK ();
printf("\n");

printf("COMMIT WORK\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* check new domain is referenced in INFORMATION_SCHEMA.DOMAINS */

co = 99;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.DOMAINS\n");
printf("WHERE DOMAIN_NAME = 'ESAL';\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.DOMAINS
WHERE DOMAIN_NAME = 'ESAL';
CHCKOK ();
printf("co should be 2; its value is %d\n\n", co);
if (co != 2)
  flag = 0;

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* drop domain cts1b.esal */
printf("DROP DOMAIN cts1b.esal CASCADE;\n");
EXEC SQL DROP DOMAIN cts1b.esal CASCADE;
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* check reference to cts1b.esal is removed from DOMAINS view */

co = 99;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.DOMAINS\n");
printf("WHERE DOMAIN_NAME = 'ESAL';\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.DOMAINS
WHERE DOMAIN_NAME = 'ESAL';
CHCKOK ();
printf("co should be 1; its value is %d\n\n", co);
if (co != 1)
  flag = 0;

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* ensure database is left in a consistent state */

printf("CREATE DOMAIN cts1b.esal AS INTEGER\n");
printf("CHECK  (VALUE>500);\n");
EXEC SQL CREATE DOMAIN cts1b.esal AS INTEGER
CHECK  (VALUE>500);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts769.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7551','pass','PC');
       }
     else
       {
          printf("\n\n       yts769.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7551','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7551 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

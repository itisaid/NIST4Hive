/*  EMBEDDED C (file "YTS782.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS782.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  Set local time zone - invalid value, exception               */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    16.5 GR1b <set local time zone statement>,<interval        */
/*              value expression>                                */
/*    6.10 GR5e <cast specification>                             */
/*    6.15 F    <interval value expression>                      */
/*    F#41      Time zone specification                          */
/*    F#5       DATETIME data types                              */
/*    F#20      CAST functions                                   */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*  24/10/95 Table Inserts Corrected                             */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-19                                    */
/*    Added rollback after authid                                */
/*    Fixed syntax errors                                        */
/*    Removed EXEC SQL from printf                               */
/*    Fixed pass criteria                                        */
/*    Worked around the literal problem                          */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
long int1;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts782.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7561 ********************/
flag = 1;

     printf("                  TEST7561 \n");
     printf("   Set local time zone - invalid value, exception\n");
     printf("References:\n");
     printf("    16.5 GR1b  <set local time zone statement\n");
     printf("               <interval value expression>\n");
     printf("    6.10 GR5e  <cast specification>\n");
     printf("    6.15 F     <interval value specification>\n");
     printf("    F#41       Time zone specification\n");
     printf("    F#5        DATETIME data types\n");
     printf("    F#20       CAST functions\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* prepare the database */
printf("DELETE FROM TTIME_BASE;\n");
EXEC SQL DELETE FROM TTIME_BASE;
CHCKOK ();
printf("\n");

printf("INSERT INTO TTIME (PK, TT)\n");
printf("VALUES (1, TIME '00:00:00');\n");
EXEC SQL INSERT  INTO TTIME (PK, TT)
VALUES (1, TIME '00:00:00');
CHCKOK ();
printf("\n");

printf("INSERT INTO TTIME (PK, TT)\n");
printf("VALUES (2, TIME '10:50:00');\n");
EXEC SQL INSERT  INTO TTIME (PK, TT)
VALUES (2, TIME '10:50:00');
CHCKOK ();
printf("\n");

printf("INSERT INTO TTIME (PK, TT)\n");
printf("VALUES (3, TIME '20:11:00');\n");
EXEC SQL INSERT  INTO TTIME (PK, TT)
VALUES (3, TIME '20:11:00');
CHCKOK ();
printf("\n");

printf("INSERT INTO TTIME (PK, TT)\n");
printf("VALUES (4, TIME  '01:45:00');\n");
EXEC SQL INSERT  INTO TTIME (PK, TT)
VALUES (4, TIME '01:45:00');
CHCKOK ();
printf("\n");

printf("INSERT INTO TTIME (PK)\n");
printf("VALUES (5);\n");
EXEC SQL INSERT INTO TTIME (PK)
VALUES (5);
CHCKOK ();
printf("\n");

/* attempt to set time zone to an invalid interval */

printf("SET TIME ZONE INTERVAL '13:01' HOUR TO MINUTE;\n");
EXEC SQL SET TIME ZONE INTERVAL '13:01' HOUR TO MINUTE;

/* That should generate a data exception - invalid time zone */
/* displacement which is SQLSTATE 22009 */

printf("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;
printf("SQLSTATE should be 22009; its value is %s\n\n", SQLSTATE);
if (strncmp (SQLSTATE, "22009", 5) != 0)
  flag = 0;

/* check values in tables have not been updated */

int1 = 0;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM TTIME\n");
printf("  WHERE PK = 1\n");
printf("  AND TT = TIME '00:00:00';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM TTIME
  WHERE PK = 1
  AND TT = TIME '00:00:00';
CHCKOK ();
printf ("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

printf("SET TIME ZONE INTERVAL -'13:00' HOUR TO MINUTE;\n");
EXEC SQL SET TIME ZONE INTERVAL -'13:00' HOUR TO MINUTE;

/* That should generate a data exception - invalid time zone */
/* displacement which is SQLSTATE 22009 */

printf("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;
printf("SQLSTATE should be 22009; its value is %s\n\n", SQLSTATE);
if (strncmp (SQLSTATE, "22009", 5) != 0)
  flag = 0;

/* check values in tables have not been updated */

int1 = 0;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM TTIME\n");
printf("  WHERE PK = 1\n");
printf("  AND TT = TIME '00:00:00';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM TTIME
  WHERE PK = 1
  AND TT = TIME '00:00:00';
CHCKOK ();
printf ("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/* attempt to insert NULL interval value */

printf("SET TIME ZONE CAST ((SELECT A.TT - B.TT \n");
printf("FROM TTIME A, TTIME B\n");
printf("WHERE A.PK = 3 AND B.PK = 5) AS INTERVAL HOUR TO MINUTE);\n");
EXEC SQL SET TIME ZONE CAST ((SELECT A.TT - B.TT 
FROM TTIME A, TTIME B
WHERE A.PK = 3 AND B.PK = 5) AS INTERVAL HOUR TO MINUTE);

/* That should generate a data exception - invalid time zone */
/* displacement which is SQLSTATE 22009 */

printf("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;
printf("SQLSTATE should be 22009; its value is %s\n\n", SQLSTATE);
if (strncmp (SQLSTATE, "22009", 5) != 0)
  flag = 0;

/* check values in tables have not been updated */

int1 = 0;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM TTIME\n");
printf("  WHERE PK = 1\n");
printf("  AND TT = TIME '00:00:00';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM TTIME
  WHERE PK = 1
  AND TT = TIME '00:00:00';
CHCKOK ();
printf ("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts782.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7561','pass','PC');
       }
     else
       {
          printf("\n\n       yts782.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7561','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7561 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


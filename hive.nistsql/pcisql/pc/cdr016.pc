/*  EMBEDDED C (file "CDR016.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1989/04/07 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  CDR016.PC                                                    */
/*  WRITTEN BY: SUN DAJUN                                        */
/*                                                               */
/*    THIS ROUTINE TESTS THE <unique constraint definition>      */
/*                                                               */
/*  REFERENCES                                                   */
/*        AMERICAN NATIONAL STANDARD database language - SQL     */
/*                           with Integrity Enhancement          */
/*                                                               */
/*             SECTION 6.6 <unique constraint definition>        */
/*                <unique constraint definition>::=              */
/*                       <unique specifition>(<unique column     */
/*                       list>)                                  */
/*                 <unique specifition>::= UNIQUE|PRIMARY KEY    */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>




EXEC SQL BEGIN DECLARE SECTION;
long count1;
long count2;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long SQLCODE;
int errcnt;
/* date_time declaration */
time_t cal;

long code1;

main()

{
        strcpy(uid,"SUN");
        AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM SUN.ECCO;
if (strncmp(uid,uidx,3) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, cdr016.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
/******************** BEGIN TEST0352 ********************/
/* This program updates a row in PRIMARY KEY TABLE      */
/* -- SIZ1_P, this will let two rows have the same value*/
/*  in PRIMARY COLUMNs.                                      */ 

printf("\n         FIPS sizing TEST0352             \n");
printf("                     PRIMARY KEY     \n");
printf("      SQL with Integrity Enhancement section 6.5,6.6\n");
printf("      - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("        SELECT COUNT(*) INTO:count1\n");
printf("        FROM SIZ1_P\n");
printf("        WHERE S1 = 'E1' AND S2 = 'TTS' AND S3 = 1;\n");
printf("\n");
printf("        UPDATE SIZ1_P\n");
printf("        SET S2 = 'TTT'\n");
printf("        WHERE S1 = 'E1' AND S2 = 'TTS' AND S3 = 1;\n");
printf("code1 = SQLCODE;\n");
printf("\n");
printf("        SELECT COUNT(*) INTO:count2\n");
printf("        FROM SIZ1_P\n");
printf("        WHERE S1 = 'E1' AND S2 = 'TTT' AND S3 = 1;\n");
printf("\n");
count1 = 0;
count2 = 0;
EXEC SQL SELECT COUNT(*) INTO:count1
        FROM SIZ1_P
        WHERE S1 = 'E1' AND S2 = 'TTS' AND S3 = 1;
EXEC SQL UPDATE SIZ1_P
        SET S2 = 'TTT'
        WHERE S1 = 'E1' AND S2 = 'TTS' AND S3 = 1;
code1 = SQLCODE;
EXEC SQL SELECT COUNT(*) INTO:count2
        FROM SIZ1_P
        WHERE S1 = 'E1' AND S2 = 'TTT' AND S3 = 1;
EXEC SQL ROLLBACK WORK;
printf(" The correct answer is :\n");
printf("           code1 is not equal to 0.\n");
printf("           count1 is 1\n");
printf("           count2 is 1\n");
printf(" Your answer is :\n");
printf("           code1  is %ld\n",code1);
printf("           count1 is %ld\n",count1);
printf("           count2 is %ld\n",count2);
        if (code1 != 0 && count1 == 1 && count2 == 1)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0352','pass','PC');
       printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0352','fail','PC');
          errcnt = errcnt + 1;
       printf("\n\n       cdr016.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;
/**************** END TEST 0352 ***********/





/******************** BEGIN TEST0353 ********************/
/* This test updates a row or rows on FOREIGN KEY       */
/* column in table SIZ1_F,set those rows (E1,*,*,*,*,*  */
/* *,*,*) to (E9,*,*,*,*,*,*,*,*),but there is not a row*/
/* (E9,*,*,*,*,*,*,*,*,*) in PRIMARY TABLE -- SIZ1_P,   */
/* this should be an   ERROR.                           */

printf("\n         FIPS sizing TEST0353             \n");
printf("              PRIMARY KEY & FOREIGN KEY    \n");
printf("     SQL with Integrity Enhancement section 6.5,6.6,6.7\n");
printf("     - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("        UPDATE SIZ1_F\n");
printf("        SET F1='E9'\n");
printf("        WHERE F1='E2';\n");
printf("code1 = SQLCODE;\n");
printf("\n");
printf("        SELECT COUNT(*) INTO :count1\n");
printf("        FROM SIZ1_F\n");
printf("        WHERE F1 = 'E2';\n");
EXEC SQL UPDATE SIZ1_F
        SET F1 = 'E9'
        WHERE F1 = 'E2';
code1 = SQLCODE;
EXEC SQL SELECT COUNT(*) INTO :count1
        FROM SIZ1_F
        WHERE F1 = 'E2';

EXEC SQL ROLLBACK WORK;

printf("        The correct result is code1 not equal 0\n");
printf("                              count1 = 3\n");
printf("        Your answer is code1=%ld\n",code1);
printf("                              count1 = %ld\n",count1);
        if (code1 != 0 && count1 == 3)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0353','pass','PC');
printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0353','fail','PC');
          errcnt = errcnt + 1;
printf("\n\n       cdr016.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
EXEC SQL COMMIT WORK;
/******************** END TEST0353 **************************/



/******************** BEGIN TEST0354 *******************/
/* This test update a row or rows on FOREIGN KEY       */ 
/* column in table SIZ1_F and there is correspondind   */
/* primary key a row  in PRIMARY TABLE -- SIZ1_P and   */
/* same forgeign key rows  in  SIZ1_F.                 */

printf("\n         FIPS sizing TEST0354             \n");
printf("              PRIMARY KEY & FOREIGN KEY    \n");
printf("     SQL with Integrity Enhancement section 6.5,6.6,6.7\n");
printf("     - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("        UPDATE SIZ1_F\n");
printf("        SET F1='E1'\n");
printf("        WHERE F1='E2' AND F6 = 'RRR';\n");
printf("code1 = SQLCODE;\n");
printf("        SELECT COUNT(*) INTO :count1\n");
printf("        FROM SIZ1_F\n");
printf("        WHERE F1 = 'E1';\n");
EXEC SQL UPDATE SIZ1_F
        SET F1 = 'E1'
        WHERE F1 = 'E2' AND F6 = 'RRR';
code1 = SQLCODE;
EXEC SQL SELECT COUNT(*) INTO :count1
        FROM SIZ1_F
        WHERE F1 = 'E1';
EXEC SQL ROLLBACK WORK;
printf("        The correct result is code1 equal 0\n");
printf("                              count1 = 4\n");
printf("        Your answer is code1=%ld\n",code1);
printf("                              count1 = %ld\n",count1);
        if (code1 == 0 && count1 == 4)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0354','pass','PC');
printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0354','fail','PC');
          errcnt = errcnt + 1;
printf("\n\n       cdr016.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
EXEC SQL COMMIT WORK;
/******************** END TEST0354 **************************/
     exit(errcnt);

}



/*  EMBEDDED C (file "YTS759.PC")  */

/* Copyright 1996 National Computing Centre Limited, */
/* and Computer Logic R&D S.A */
/* on behalf of the CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS759.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  This routine Tests GRANT USAGE on a domain                   */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    11.36  <grant statement>                                   */
/*    10.3   <privileges>                                        */
/*    11.21  <domain definition>                                 */
/*    11.3   <table definition>                                  */
/*    11.4   <column definition>                                 */
/*    F#25   Domain definition                                   */
/*    F#3    Basic schema manipulation                           */
/*    F#32   User authorization                                  */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-05                                    */
/*    Added rollback after authid                                */
/*    Cleanup                                                    */
/*    Removed EXEC SQL from inside printfs                       */
/*    Drop tables that are created                               */
/*    Fixed schema references                                    */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
long emp_ck; 
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts759.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7509 ********************/
flag = 1;

     printf("                  TEST7509 \n");
     printf("   GRANT USAGE on a domain\n");
     printf("References:\n");
     printf("    11.36   <grant statement>\n");
     printf("    10.3    <privileges>\n");
     printf("    11.21   <domain definition>\n");
     printf("    11.3    <table definition>\n");
     printf("    11.4    <column definition>\n");
     printf("    F#25    Domain definition\n");
     printf("    F#3     Basic schema manipulation\n");
     printf("    F#32    User authorization\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

printf("This test attempts to change session authorizations.  Because\n");
printf("authorizations are implementation-defined, this test may need\n");
printf("modification.  The following actions may help to pass the test:\n");
printf("  -- Change the initial authid to an authid with DBA privileges\n");
printf("  -- Insert code to work around implementation-defined\n");
printf("     authentication mechanisms (e.g. to reconnect with a\n");
printf("     different authid).\n");
printf("It might not be possible to change the session authorization,\n");
printf("as explained in 16.4 GR.4.  In this case, the restrictions that\n");
printf("render it impossible should be documented and the test assumed\n");
printf("to be passed.\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("CREATE DOMAIN emp_nos INTEGER;\n");
EXEC SQL CREATE DOMAIN emp_nos INTEGER;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("GRANT USAGE ON emp_nos TO CTS2\n");
printf("WITH GRANT OPTION\n");
EXEC SQL GRANT USAGE ON emp_nos TO CTS2 WITH GRANT OPTION;

CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("Connect user CTS2 to database\n");
printf("SET SESSION AUTHORIZATION 'CTS2';\n");
EXEC SQL SET SESSION AUTHORIZATION 'CTS2';

CHCKOK ();
printf("\n");

/* create table referencing emp_nos */

    SQLCODE = -1;
    strcpy(SQLSTATE,"xxxxx");

printf("Create table referencing granted domain\n");
printf("CREATE TABLE EMP_INFO\n");
printf("(  empno    CTS1.emp_nos,\n");
printf("   emp_name char(10),\n");
printf("   salary   smallint);\n");
EXEC SQL CREATE TABLE EMP_INFO
(  empno       CTS1.emp_nos,
   emp_name    char(10),
   salary      smallint);

CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("INSERT INTO EMP_INFO VALUES (1, 'watters',20000)\n");
EXEC SQL INSERT INTO EMP_INFO VALUES (1, 'watters',20000);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* check 'WITH GRANT OPTION' can be used correctly */

printf("GRANT USAGE ON CTS1.emp_nos TO CTS3\n");
EXEC SQL GRANT USAGE ON CTS1.emp_nos TO CTS3;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* Change login id to CTS3 */
printf("SET SESSION AUTHORIZATION 'CTS3';\n");
EXEC SQL SET SESSION AUTHORIZATION 'CTS3';
CHCKOK ();
printf("\n");

/*check no table emp exists*/
printf("DROP TABLE emp CASCADE;\n");
printf("COMMIT WORK;\n\n");
EXEC SQL DROP TABLE emp CASCADE;
EXEC SQL COMMIT WORK;

printf("CREATE TABLE emp\n");
printf("(col1   CTS1.emp_nos,\n");
printf(" col2   char(10))\n");
EXEC SQL CREATE TABLE emp
(col1    CTS1.emp_nos,
 col2    char(10));
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* ensure CTS3 can use domain */

printf("INSERT INTO emp VALUES (2,'pratt')\n");
EXEC SQL INSERT INTO emp VALUES (2, 'pratt');
CHCKOK ();
printf("\n");

emp_ck = 5;
printf("SELECT col1 INTO :emp_ck FROM emp;\n");
EXEC SQL SELECT col1 INTO :emp_ck FROM emp;
CHCKOK ();
printf ("emp_ck should be 2; its value is %ld\n\n", emp_ck);
if (emp_ck != 2)
    flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP TABLE EMP CASCADE;\n");
EXEC SQL DROP TABLE EMP CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("SET SESSION AUTHORIZATION 'CTS2';\n");
EXEC SQL SET SESSION AUTHORIZATION 'CTS2';
CHCKOK ();
printf("\n");

printf("DROP TABLE EMP_INFO CASCADE;\n");
EXEC SQL DROP TABLE EMP_INFO CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("SET SESSION AUTHORIZATION 'CTS1';\n");
EXEC SQL SET SESSION AUTHORIZATION 'CTS1';
CHCKOK ();
printf("\n");

printf("DROP DOMAIN emp_nos CASCADE;\n");
EXEC SQL DROP DOMAIN emp_nos CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts759.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7509','pass','PC');
       }
     else
       {
          printf("\n\n       yts759.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7509','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7509 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


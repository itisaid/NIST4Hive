/*  EMBEDDED C (file "SDL034.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1992/06/17 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  SDL034.PC                                                    */
/*  WRITTEN BY: DAVID W. FLATER                                  */
/*                                                               */
/*    THIS ROUTINE TESTS THE TRAPPING OF PRIVILEGE VIOLATIONS.   */
/*                                                               */
/*  REFERENCES                                                   */
/*        ANSI SQL-1992                                          */
/*                                                               */
/*                 SECTION 6.4  <column reference>               */
/*                 SECTION 11.36  <grant statement>              */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
     long t;
     char uid[19];
     char uidx[19];
EXEC SQL END DECLARE SECTION;

long SQLCODE;
int errcnt;
/* date_time declaration */
time_t cal;
long     ii;
long     flag;

main()
{
     strcpy(uid,"SCHANZLE");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
if (strncmp(uid,uidx,8) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, sdl034.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0474 ********************/
flag = 1;

printf("                          TEST0474 \n");
printf("          Priv.violation: need SELECT for searched UD\n");
printf("Reference ANSI SQL-1992 Section 6.4 <column reference>\n");
printf("          - - - - - - - - - - - - - - - - - - -\n\n");

     printf ("UPDATE CUGINI.SRCH1 SET C1 = 2 WHERE C1 = 0;\n");
     EXEC SQL UPDATE CUGINI.SRCH1
       SET C1 = 2 WHERE C1 = 0;
     ii = SQLCODE;
     printf ("SQLCODE should be < 0; its value is %ld\n", ii);

     if (ii >= 0)
       flag = 0;

     printf ("ROLLBACK WORK;\n");
     EXEC SQL ROLLBACK WORK;

     printf ("DELETE FROM CUGINI.SRCH1 WHERE C1 = 0;\n");
     EXEC SQL DELETE FROM CUGINI.SRCH1
       WHERE C1 = 0;
     ii = SQLCODE;
     printf ("SQLCODE should be < 0; its value is %ld\n", ii);

     if (ii >= 0)
       flag = 0;

     EXEC SQL ROLLBACK WORK;

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0474','pass','PC');
       }
     else
       {
          printf("\n\n       sdl034.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0474','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0474 *********************/

/******************** BEGIN TEST0475 ********************/
flag = 1;

printf("                          TEST0475 \n");
printf("          Priv.violation: GRANT ALL w/o GRANT OPTION\n");
printf("Reference ANSI SQL-1992 Section 11.36  <grant statement>\n");
printf("          - - - - - - - - - - - - - - - - - - -\n\n");

     printf ("SELECT COUNT(*) INTO :t FROM CUGINI.BADG1;\n");
     t = -1;
     EXEC SQL SELECT COUNT(*) INTO :t FROM CUGINI.BADG1;
     ii = SQLCODE;
     printf ("SQLCODE should be < 0; its value is %ld\n", ii);
     printf ("t should NOT be 1; its value is %ld\n", t);

     if (ii >= 0 || t == 1)
       flag = 0;

     EXEC SQL ROLLBACK WORK;

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0475','pass','PC');
       }
     else
       {
          printf("\n\n       sdl034.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0475','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0475 *********************/

/******************** BEGIN TEST0476 ********************/
flag = 1;

printf("                          TEST0476 \n");
printf("          Priv.violation: GRANT OPTION view/not table\n");
printf("Reference ANSI SQL-1992 Section 11.36  <grant statement>\n");
printf("          - - - - - - - - - - - - - - - - - - -\n\n");

     printf ("SELECT COUNT(*) INTO :t FROM CUGINI.BADG2;\n");
     t = -1;
     EXEC SQL SELECT COUNT(*) INTO :t FROM CUGINI.BADG2;
     ii = SQLCODE;
     printf ("SQLCODE should be < 0; its value is %ld\n", ii);
     printf ("t should NOT be 1; its value is %ld\n", t);

     if (ii >= 0 || t == 1)
       flag = 0;

     EXEC SQL ROLLBACK WORK;

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0476','pass','PC');
       }
     else
       {
          printf("\n\n       sdl034.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0476','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0476 *********************/

     exit(errcnt);
}

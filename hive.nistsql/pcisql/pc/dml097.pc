/*  EMBEDDED C (file "DML097.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1993/07/13 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  DML097.PC                                                    */
/*  WRITTEN BY:  David W. Flater                                 */
/*                                                               */
/*  This routine tests the INTEGER and SMALLINT data types in    */
/*  Dynamic SQL.  To run this test, you must support features 1  */
/*  and 3 for TSQL as listed in FIPS PUB 127-2, or you can avoid */
/*  needing feature 3 with TEd changes.                          */
/*                                                               */
/*  REFERENCES                                                   */
/*    FIPS PUB 127-2 14.1 Transitional SQL                       */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
long x1;
long x2;
long x3;
     char dstmt[51];
     char longst[241];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"FLATER            ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, dml097.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0578 ********************/
flag = 1;

     printf("                  TEST0578 \n");
     printf("  INTEGER and SMALLINT types in Dynamic SQL\n");
     printf("References:\n");
     printf("    FIPS PUB 127-2 14.1 Transitional SQL features 1, 3\n");
     printf("    ANSI SQL-1992 6.1 <data type>\n");
     printf("                  12.4 Calls to a <procedure>\n");
     printf("                  9  Data assignment rules\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* In this test I use SQL arithmetic to avoid conversions between    */
/* exact and approximate numerics.  However, this arithmetic has     */
/* its own implementor-defined precision.  I don't expect any vendor */
/* will have problems with three significant digits, but in case     */
/* they do, you have been warned.                                    */

     /* This is here to avoid language-dependent problems. */
     EXEC SQL DELETE FROM CONCATBUF;
     EXEC SQL INSERT INTO CONCATBUF VALUES (
       'CREATE TABLE NUM3 ('      ||
       '  NUM3C1 INTEGER,'        ||
       '  NUM3C2 INT,'            ||
       '  NUM3C3 SMALLINT)'
     );
     EXEC SQL SELECT ZZ INTO :longst FROM CONCATBUF;
     longst[240] = '\0';

     printf("longst=\"%s\"\n", longst);

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("EXECUTE IMMEDIATE :longst;\n");
EXEC SQL EXECUTE IMMEDIATE :longst;

CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;

CHCKOK ();
printf("\n");

printf("dstmt=\"INSERT INTO NUM3 VALUES (999, -99, 9)\"\n");
     strcpy (dstmt,
     "INSERT INTO NUM3 VALUES (999, -99, 9)             ");

printf("EXECUTE IMMEDIATE :dstmt;\n");
EXEC SQL EXECUTE IMMEDIATE :dstmt;

CHCKOK ();
printf("\n");

printf("dstmt=\"SELECT NUM3C1, NUM3C2, NUM3C3 FROM NUM3\"\n");
     strcpy (dstmt,
     "SELECT NUM3C1, NUM3C2, NUM3C3 FROM NUM3           ");

printf("PREPARE BLAT1 FROM :dstmt;\n");
EXEC SQL PREPARE BLAT1 FROM :dstmt;

CHCKOK ();
printf("\n");

printf("DECLARE BLAT2 CURSOR FOR BLAT1;\n");
EXEC SQL DECLARE BLAT2 CURSOR FOR BLAT1;

printf("\n");

printf("OPEN BLAT2;\n");
EXEC SQL OPEN BLAT2;

CHCKOK ();
printf("\n");

x1 = -1;
x2 = -1;
x3 = -1;

printf("FETCH BLAT2 INTO :x1, :x2, :x3;\n");
EXEC SQL FETCH BLAT2 INTO :x1, :x2, :x3;

CHCKOK ();
printf("\n");

printf("CLOSE BLAT2;\n");
EXEC SQL CLOSE BLAT2;

CHCKOK ();
printf("\n");

printf ("x1 should be 999; its value is %ld\n", x1);
printf ("x2 should be -99; its value is %ld\n", x2);
printf ("x3 should be 9; its value is %ld\n\n", x3);

if (x1 != 999 || x2 != -99 || x3 != 9)
  flag = 0;

printf("dstmt=\"DELETE FROM NUM3\"\n");
     strcpy (dstmt,
     "DELETE FROM NUM3                                  ");

printf("PREPARE WNUM3 FROM :dstmt;\n");
EXEC SQL PREPARE WNUM3 FROM :dstmt;

CHCKOK ();
printf("\n");

printf("EXECUTE WNUM3;\n");
EXEC SQL EXECUTE WNUM3;

printf("dstmt=\"INSERT INTO NUM3 VALUES (0, 0, 0.1)\"\n");
     strcpy (dstmt,
     "INSERT INTO NUM3 VALUES (0, 0, 0.1)               ");

printf("EXECUTE IMMEDIATE :dstmt;\n");
EXEC SQL EXECUTE IMMEDIATE :dstmt;

CHCKOK ();
printf("\n");

printf("OPEN BLAT2;\n");
EXEC SQL OPEN BLAT2;

CHCKOK ();
printf("\n");

x1 = -1;
x2 = -1;
x3 = -1;

printf("FETCH BLAT2 INTO :x1, :x2, :x3;\n");
EXEC SQL FETCH BLAT2 INTO :x1, :x2, :x3;

CHCKOK ();
printf("\n");

printf("CLOSE BLAT2;\n");
EXEC SQL CLOSE BLAT2;

CHCKOK ();
printf("\n");

printf ("x1 should be 0; its value is %ld\n", x1);
printf ("x2 should be 0; its value is %ld\n", x2);
printf ("x3 should be 0; its value is %ld\n\n", x3);

if (x1 != 0 || x2 != 0 || x3 != 0)
  flag = 0;

printf("EXECUTE WNUM3;\n");
EXEC SQL EXECUTE WNUM3;

printf("x1 = 999;\n");
printf("x2 = -99;\n");
printf("x3 = 90;\n\n");
x1 = 999;
x2 = -99;
x3 = 90;

printf("dstmt=\"INSERT INTO NUM3 VALUES (?, ?, ? / 10)\"\n");
     strcpy (dstmt,
     "INSERT INTO NUM3 VALUES (?, ?, ? / 10)            ");

printf("PREPARE BLAT3 FROM :dstmt;\n");
EXEC SQL PREPARE BLAT3 FROM :dstmt;

CHCKOK ();
printf("\n");

printf("EXECUTE BLAT3\n");
printf("  USING :x1, :x2, :x3;\n");

EXEC SQL EXECUTE BLAT3
  USING :x1, :x2, :x3;

CHCKOK ();
printf("\n");

printf("OPEN BLAT2;\n");
EXEC SQL OPEN BLAT2;

CHCKOK ();
printf("\n");

x1 = -1;
x2 = -1;
x3 = -1;

printf("FETCH BLAT2 INTO :x1, :x2, :x3;\n");
EXEC SQL FETCH BLAT2 INTO :x1, :x2, :x3;

CHCKOK ();
printf("\n");

printf("CLOSE BLAT2;\n");
EXEC SQL CLOSE BLAT2;

CHCKOK ();
printf("\n");

printf ("x1 should be 999; its value is %ld\n", x1);
printf ("x2 should be -99; its value is %ld\n", x2);
printf ("x3 should be 9; its value is %ld\n\n", x3);

if (x1 != 999 || x2 != -99 || x3 != 9)
  flag = 0;

printf("EXECUTE WNUM3;\n");
EXEC SQL EXECUTE WNUM3;

printf("x1 = 0;\n");
printf("x2 = 0;\n");
printf("x3 = 1;\n\n");
x1 = 0;
x2 = 0;
x3 = 1;

printf("EXECUTE BLAT3\n");
printf("  USING :x1, :x2, :x3;\n");

EXEC SQL EXECUTE BLAT3
  USING :x1, :x2, :x3;

CHCKOK ();
printf("\n");

printf("OPEN BLAT2;\n");
EXEC SQL OPEN BLAT2;

CHCKOK ();
printf("\n");

x1 = -1;
x2 = -1;
x3 = -1;

printf("FETCH BLAT2 INTO :x1, :x2, :x3;\n");
EXEC SQL FETCH BLAT2 INTO :x1, :x2, :x3;

CHCKOK ();
printf("\n");

printf("CLOSE BLAT2;\n");
EXEC SQL CLOSE BLAT2;

CHCKOK ();
printf("\n");

printf ("x1 should be 0; its value is %ld\n", x1);
printf ("x2 should be 0; its value is %ld\n", x2);
printf ("x3 should be 0; its value is %ld\n\n", x3);

if (x1 != 0 || x2 != 0 || x3 != 0)
  flag = 0;

/* FINIS */

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;

printf("dstmt=\"DROP TABLE NUM3 CASCADE\"\n");
     strcpy (dstmt,
     "DROP TABLE NUM3 CASCADE                           ");

printf("EXECUTE IMMEDIATE :dstmt;\n");
EXEC SQL EXECUTE IMMEDIATE :dstmt;

CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;

CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0578','pass','PC');
       }
     else
       {
          printf("\n\n       dml097.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0578','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0578 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

/*  EMBEDDED C (file "YTS808.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS808.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  This routine tests LOCAL time zone in <datetime value        */
/*                     expression>                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    6.14 GR4a  <datetime value expression>                     */
/*    6.1  GR5   <data type> WITH TIME ZONE                      */
/*    F#41 Time zone specification                               */
/*    F#5  DATETIME data types                                   */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*  24/10/95 Table Inserts Corrected                             */
/*  3/11/95  Extra references to CASACDE removed                 */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-28                                    */
/*    Added rollback after authid                                */
/*    Deleted extraneous code                                    */
/*    Fixed syntax errors                                        */
/*    Replaced bogus comparisons                                 */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short co1;
short co2;
short co3;
short co4;
short total;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts808.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7565 ********************/
flag = 1;

     printf("                  TEST7565 \n");
     printf("   LOCAL time zone in <datetime value expression>\n");
     printf("References:\n");
     printf("    6.14 GR4a  <datetime value expression>\n");
     printf("    6.1  GR5   <data type> WITH TIME ZONE\n");
     printf("    F#41 Time zone specification\n");
     printf("    F#5  DATETIME data types\n");
     printf("    F#20 CAST functions\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

printf("DELETE FROM TTIME_BASE;\n\n");
EXEC SQL DELETE FROM TTIME_BASE;

/* initialise host variables */
co1 = -1;
co2 = -1;
co3 = -1;
co4 = -1;
total = -1;

printf("INSERT INTO TTIME VALUES\n");
printf("(1, TIME '00:00:00', TIMESTAMP '1995-06-07 00:00:00');\n");
EXEC SQL INSERT INTO TTIME VALUES
(1, TIME '00:00:00', TIMESTAMP '1995-06-07 00:00:00');
CHCKOK ();
printf("\n");

printf("INSERT INTO TTIME VALUES\n");
printf("(2, TIME '10:15:13', TIMESTAMP '1980-04-10 10:15:13');\n");
EXEC SQL INSERT INTO TTIME VALUES
(2, TIME '10:15:13', TIMESTAMP '1980-04-10 10:15:13');
CHCKOK ();
printf("\n");

printf("INSERT INTO TTIME VALUES\n");
printf("(3, TIME '23:14:09', TIMESTAMP '1973-09-22 23:14:09');\n");
EXEC SQL INSERT INTO TTIME VALUES
(3, TIME '23:14:09', TIMESTAMP '1973-09-22 23:14:09');
CHCKOK ();
printf("\n");

printf("INSERT INTO TTIME VALUES\n");
printf("(4, TIME '05:39:42', TIMESTAMP '1999-12-31 05:39:42');\n");
EXEC SQL INSERT INTO TTIME VALUES
(4, TIME '05:39:42', TIMESTAMP '1999-12-31 05:39:42');
CHCKOK ();
printf("\n");

printf("INSERT INTO TTIME VALUES\n");
printf("(5, TIME '17:56:26', TIMESTAMP '1961-10-28 17:56:26');\n");
EXEC SQL INSERT INTO TTIME VALUES
(5, TIME '17:56:26', TIMESTAMP '1961-10-28 17:56:26');
CHCKOK ();
printf("\n");

printf("INSERT INTO TTIME VALUES\n");
printf("(6, TIME '17:56:26', TIMESTAMP '1961-10-28 17:56:26');\n");
EXEC SQL INSERT INTO TTIME VALUES
(6, TIME '17:56:26', TIMESTAMP '1961-10-28 17:56:26');
CHCKOK ();
printf("\n");

/* 10:30:05+01:45 = 08:45:05+00:00 = 06:15:05-02:30 */

/* select the number of rows where TT meets comparison predicate */

printf("SELECT COUNT (*) INTO :co1\n");
printf("FROM TTIME\n");
printf("WHERE TT AT LOCAL > TIME '10:30:05+01:45';\n");
EXEC SQL SELECT COUNT (*) INTO :co1
FROM TTIME
WHERE TT AT LOCAL > TIME '10:30:05+01:45';
CHCKOK ();
printf("\n");

printf("SELECT COUNT (*) INTO :co2\n");
printf("FROM TTIME\n");
printf("WHERE TIME '06:15:05-02:30' >= TT AT LOCAL;\n");
EXEC SQL SELECT COUNT (*) INTO :co2
FROM TTIME
WHERE TIME '06:15:05-02:30' >= TT AT LOCAL;
CHCKOK ();
printf("\n");

total = co1 + co2;
printf ("co1 + co2 should be 6; total is %d\n\n", total);

if (total != 6)
   flag = 0;

/* reinitialise total */
total = 99;

/* select the number of rows where TS meets a comparison predicate */

printf("SELECT COUNT (*) INTO :co3\n");
printf("FROM TTIME\n");
printf("WHERE TS AT LOCAL > TIMESTAMP '1980-04-10 10:30:05+01:45';\n");
EXEC SQL SELECT COUNT (*) INTO :co3
FROM TTIME
WHERE TS AT LOCAL > TIMESTAMP '1980-04-10 10:30:05+01:45';
CHCKOK ();
printf("\n");

printf("SELECT COUNT (*) INTO :co4\n");
printf("FROM TTIME\n");
printf("WHERE TIMESTAMP '1980-04-10 06:15:05-02:30' >= TS AT LOCAL;\n");
EXEC SQL SELECT COUNT (*) INTO :co4
FROM TTIME
WHERE TIMESTAMP '1980-04-10 06:15:05-02:30' >= TS AT LOCAL;
CHCKOK ();
printf("\n");

total = co3 + co4;
printf ("co3 + co4 should be 6; total is %d\n\n", total);
if (total != 6)
   flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts808.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7565','pass','PC');
       }
     else
       {
          printf("\n\n       yts808.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7565','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7565 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


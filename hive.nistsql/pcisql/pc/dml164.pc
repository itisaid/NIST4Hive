/*  EMBEDDED C (file "DML164.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1996-04-17 EMBEDDED C LANGUAGE                          */
/*  SQL VALIDATION TEST SUITE V6.0                          */
/* DISCLAIMER:                                                  */
/* This program was written by employees of NIST to test SQL    */
/* implementations for conformance to the SQL standards.        */
/* NIST assumes no responsibility for any party's use of        */
/* this program.                                                */
/*                                                               */
/*  DML164.PC                                                    */
/*  WRITTEN BY:  David Flater                                    */
/*                                                               */
/*  This routine tests Intermediate SQL.                         */
/*                                                               */
/*  REFERENCES                                                   */
/*    FIPS PUB 127-2 14.2 Intermediate SQL                       */
/*    ANSI SQL-1992                                              */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
varchar kywrd[21];
varchar wrd2[21];
long cnt1;
char longst[220];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"FLATER            ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, dml164.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0867 ********************/
flag = 1;

     printf("                  TEST0867\n");
     printf("    LIKE enhancements:  keyword search\n");
     printf("References:\n");
     printf("    F#28 -- LIKE enhancements\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* Carmelo:  in translations, replace varchars with strings of the */
/* correct length. */

/* These queries are similar to what might be generated by a program */
/* to do keyword searches. */

/* Find how many records for Florida Keys */

strcpy (kywrd, "Key");
printf ("kywrd = 'Key'\n");

cnt1 = 0;
printf("SELECT COUNT(*) INTO :cnt1\n");
printf("  FROM TIDES.LOCATIONS\n");
printf("  WHERE LOC_NAME LIKE '%% ' || :kywrd || '%%'\n");
printf("  OR LOC_NAME LIKE  '%%' || :kywrd || ' %%'\n");
printf("  OR LOC_NAME = :kywrd;\n");
EXEC SQL SELECT COUNT(*) INTO :cnt1
  FROM TIDES.LOCATIONS
  WHERE LOC_NAME LIKE '% ' || :kywrd || '%'
  OR LOC_NAME LIKE  '%' || :kywrd || ' %'
  OR LOC_NAME = :kywrd;
CHCKOK ();
printf ("cnt1 should be 13; its value is %ld\n\n", cnt1);
if (cnt1 != 13)
  flag = 0;

strcpy (kywrd, "Anchorage");
printf ("kywrd = 'Anchorage'\n");

cnt1 = 0;
printf("SELECT LOC_ID INTO :cnt1\n");
printf("  FROM TIDES.LOCATIONS\n");
printf("  WHERE LOC_NAME LIKE '%% ' || :kywrd || '%%'\n");
printf("  OR LOC_NAME LIKE  '%%' || :kywrd || ' %%'\n");
printf("  OR LOC_NAME = :kywrd;\n");
EXEC SQL SELECT LOC_ID INTO :cnt1
  FROM TIDES.LOCATIONS
  WHERE LOC_NAME LIKE '% ' || :kywrd || '%'
  OR LOC_NAME LIKE  '%' || :kywrd || ' %'
  OR LOC_NAME = :kywrd;
CHCKOK ();
printf ("cnt1 should be 10; its value is %ld\n\n", cnt1);
if (cnt1 != 10)
  flag = 0;

strcpy (kywrd, "London");
printf ("kywrd = 'London'\n");
strcpy (wrd2, "England");
printf ("wrd2 = 'England'\n");

EXEC SQL SELECT
  'SELECT LOC_ID FROM TIDES.LOCATIONS'
  '  WHERE (LOC_NAME LIKE ''% '' || ? || ''%'''
  '  OR LOC_NAME LIKE  ''%'' || ? || '' %'''
  '  OR LOC_NAME = ?)'
  '  AND (LOC_NAME LIKE ''% '' || ? || ''%'''
  '  OR LOC_NAME LIKE  ''%'' || ? || '' %'''
  '  OR LOC_NAME = ?)'
  INTO :longst
  FROM HU.ECCO;

printf ("longst = %s\n", longst);

printf("PREPARE S0867 FROM :longst;\n");
EXEC SQL PREPARE S0867 FROM :longst;
CHCKOK ();
printf ("\n");

printf("DECLARE C0867 CURSOR FOR S0867;\n\n");
EXEC SQL DECLARE C0867 CURSOR FOR S0867;

printf("ALLOCATE DESCRIPTOR 'D0867';\n");
EXEC SQL ALLOCATE DESCRIPTOR 'D0867';
CHCKOK ();
printf ("\n");

printf("SET DESCRIPTOR 'D0867' COUNT = 6;\n");
EXEC SQL SET DESCRIPTOR 'D0867' COUNT = 6;
CHCKOK ();
printf ("\n");

printf("cnt1 = 1;\n");
cnt1 = 1;
printf("SET DESCRIPTOR 'D0867' VALUE :cnt1\n");
printf("  TYPE = 12,\n");
printf("  LENGTH = 20,\n");
printf("  DATA = :kywrd;\n");
EXEC SQL SET DESCRIPTOR 'D0867' VALUE :cnt1
  TYPE = 12,
  LENGTH = 20,
  DATA = :kywrd;
CHCKOK ();
printf ("\n");

printf("cnt1 = 2;\n");
cnt1 = 2;
printf("SET DESCRIPTOR 'D0867' VALUE :cnt1\n");
printf("  TYPE = 12,\n");
printf("  LENGTH = 20,\n");
printf("  DATA = :kywrd;\n");
EXEC SQL SET DESCRIPTOR 'D0867' VALUE :cnt1
  TYPE = 12,
  LENGTH = 20,
  DATA = :kywrd;
CHCKOK ();
printf ("\n");

printf("cnt1 = 3;\n");
cnt1 = 3;
printf("SET DESCRIPTOR 'D0867' VALUE :cnt1\n");
printf("  TYPE = 12,\n");
printf("  LENGTH = 20,\n");
printf("  DATA = :kywrd;\n");
EXEC SQL SET DESCRIPTOR 'D0867' VALUE :cnt1
  TYPE = 12,
  LENGTH = 20,
  DATA = :kywrd;
CHCKOK ();
printf ("\n");

printf("cnt1 = 4;\n");
cnt1 = 4;
printf("SET DESCRIPTOR 'D0867' VALUE :cnt1\n");
printf("  TYPE = 12,\n");
printf("  LENGTH = 20,\n");
printf("  DATA = :wrd2;\n");
EXEC SQL SET DESCRIPTOR 'D0867' VALUE :cnt1
  TYPE = 12,
  LENGTH = 20,
  DATA = :wrd2;
CHCKOK ();
printf ("\n");

printf("cnt1 = 5;\n");
cnt1 = 5;
printf("SET DESCRIPTOR 'D0867' VALUE :cnt1\n");
printf("  TYPE = 12,\n");
printf("  LENGTH = 20,\n");
printf("  DATA = :wrd2;\n");
EXEC SQL SET DESCRIPTOR 'D0867' VALUE :cnt1
  TYPE = 12,
  LENGTH = 20,
  DATA = :wrd2;
CHCKOK ();
printf ("\n");

printf("cnt1 = 6;\n");
cnt1 = 6;
printf("SET DESCRIPTOR 'D0867' VALUE :cnt1\n");
printf("  TYPE = 12,\n");
printf("  LENGTH = 20,\n");
printf("  DATA = :wrd2;\n");
EXEC SQL SET DESCRIPTOR 'D0867' VALUE :cnt1
  TYPE = 12,
  LENGTH = 20,
  DATA = :wrd2;
CHCKOK ();
printf ("\n");

printf("OPEN C0867 USING SQL DESCRIPTOR 'D0867';\n");
EXEC SQL OPEN C0867 USING SQL DESCRIPTOR 'D0867';
CHCKOK ();
printf ("\n");

cnt1 = 0;
printf("FETCH C0867 INTO :cnt1;\n");
EXEC SQL FETCH C0867 INTO :cnt1;
CHCKOK ();
printf ("cnt1 should be 202; its value is %ld\n\n", cnt1);
if (cnt1 != 202)
  flag = 0;

printf("FETCH C0867 INTO :cnt1;\n");
EXEC SQL FETCH C0867 INTO :cnt1;
printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
printf ("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (SQLCODE != 100 || strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0867','pass','PC');
       }
     else
       {
          printf("\n\n       dml164.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0867','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0867 *********************/
/******************** BEGIN TEST0868 ********************/
flag = 1;

     printf("                  TEST0868\n");
     printf("           More <unique predicate>\n");
     printf("References:\n");
     printf("    F#29 -- UNIQUE predicate\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* Find how many data sets are redundant */

cnt1 = 0;
printf("SELECT COUNT(*) INTO :cnt1\n");
printf("  FROM TIDES.LOCATIONS A\n");
printf("  WHERE NOT UNIQUE (\n");
printf("  SELECT * FROM TIDES.LOCATIONS\n");
printf("    WHERE DEG_LATITUDE = A.DEG_LATITUDE\n");
printf("    AND DEG_LONGITUDE = A.DEG_LONGITUDE);\n");
EXEC SQL SELECT COUNT(*) INTO :cnt1
  FROM TIDES.LOCATIONS A
  WHERE NOT UNIQUE (
  SELECT * FROM TIDES.LOCATIONS
    WHERE DEG_LATITUDE = A.DEG_LATITUDE
    AND DEG_LONGITUDE = A.DEG_LONGITUDE);
CHCKOK ();
printf ("cnt1 should be 12; its value is %ld\n\n", cnt1);
if (cnt1 != 12)
  flag = 0;

/* True on zero rows. */

cnt1 = 0;
printf("SELECT COUNT(*) INTO :cnt1\n");
printf("   FROM HU.WORKS A WHERE UNIQUE\n");
printf("  (SELECT EMPNUM FROM HU.STAFF B\n");
printf("   WHERE A.EMPNUM = B.EMPNUM\n");
printf("   AND GRADE = 13\n");
printf("   AND CITY = 'Deale');\n");
EXEC SQL SELECT COUNT(*) INTO :cnt1
   FROM HU.WORKS A WHERE UNIQUE
  (SELECT EMPNUM FROM HU.STAFF B
   WHERE A.EMPNUM = B.EMPNUM
   AND GRADE = 13
   AND CITY = 'Deale');
CHCKOK ();
printf ("cnt1 should be 12; its value is %ld\n\n", cnt1);
if (cnt1 != 12)
  flag = 0;

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0868','pass','PC');
       }
     else
       {
          printf("\n\n       dml164.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0868','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0868 *********************/
/******************** BEGIN TEST0869 ********************/
flag = 1;

     printf("                  TEST0869\n");
     printf("           More table operations\n");
     printf("References:\n");
     printf("    F#30 -- Table operations\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("CREATE TABLE BILLS_SENT (\n");
printf("  BILLID INT PRIMARY KEY,\n");
printf("  BILLAMOUNT DECIMAL(7,2));\n");
EXEC SQL CREATE TABLE BILLS_SENT (
  BILLID INT PRIMARY KEY,
  BILLAMOUNT DECIMAL(7,2));
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

printf("CREATE TABLE PAYMENTS (\n");
printf("  BILLID INT,\n");
printf("  PAYID INT PRIMARY KEY,\n");
printf("  PAYAMOUNT DECIMAL(7,2));\n");
EXEC SQL CREATE TABLE PAYMENTS (
  BILLID INT,
  PAYID INT PRIMARY KEY,
  PAYAMOUNT DECIMAL(7,2));
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

printf("CREATE VIEW NO_PAY AS SELECT * FROM BILLS_SENT\n");
printf("  EXCEPT CORRESPONDING SELECT * FROM PAYMENTS;\n");
EXEC SQL CREATE VIEW NO_PAY AS SELECT * FROM BILLS_SENT
  EXCEPT CORRESPONDING SELECT * FROM PAYMENTS;
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

printf("INSERT INTO BILLS_SENT VALUES (\n");
printf("  0, 100.00);\n");
EXEC SQL INSERT INTO BILLS_SENT VALUES (
  0, 100.00);
CHCKOK ();
printf ("\n");

printf("INSERT INTO BILLS_SENT VALUES (\n");
printf("  1, 80.00);\n");
EXEC SQL INSERT INTO BILLS_SENT VALUES (
  1, 80.00);
CHCKOK ();
printf ("\n");

printf("INSERT INTO BILLS_SENT VALUES (\n");
printf("  2, 50.00);\n");
EXEC SQL INSERT INTO BILLS_SENT VALUES (
  2, 50.00);
CHCKOK ();
printf ("\n");

printf("INSERT INTO PAYMENTS VALUES (\n");
printf("  0, 0, 100.00);\n");
EXEC SQL INSERT INTO PAYMENTS VALUES (
  0, 0, 100.00);
CHCKOK ();
printf ("\n");

printf("INSERT INTO PAYMENTS VALUES (\n");
printf("  1, 1, 40.00);\n");
EXEC SQL INSERT INTO PAYMENTS VALUES (
  1, 1, 40.00);
CHCKOK ();
printf ("\n");

printf("INSERT INTO PAYMENTS VALUES (\n");
printf("  1, 2, 40.00);\n");
EXEC SQL INSERT INTO PAYMENTS VALUES (
  1, 2, 40.00);
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

cnt1 = 0;
printf("SELECT BILLID INTO :cnt1\n");
printf("  FROM NO_PAY;\n");
EXEC SQL SELECT BILLID INTO :cnt1
  FROM NO_PAY;
CHCKOK ();
printf ("cnt1 should be 2; its value is %ld\n\n", cnt1);
if (cnt1 != 2)
  flag = 0;

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

printf("CREATE TABLE CORRECT_OUTPUT (\n");
printf("  PORTVAL INT);\n");
EXEC SQL CREATE TABLE CORRECT_OUTPUT (
  PORTVAL INT);
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

printf("CREATE TABLE LOSSY_OUTPUT (\n");
printf("  PORTVAL INT);\n");
EXEC SQL CREATE TABLE LOSSY_OUTPUT (
  PORTVAL INT);
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

printf("CREATE VIEW CORRECT_AND_LOSSY (PORTVAL) \n");
printf("  AS SELECT * FROM CORRECT_OUTPUT INTERSECT ALL \n");
printf("  SELECT PORTVAL FROM LOSSY_OUTPUT; \n");
EXEC SQL CREATE VIEW CORRECT_AND_LOSSY (PORTVAL)
               AS SELECT * FROM CORRECT_OUTPUT INTERSECT ALL
                  SELECT PORTVAL FROM LOSSY_OUTPUT;
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

printf("INSERT INTO LOSSY_OUTPUT VALUES (1);\n");
EXEC SQL INSERT INTO LOSSY_OUTPUT VALUES (1);
CHCKOK ();
printf ("\n");

printf("INSERT INTO LOSSY_OUTPUT VALUES (2);\n");
EXEC SQL INSERT INTO LOSSY_OUTPUT VALUES (2);
CHCKOK ();
printf ("\n");

printf("INSERT INTO LOSSY_OUTPUT VALUES (1);\n");
EXEC SQL INSERT INTO LOSSY_OUTPUT VALUES (1);
CHCKOK ();
printf ("\n");

printf("INSERT INTO LOSSY_OUTPUT VALUES (1);\n");
EXEC SQL INSERT INTO LOSSY_OUTPUT VALUES (1);
CHCKOK ();
printf ("\n");

printf("INSERT INTO LOSSY_OUTPUT VALUES (3);\n");
EXEC SQL INSERT INTO LOSSY_OUTPUT VALUES (3);
CHCKOK ();
printf ("\n");

printf("INSERT INTO LOSSY_OUTPUT VALUES (1);\n");
EXEC SQL INSERT INTO LOSSY_OUTPUT VALUES (1);
CHCKOK ();
printf ("\n");

printf("INSERT INTO LOSSY_OUTPUT VALUES (4);\n");
EXEC SQL INSERT INTO LOSSY_OUTPUT VALUES (4);
CHCKOK ();
printf ("\n");

printf("INSERT INTO LOSSY_OUTPUT VALUES (1);\n");
EXEC SQL INSERT INTO LOSSY_OUTPUT VALUES (1);
CHCKOK ();
printf ("\n");

printf("INSERT INTO LOSSY_OUTPUT VALUES (3);\n");
EXEC SQL INSERT INTO LOSSY_OUTPUT VALUES (3);
CHCKOK ();
printf ("\n");

printf("INSERT INTO LOSSY_OUTPUT VALUES (2);\n");
EXEC SQL INSERT INTO LOSSY_OUTPUT VALUES (2);
CHCKOK ();
printf ("\n");

/* Changes:  two more 1s; a 3 changed to a 4 */

printf("INSERT INTO CORRECT_OUTPUT VALUES (1);\n");
EXEC SQL INSERT INTO CORRECT_OUTPUT VALUES (1);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CORRECT_OUTPUT VALUES (1);\n");
EXEC SQL INSERT INTO CORRECT_OUTPUT VALUES (1);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CORRECT_OUTPUT VALUES (2);\n");
EXEC SQL INSERT INTO CORRECT_OUTPUT VALUES (2);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CORRECT_OUTPUT VALUES (1);\n");
EXEC SQL INSERT INTO CORRECT_OUTPUT VALUES (1);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CORRECT_OUTPUT VALUES (1);\n");
EXEC SQL INSERT INTO CORRECT_OUTPUT VALUES (1);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CORRECT_OUTPUT VALUES (1);\n");
EXEC SQL INSERT INTO CORRECT_OUTPUT VALUES (1);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CORRECT_OUTPUT VALUES (3);\n");
EXEC SQL INSERT INTO CORRECT_OUTPUT VALUES (3);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CORRECT_OUTPUT VALUES (1);\n");
EXEC SQL INSERT INTO CORRECT_OUTPUT VALUES (1);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CORRECT_OUTPUT VALUES (4);\n");
EXEC SQL INSERT INTO CORRECT_OUTPUT VALUES (4);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CORRECT_OUTPUT VALUES (1);\n");
EXEC SQL INSERT INTO CORRECT_OUTPUT VALUES (1);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CORRECT_OUTPUT VALUES (4);\n");
EXEC SQL INSERT INTO CORRECT_OUTPUT VALUES (4);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CORRECT_OUTPUT VALUES (2);\n");
EXEC SQL INSERT INTO CORRECT_OUTPUT VALUES (2);
CHCKOK ();
printf ("\n");

printf("DECLARE C0869 CURSOR FOR SELECT * FROM\n");
printf("  CORRECT_OUTPUT EXCEPT ALL SELECT * FROM LOSSY_OUTPUT\n");
printf("  ORDER BY PORTVAL;\n\n");
EXEC SQL DECLARE C0869 CURSOR FOR SELECT * FROM
  CORRECT_OUTPUT EXCEPT ALL SELECT * FROM LOSSY_OUTPUT
  ORDER BY PORTVAL;

printf("OPEN C0869;\n");
EXEC SQL OPEN C0869;
CHCKOK ();
printf ("\n");

cnt1 = 0;
printf("FETCH C0869 INTO :cnt1;\n");
EXEC SQL FETCH C0869 INTO :cnt1;
CHCKOK ();
printf ("cnt1 should be 1; its value is %ld\n\n", cnt1);
if (cnt1 != 1)
  flag = 0;

cnt1 = 0;
printf("FETCH C0869 INTO :cnt1;\n");
EXEC SQL FETCH C0869 INTO :cnt1;
CHCKOK ();
printf ("cnt1 should be 1; its value is %ld\n\n", cnt1);
if (cnt1 != 1)
  flag = 0;

cnt1 = 0;
printf("FETCH C0869 INTO :cnt1;\n");
EXEC SQL FETCH C0869 INTO :cnt1;
CHCKOK ();
printf ("cnt1 should be 4; its value is %ld\n\n", cnt1);
if (cnt1 != 4)
  flag = 0;

printf("FETCH C0869 INTO :cnt1;\n");
EXEC SQL FETCH C0869 INTO :cnt1;
printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
printf ("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (SQLCODE != 100 || strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

printf("CLOSE C0869;\n");
EXEC SQL CLOSE C0869;
CHCKOK ();
printf ("\n");

cnt1 = 0;
printf("SELECT COUNT(*) INTO :cnt1\n");
printf("  FROM CORRECT_AND_LOSSY\n");
printf("  WHERE PORTVAL = 1;\n");
EXEC SQL SELECT COUNT(*) INTO :cnt1
  FROM CORRECT_AND_LOSSY
  WHERE PORTVAL = 1;
CHCKOK ();
printf ("cnt1 should be 5; its value is %ld\n\n", cnt1);
if (cnt1 != 5)
  flag = 0;

cnt1 = 0;
printf("SELECT COUNT(*) INTO :cnt1\n");
printf("  FROM CORRECT_AND_LOSSY\n");
printf("  WHERE PORTVAL = 2;\n");
EXEC SQL SELECT COUNT(*) INTO :cnt1
  FROM CORRECT_AND_LOSSY
  WHERE PORTVAL = 2;
CHCKOK ();
printf ("cnt1 should be 2; its value is %ld\n\n", cnt1);
if (cnt1 != 2)
  flag = 0;

cnt1 = 0;
printf("SELECT COUNT(*) INTO :cnt1\n");
printf("  FROM CORRECT_AND_LOSSY\n");
printf("  WHERE PORTVAL = 3;\n");
EXEC SQL SELECT COUNT(*) INTO :cnt1
  FROM CORRECT_AND_LOSSY
  WHERE PORTVAL = 3;
CHCKOK ();
printf ("cnt1 should be 1; its value is %ld\n\n", cnt1);
if (cnt1 != 1)
  flag = 0;

cnt1 = 0;
printf("SELECT COUNT(*) INTO :cnt1\n");
printf("  FROM CORRECT_AND_LOSSY\n");
printf("  WHERE PORTVAL = 4;\n");
EXEC SQL SELECT COUNT(*) INTO :cnt1
  FROM CORRECT_AND_LOSSY
  WHERE PORTVAL = 4;
CHCKOK ();
printf ("cnt1 should be 1; its value is %ld\n\n", cnt1);
if (cnt1 != 1)
  flag = 0;

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

printf("DROP VIEW CORRECT_AND_LOSSY CASCADE;\n");
EXEC SQL DROP VIEW CORRECT_AND_LOSSY CASCADE;
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

printf("DROP TABLE BILLS_SENT CASCADE;\n");
EXEC SQL DROP TABLE BILLS_SENT CASCADE;
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

printf("DROP TABLE PAYMENTS CASCADE;\n");
EXEC SQL DROP TABLE PAYMENTS CASCADE;
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

printf("DROP TABLE CORRECT_OUTPUT CASCADE;\n");
EXEC SQL DROP TABLE CORRECT_OUTPUT CASCADE;
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

printf("DROP TABLE LOSSY_OUTPUT CASCADE;\n");
EXEC SQL DROP TABLE LOSSY_OUTPUT CASCADE;
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0869','pass','PC');
       }
     else
       {
          printf("\n\n       dml164.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0869','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0869 *********************/
     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

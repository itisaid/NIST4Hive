/*  EMBEDDED C (file "CDR017.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1989/04/07 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  CDR017.PC                                                    */
/*  WRITTEN BY: SUN DAJUN                                        */
/*                                                               */
/*    THIS ROUTINE TESTS THE REFERENTIAL INTEGRITY CONSTRAINT FOR*/
/*  SQL.                                                         */
/*                                                               */
/*  REFERENCES                                                   */
/*        AMERICAN NATIONAL STANDARD database language - SQL     */
/*                           with Integrity Enhancement          */
/*                                                               */
/*             SECTION 6.7 <referential constraint definition>   */
/*                <referential constraint definition>::=         */
/*                      FOREIGN KEY (<referencing columns>)      */
/*                      <references specification>               */
/*                <references specification>::=                  */
/*                      REFERENCES <referenced table and columns>*/
/*                <referencing columns>::=                       */
/*                        <reference column list>                */
/*                <refereced table and columns>::=               */
/*                        <table name>[(<reference column list>  */
/*                <reference column list>::=                     */
/*                        <column name>[{,<column name>}...]     */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>



EXEC SQL BEGIN DECLARE SECTION;
long count1;
long count2;
char EMPNO1[4];
long long1;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long SQLCODE;
int errcnt;
/* date_time declaration */
time_t cal;


long code1;
long code2;

main()

{
        strcpy(uid,"SUN");
        AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM SUN.ECCO;
if (strncmp(uid,uidx,3) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, cdr017.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
/******************** BEGIN TEST0355 ********************/
/* This test  inserts  a row  in FOREIGN KEY TABLE --   */
/* SIZ2_F%, but its primary columns value  of this row   */
/* has not been inserted into PRIMARY KEY TABLEs --     */
/* SIZ2_P. This should be an Error.                    */

printf("\n         FIPS sizing TEST0355             \n");
printf("              PRIMARY KEY & FOREIGN KEY    \n");
printf("  SQL with Integrity Enhancement section 6.5,6.6,6.7\n");
printf("  - - - - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("        INSERT INTO SIZ2_F1\n");
printf("        VALUES ('  E','AAA');\n");
printf("\n");
printf("        INSERT INTO SIZ2_F10\n");
printf("        VALUES (9,'AAB');\n");
EXEC SQL INSERT INTO SIZ2_F1
        VALUES ('  E','AAA');
code1 = SQLCODE;
EXEC SQL INSERT INTO SIZ2_F10
        VALUES (9,'AAB');
code1 =  code1 * SQLCODE;
EXEC SQL SELECT COUNT(*) INTO:count1
        FROM SIZ2_F10;
 EXEC SQL ROLLBACK WORK;
 printf(" The correct answer is :\n");
 printf("           code1 is not equal to 0.\n");
 printf("           count1 is 4\n");
 printf(" Your answer is :\n");
 printf("           code1 is %ld\n",code1);
 printf("           count1 is %ld\n",count1);
        if (code1 != 0 && count1 == 4)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0355','pass','PC');
       printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0355','fail','PC');
          errcnt = errcnt + 1;
       printf("\n\n       cdr017.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;
/************************ END TEST0355 *************************/






/******************** BEGIN TEST0356 **********************/
/* This test deletes a row  from PRIMARY KEY    */
/* TABLE -- SIZ2_P, but there are coresponding rows  in   */
/* FOREIGN KEY TABLEs -- SIZ2_F%, this should be an ERROR.*/

printf("\n         FIPS sizing TEST0356             \n");
printf("              REFERENTIAL INTEGRITY    \n");
printf("     SQL with Integrity Enhancement section 6.5,6.6,6.7\n");
printf("     - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("\n");
printf("        DELETE FROM SIZ2_P\n");
printf("        WHERE P1 = '  A';\n");
EXEC SQL DELETE FROM SIZ2_P
        WHERE P1 = '  A';
code1=SQLCODE;
strcpy(EMPNO1,"NV");
EXEC SQL SELECT P1 INTO :EMPNO1
        FROM SIZ2_P
        WHERE P1 = '  A';
EXEC SQL ROLLBACK WORK;
printf("        The correct result is code1 not equal to 0\n");
printf("        Your answer is code1=%ld\n",code1);
        if (code1 != 0 && strncmp(EMPNO1,"  A",3) == 0)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0356','pass','PC');
printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0356','fail','PC');
          errcnt = errcnt + 1;
printf("\n\n       cdr017.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;
/****************** END TEST0356 *********************/







/******************** BEGIN TEST0357 ********************/
/* This program updates a row in PRIMARY KEY TABLE      */
/* -- SIZ2_P, set (A,-,-,-,-,-,-,-,-) to (Z,-,-,-,      */
/* -,-,-,-,-), there are (A,*) in SIZ2_F%.              */ 

printf("\n         FIPS sizing TEST0357             \n");
printf("              PRIMARY KEY & FOREIGN KEY    \n");
printf("     SQL with Integrity Enhancement section 6.5,6.6,6.7\n");
printf("     - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("        UPDATE SIZ2_P\n");
printf("        SET P1='  Z'\n");
printf("        WHERE P1='  A';\n");
printf("\n");
printf("        UPDATE SIZ2_P\n");
printf("        SET P10 = 100\n");
printf("        WHERE P10 = 8;\n");
printf("\n");
printf("        SELECT COUNT(*) INTO :count1\n");
printf("        FROM SIZ2_P\n");
printf("        WHERE P1 = '  A';\n");
EXEC SQL UPDATE SIZ2_P
        SET P1 = '  Z'
        WHERE P1 = '  A';
code1 = SQLCODE;
EXEC SQL UPDATE SIZ2_P
        SET P10 = 100
        WHERE P10 = 8;
code1 = code1 * SQLCODE;
EXEC SQL SELECT COUNT(*) INTO :count1
        FROM SIZ2_P
        WHERE P1 = '  A';
EXEC SQL ROLLBACK WORK;
printf("        The correct result is code1 not equal 0\n");
printf("                              count1 = 1\n");
printf("        Your answer is code1=%ld\n",code1);
printf("                              count1 = %ld\n",count1);
        if (code1 != 0 && count1 == 1)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0357','pass','PC');
printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0357','fail','PC');
          errcnt = errcnt + 1;
printf("\n\n       cdr017.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;
/******************** END TEST0357 **************************/






/******************** BEGIN TEST0358 ********************/
/* This program updates a row in PRIMARY KEY TABLE      */
/* -- SIZ2_P, this will let two rows have the same value*/
/*  in PRIMARY COLUMNs.                                 */ 

printf("\n         FIPS sizing TEST0358             \n");
printf("                     PRIMARY KEY     \n");
printf("      SQL with Integrity Enhancement section 6.5,6.6\n");
printf("      - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("        SELECT COUNT(*) INTO:count1\n");
printf("        FROM SIZ2_P\n");
printf("        WHERE P1 = '  A';\n");
printf("\n");
printf("        UPDATE SIZ2_P\n");
printf("        SET P1 = 'B  '\n");
printf("        WHERE P1 = '  A';\n");
printf("code1 = SQLCODE;\n");
printf("\n");
printf("        SELECT COUNT(*) INTO:count2\n");
printf("        FROM SIZ2_P\n");
printf("        WHERE P1 = '  A';\n");
printf("\n");
count1 = 0;
count2 = 0;
EXEC SQL SELECT COUNT(*) INTO:count1
        FROM SIZ2_P
        WHERE P1 = '  A';
EXEC SQL UPDATE SIZ2_P
        SET P1 = 'B  '
        WHERE P1 = '  A';
code1 = SQLCODE;
EXEC SQL SELECT COUNT(*) INTO:count2
        FROM SIZ2_P
        WHERE P1 = '  A';
EXEC SQL ROLLBACK WORK;
printf(" The correct answer is :\n");
printf("           code1 is not equal to 0.\n");
printf("           count1 is 1\n");
printf("           count2 is 1\n");
printf(" Your answer is :\n");
printf("           code1  is %ld\n",code1);
printf("           count1 is %ld\n",count1);
printf("           count2 is %ld\n",count2);
        if (code1 < 0 && count1 == 1 && count2 == 1)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0358','pass','PC');
       printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0358','fail','PC');
          errcnt = errcnt + 1;
       printf("\n\n       cdr017.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;
/**************** END TEST 0358 ***********/





/******************** BEGIN TEST0359 ********************/
/* This test updates a row or rows on FOREIGN KEY       */
/* column in table SIZ2_F1,set those rows ('  A',*) to   */
/* ('  Z',*),but there is not a row ('  Z',*,*,*,*,*,*  */
/* *,*,*) in PRIMARY TABLE -- SIZ2_P,this should be an  */
/* ERROR.                           */

printf("\n         FIPS sizing TEST0359             \n");
printf("              PRIMARY KEY & FOREIGN KEY    \n");
printf("     SQL with Integrity Enhancement section 6.5,6.6,6.7\n");
printf("     - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("        UPDATE SIZ2_F1\n");
printf("        SET F1='  Z'\n");
printf("        WHERE F1='  A';\n");
printf("code1 = SQLCODE;\n");
printf("\n");
printf("        SELECT COUNT(*) INTO :count1\n");
printf("        FROM SIZ2_F1\n");
printf("        WHERE F1 = '  A';\n");
EXEC SQL UPDATE SIZ2_F1
        SET F1 = '  Z'
        WHERE F1 = '  A';
code1 = SQLCODE;
EXEC SQL SELECT COUNT(*) INTO :count1
        FROM SIZ2_F1
        WHERE F1 = '  A';
     EXEC SQL ROLLBACK WORK;
printf("        The correct result is code1 not equal 0\n");
printf("                              count1 = 1\n");
printf("        Your answer is code1=%ld\n",code1);
printf("                              count1 = %ld\n",count1);
        if (code1 < 0 && count1 == 1)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0359','pass','PC');
printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0359','fail','PC');
          errcnt = errcnt + 1;
printf("\n\n       cdr017.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;
/******************** END TEST0359 **************************/
/******************** BEGIN TEST0375 ********************/
/* Check embeded variable violate CHECH rules.          */


printf("\n                     TEST0375             \n");
printf("                EMBEDED VAR violate the integrity     \n");
printf("      SQL with Integrity Enhancement section 6.8\n");
printf("      - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("\n");
printf("         UPDATE SIZ3_P5\n");
printf("         SET F1 = 10 * :long1 / 20 - 10 + 16\n");
printf("         WHERE  F1 = 5;\n");
printf("\n");
printf("        SELECT COUNT(*) INTO:count1\n");
printf("        FROM SIZ3_P5\n");
printf("        WHERE F1 = 11;\n");
printf("\n");
printf("         DELETE FROM SIZ3_F\n");
printf("         WHERE P5 = 5;\n");
printf("\n");
printf("         UPDATE SIZ3_P5\n");
printf("         SET F1 = 10 * :long1 / 20 - 10 + 16\n");
printf("         WHERE  F1 = 5;\n");
printf("\n");
printf("        SELECT COUNT(*) INTO:count2\n");
printf("        FROM SIZ3_P5\n");
printf("        WHERE F1 = 11;\n");
printf("\n");
count1 = -1;
count2 = -1;
long1 = 10;
EXEC SQL UPDATE SIZ3_P5
         SET F1 = 10 * :long1 / 20 - 10 + 16
         WHERE  F1 = 5;
code1 = SQLCODE;
EXEC SQL SELECT COUNT(*) INTO:count1
        FROM SIZ3_P5
        WHERE F1 = 11;
EXEC SQL DELETE FROM SIZ3_F
         WHERE P5 = 5;
EXEC SQL UPDATE SIZ3_P5
         SET F1 = 10 * :long1 / 20 - 10 + 16
         WHERE  F1 = 5;
code2 = SQLCODE;
EXEC SQL SELECT COUNT(*) INTO:count2
        FROM SIZ3_P5
        WHERE F1 = 11;
EXEC SQL ROLLBACK WORK;
printf(" The correct answer is :\n");
printf("           code1 < 0\n");
printf("           code2 = 0\n");
printf("           count1 is 0\n");
printf("           count2 is 1\n");
printf(" Your answer is :\n");
printf("           code1  is %ld\n",code1);
printf("           code2  is %ld\n",code2);
printf("           count1 is %ld\n",count1);
printf("           count2 is %ld\n",count2);
if (code1 < 0 && code2 ==0 && count2 ==1 && count1 == 0)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0375','pass','PC');
       printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0375','fail','PC');
          errcnt = errcnt + 1;
       printf("\n\n       cdr017.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;
/**************** END TEST 0375 ***********/


/******************** BEGIN TEST0376 ********************/
/* Join with referential integrity.          */


printf("\n                     TEST0376             \n");
printf("                Join with referential integrity     \n");
printf("      SQL with Integrity Enhancement section 6.8\n");
printf("      - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("\n");
printf("        SELECT COUNT(*) INTO:count1\n");
printf("        FROM SIZ3_F,SIZ3_P1,SIZ3_P2,SIZ3_P3,SIZ3_P4,\n");
printf("             SIZ3_P5,SIZ3_P6\n");
printf("        WHERE P1 = SIZ3_P1.F1\n");
printf("              AND P2 = SIZ3_P2.F1\n");
printf("              AND P3 = SIZ3_P3.F1\n");
printf("              AND P4 = SIZ3_P4.F1\n");
printf("              AND P5 = SIZ3_P5.F1\n");
printf("              AND P6 = SIZ3_P6.F1\n");
printf("              AND SIZ3_P3.F1 BETWEEN 1 AND 2;\n");
printf("\n");
count1 = -1;
EXEC SQL SELECT COUNT(*) INTO:count1
        FROM SIZ3_F,SIZ3_P1,SIZ3_P2,SIZ3_P3,SIZ3_P4,
             SIZ3_P5,SIZ3_P6
        WHERE P1 = SIZ3_P1.F1
              AND P2 = SIZ3_P2.F1
              AND P3 = SIZ3_P3.F1
              AND P4 = SIZ3_P4.F1
              AND P5 = SIZ3_P5.F1
              AND P6 = SIZ3_P6.F1
              AND SIZ3_P3.F1 BETWEEN 1 AND 2;
code1 = SQLCODE;
EXEC SQL ROLLBACK WORK;
printf(" The correct answer is :\n");
printf("           code1 = 0\n");
printf("           count1 is 4\n");
printf(" Your answer is :\n");
printf("           code1  is %ld\n",code1);
printf("           count1 is %ld\n",count1);
if (code1 == 0 && count1 == 4)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0376','pass','PC');
       printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0376','fail','PC');
          errcnt = errcnt + 1;
       printf("\n\n       cdr017.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;
/**************** END TEST 0376 ***********/

     exit(errcnt);
}


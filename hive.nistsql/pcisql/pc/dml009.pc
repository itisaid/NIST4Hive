/*  EMBEDDED C (file "DML009.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1987/08/21 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  DML009.PC                                                    */
/*  WRITTEN BY: HU YANPING                                       */
/*                                                               */
/*    THIS ROUTINE TESTS THE INSERT STATEMENT IN THE LANGUAGE OF */
/*  SQL.  THE FORMAT:                                            */
/*         INSERT INTO <table name> [(<insert list>)]            */
/*         {VALUES(<insert value list>) | <query specification>} */
/*                                                               */
/*  REFERENCES                                                   */
/*        AMERICAN NATIONAL STANDARD database language - SQL     */
/*                          X3.135-1989                          */
/*                                                               */
/*                        SECTION 8.7 <insert statement>         */
/*                        SECTION 8.10 <select statement>        */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
    char PNO1[4];
    char EMPNO1[4];
    long HOURS1;
    long i;
    long ii;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long SQLCODE;
int errcnt;
/* date_time declaration */
time_t cal;
     long  iii;


main()
{
  strcpy(uid,"HU");
  AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
if (strncmp(uid,uidx,2) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, dml009.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0022 ********************/

  printf("\n               TEST0022       \n");
  printf("           insert one record  \n");
  printf("reference X3.135-1989 section 8.7 General Rules 3)\n");
  printf("     - - - - - - - - - - - - - - - - - - -\n\n");

  EXEC SQL INSERT INTO WORKS(PNUM,EMPNUM,HOURS)
     VALUES ('P22','E22',NULL);

  EXEC SQL SELECT EMPNUM,PNUM
     INTO   :EMPNO1,:PNO1
     FROM   WORKS
     WHERE  HOURS IS NULL;

  printf("              EMPNO1=%s and PNO1=%s   \n",EMPNO1,PNO1);
  printf("  sqlcode=%ld \n\n",SQLCODE);
  printf("The answer should be sqlcode = 0 & EMPNO1 = E22.");
  if (SQLCODE == 0 && strncmp(EMPNO1,"E22",3) == 0)
    {

    EXEC SQL ROLLBACK WORK;

    printf("\n\n                  *** pass *** \n");
    EXEC SQL INSERT INTO TESTREPORT
    VALUES('0022','pass','PC');
    }
  else
    {

    EXEC SQL ROLLBACK WORK;

    printf("\n\n        dml009.pc  *** fail *** \n");
    EXEC SQL INSERT INTO TESTREPORT
    VALUES('0022','fail','PC');
          errcnt = errcnt + 1;
    }

  printf("===================================================");

  printf("\n\n\n\n");
  EXEC SQL COMMIT WORK;

/******************** END TEST0022 ********************/

/******************** BEGIN TEST0023 ********************/

  printf("\n                TEST0023       \n");
  printf("           insert with query spec.  \n");
  printf("reference X3.135-1989 section 8.7 GR7c & 5.5 SR7.\n");
  printf("     - - - - - - - - - - - - - - - - - - -\n\n");

/* CREATE TABLE TEMP_S             */
/*   (EMPNUM  CHAR(3),             */
/*    GRADE   DECIMAL(4),          */
/*    CITY    CHAR(15))            */
     HOURS1 = 23234;

  EXEC SQL DELETE FROM TEMP_S;
  EXEC SQL COMMIT WORK;

  EXEC SQL INSERT INTO TEMP_S(EMPNUM,GRADE,CITY)
     VALUES('E23',2323.4,'China');

  EXEC SQL SELECT COUNT(*) 
     INTO  :i
     FROM  TEMP_S;

  EXEC SQL INSERT INTO TEMP_S
     VALUES('E23',:HOURS1,'China');
  iii = SQLCODE;

  ii = 0;

  EXEC SQL SELECT COUNT(*)
     INTO   :ii
     FROM   TEMP_S;
  printf(" iii = %ld; ii = %ld; i = %ld \n\n",iii,ii,i);

  printf("The correct answer should be iii < 0, ii=1 & i=1 or\n");
  printf("                             iii = 0, ii=2 & i=1.  \n");

  EXEC SQL ROLLBACK WORK;

  if (iii < 0 && ii==1 && i==1 || iii==0 && ii==2 && i==1)
    {
    printf("\n\n                  *** pass *** \n");
    EXEC SQL INSERT INTO TESTREPORT
    VALUES('0023','pass','PC');
    }
  else
    {
    printf("\n\n        dml009.pc  *** fail *** \n");
    EXEC SQL INSERT INTO TESTREPORT
    VALUES('0023','fail','PC');
          errcnt = errcnt + 1;
    }

  printf("==================================================");

  printf("\n\n\n\n");
  EXEC SQL COMMIT WORK;

/******************** END TEST0023 ********************/

/******************** BEGIN TEST0024 ********************/

  printf("\n                  TEST0024       \n");
  printf("reference X3.135-1989 section 8.7 General Rules 4)\n");
  printf("     the result of the query is empty    \n");
  printf("     - - - - - - - - - - - - - - - - - - -\n\n");

  EXEC SQL INSERT INTO TEMP_S
     SELECT EMPNUM,GRADE,CITY
     FROM   STAFF
     WHERE  GRADE > 13;

  printf("                sqlcode=%ld \n",SQLCODE);
  printf("\nThe answer should be sqlcode = 100. ");
  if (SQLCODE == 100)
    {
    EXEC SQL ROLLBACK WORK;
    printf("\n\n                *** pass *** \n");
    EXEC SQL INSERT INTO TESTREPORT
    VALUES('0024','pass','PC');
    }
  else
    {
    EXEC SQL ROLLBACK WORK;
    printf("\n\n      dml009.pc  *** fail *** \n");
    EXEC SQL INSERT INTO TESTREPORT
    VALUES('0024','fail','PC');
          errcnt = errcnt + 1;
    }

  printf("=================================================");

  printf("\n\n\n\n");
  EXEC SQL COMMIT WORK;

/******************** END TEST0024 ********************/

/******************** BEGIN TEST0025 ********************/

  printf("\n                  TEST0025       \n");
  printf("reference X3.135-1989 section 8.7 General Rules 4)\n");
  printf("     the result of the query is not empty    \n");
  printf("     - - - - - - - - - - - - - - - - - - -\n\n");
  
  EXEC SQL DELETE FROM TEMP_S;

  ii=0;

  EXEC SQL INSERT INTO TEMP_S(EMPNUM,GRADE,CITY)
     SELECT EMPNUM,GRADE,CITY
     FROM   STAFF
     WHERE  GRADE > 12;
  iii = SQLCODE;

  EXEC SQL SELECT COUNT(*)
     INTO :ii
     FROM TEMP_S;

  printf(" iii=%ld, ii=%ld\n\n",iii,ii);
  printf("The answer should be iii=0 & ii=2.\n");

  EXEC SQL ROLLBACK WORK;

  if (ii == 2 && iii == 0)
    {
    printf("\n\n                *** pass *** \n");
    EXEC SQL INSERT INTO TESTREPORT
    VALUES('0025','pass','PC');
    }
  else
    {
    printf("\n\n      dml009.pc  *** fail *** \n");
    EXEC SQL INSERT INTO TESTREPORT
    VALUES('0025','fail','PC');
          errcnt = errcnt + 1;
    }

  printf("=================================================");

  printf("\n\n\n\n");

  EXEC SQL COMMIT WORK;

/******************** END TEST0025 ********************/

/******************** BEGIN TEST0026 ********************/

  printf("\n                 TEST0026       \n");
  printf("          insert with query spec.  \n");
  printf("reference X3.135-1989 section 8.7 General Rules 2)\n");
  printf("     - - - - - - - - - - - - - - - - - - -\n\n");

/* CREATE VIEW TEMP_SS(EMPNUM,GRADE,CITY)           */
/*   AS SELECT EMPNUM,GRADE,CITY                    */
/*      FROM   STAFF3                               */
/*      WHERE  GRADE > 12                           */
/*   WITH CHECK OPTION                              */

  EXEC SQL INSERT INTO TEMP_SS
     SELECT EMPNUM,GRADE,CITY
     FROM   STAFF3
     WHERE  GRADE = 10;

  printf("                sqlcode=%ld \n",SQLCODE);
  printf("\nThe answer should be sqlcode < 0.");
  i=SQLCODE;

  EXEC SQL ROLLBACK WORK;

  if (i < 0)
    {
    printf("\n\n                *** pass *** \n");
    EXEC SQL INSERT INTO TESTREPORT
    VALUES('0026','pass','PC');
    }
  else
    {
    printf("\n\n      dml009.pc  *** fail *** \n");
    EXEC SQL INSERT INTO TESTREPORT
    VALUES('0026','fail','PC');
          errcnt = errcnt + 1;
    }

  printf("=================================================");
  printf("\n\n\n\n");

  EXEC SQL COMMIT WORK;

/******************** END TEST0026 ********************/

  exit(errcnt);

}

/*  EMBEDDED C (file " XTS703.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS703.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  This routine tests UNIQUE predicate, single table,           */
/*                     all values distinct                       */
/*                                                               */
/*  REFERENCES                                                   */
/*    8.9 GR.2                                                   */
/*    7.9    <query specification>                               */
/*    7.10   <query expression>                                  */
/*    7.11   <table subquery>                                    */
/*    F#29   unique predicate                                    */
/*                                                               */
/*  DATE 1994/05/05 EMBEDDED C LANGUAGE                          */
/*  DATE LAST ALTERED  12/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by DWF 11/14/95                           */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 01/12/95:                   */
/*         Print timestamp                                       */
/*         Initialise ALPNUM string                              */
/*                                                               */
/*  QA STATUS : QA CHECK                                         */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 char naam[25];
 long  coun;
 short grade;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
int flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts703.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run:  %s\n", ctime(&cal));

/******************** BEGIN TEST7010 ********************/
flag = 1;
printf("                  TEST7010 \n");
printf("    UNIQUE predicate, single table, all values distinct\n");
printf("References:\n");
printf("    8.9 GR.2\n");
printf("    7.9    <query specification>\n");
printf("    7.10   <query expression>\n");
printf("    7.11   <table subquery>\n");
printf("    F#29   unique predicate\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

/* Use table CTS1.STAFF from the standard schema */
coun = 0;

printf("SELECT COUNT(*) INTO :coun FROM STAFF\n");
printf("WHERE UNIQUE(SELECT * FROM STAFF);\n");
EXEC SQL SELECT COUNT(*)
         INTO   :coun
         FROM   STAFF
         WHERE  UNIQUE(SELECT * FROM STAFF);
CHCKOK();
printf("Coun should be 0; its value is:  %ld\n",coun);
if (coun != 0)
     flag = 0;
printf("\n");

 /* second query */
coun = 0;
printf("SELECT COUNT(*) INTO :coun FROM STAFF AS X \n");
printf("WHERE UNIQUE (SELECT * FROM STAFF AS Y\n");
printf("   WHERE X.EMPNUM = Y.EMPNUM\n");
printf("   AND X.EMPNAME  = Y.EMPNAME\n");
printf("   AND X.GRADE    = Y.GRADE\n");
printf("   AND X.CITY     = Y.CITY);\n");
EXEC SQL SELECT COUNT(*) INTO :coun FROM STAFF AS X
         WHERE UNIQUE (SELECT * FROM STAFF AS Y
              WHERE X.EMPNUM = Y.EMPNUM
              AND X.EMPNAME  = Y.EMPNAME
              AND X.GRADE    = Y.GRADE
              AND X.CITY     = Y.CITY);
CHCKOK();
printf("Coun should be 5 its value is:  %ld\n",coun);
 if (coun != 5)
     flag = 0;
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

 /* record results */

     if ( flag == 1 )
       {
          printf("\n\n       xts703.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7010','pass','PC');
       }
     else
       {
          printf("\n\n       xts703.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7010','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;

/******************** END TEST7010 *********************/

/******************** BEGIN TEST7011 ********************/
/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS703.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  UNIQUE PREDICATE, table subquery with non-null duplicates    */
/*                                                               */
/*  REFERENCES                                                   */
/*    8.9    <unique predicate>                                  */
/*    7.11   <table subquery>                                    */
/*    F#29   unique predicate                                    */
/*                                                               */
/*  DATE 1994/05/05 EMBEDDED C LANGUAGE                          */
/*  DATE LAST ALTERED 15.11.95                                   */
/*                                                               */
/*  Cleanups and fixes by DWF 11/15/95                           */
/*                                                               */
/*  QA STATUS : QA CHECK                                         */
/*****************************************************************/

flag = 1;
printf("                  TEST7011 \n");
printf("    UNIQUE PREDICATE, table subquery with non-null duplicates\n");
printf(" References:\n");
printf("    8.9    <unique predicate>\n");
printf("    7.11   <table subquery>\n");
printf("    F#29   unique predicate\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

coun = 999;
printf("SELECT COUNT (*) INTO :coun FROM STAFF\n");
printf("WHERE UNIQUE(SELECT GRADE FROM STAFF);\n");
EXEC SQL SELECT COUNT(*)
     INTO   :coun
     FROM   STAFF
     WHERE  UNIQUE(SELECT GRADE FROM STAFF);
CHCKOK();
printf("The result should be: coun = 0, coun is %ld\n",coun);
if (coun != 0)
     flag = 0;
printf("\n");

strcpy(naam, "xxxxxxxxxxxxxxxxxxxxxxxx");
grade = 0;
printf("SELECT EMPNUM, GRADE INTO :naam, :grade FROM STAFF X \n");
printf("WHERE (UNIQUE(SELECT GRADE FROM STAFF Y\n");
printf("WHERE X.GRADE = Y.GRADE));\n");
EXEC SQL SELECT EMPNUM, GRADE INTO :naam, :grade FROM STAFF X
         WHERE (UNIQUE(SELECT GRADE FROM STAFF Y
                       WHERE X.GRADE = Y.GRADE));
CHCKOK();
printf("EMPNUM should be E2; its value is %s\n",naam);
printf("GRADE  should be 10; its value is %d\n",grade);
if (strncmp(naam, "E2", 2) != 0 || grade != 10)
   flag = 0;
printf("\n");

coun = 0;
printf("SELECT COUNT (*) INTO :coun FROM STAFF X\n");
printf("WHERE NOT UNIQUE (SELECT GRADE FROM STAFF Y\n");
printf("      WHERE X.GRADE = Y.GRADE);\n");
EXEC SQL SELECT COUNT (*) INTO :coun FROM STAFF X
         WHERE NOT UNIQUE (SELECT GRADE FROM STAFF Y
                           WHERE X.GRADE = Y.GRADE);
CHCKOK();
printf("Coun should be 4; its value is %ld\n",coun);
if (coun != 4)
     flag = 0;
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

 /* record results */
     if ( flag == 1 )
       {
          printf("\n\n       xts703.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7011','pass','PC');
       }
     else
       {
          printf("\n\n       xts703.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7011','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7011 *********************/

/******************** BEGIN TEST7012 ********************/
/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS703.PC                                                   */
/*  WRITTEN BY: Manolis Megaloikonomou                           */
/*                                                               */
/*  This routine tests UNIQUE predicate, duplicates containing   */
/*                     null                                      */
/*                                                               */
/*  REFERENCES                                                   */
/*    8.9    <unique predicate>                                  */
/*    7.11   <table subquery>                                    */
/*    F#29   UNIQUE predicate                                    */
/*                                                               */
/*  DATE 1994/05/05 EMBEDDED C LANGUAGE                          */
/*  DATE LAST ALTERED 15.11.95                                   */
/*                                                               */
/*  Changed by DWF 11/15/95                                      */
/*                                                               */
/*  QA STATUS : QA CHECK                                         */
/*****************************************************************/
flag = 1;

printf("                  TEST7012 \n");
printf("    UNIQUE predicate, duplicates containing null\n");
printf("References:\n");
printf("    8.9    <unique predicate>\n");
printf("    7.11   <table subquery>\n");
printf("    F#29   unique predicate\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

printf("INSERT INTO STAFFC (EMPNUM,EMPNAME,GRADE,CITY)\n");
printf("VALUES('E9','Terry',13,NULL);\n");
EXEC SQL INSERT INTO STAFFC (EMPNUM,EMPNAME,GRADE,CITY)
         VALUES('E9','Terry',13,NULL);
CHCKOK();
printf("\n");

printf("INSERT INTO STAFFC (EMPNUM,EMPNAME,GRADE,CITY)\n");
printf("VALUES('E8','Nick',13,NULL);\n");
EXEC SQL INSERT INTO STAFFC (EMPNUM,EMPNAME,GRADE,CITY)
         VALUES('E8','Nick',13,NULL);
CHCKOK();
printf("\n");

/* predicate satisfied for all values of grade */

  coun = 999;
  printf("SELECT COUNT(*) INTO :coun FROM STAFFC AS X\n");
  printf("WHERE UNIQUE(SELECT CITY, MGR FROM STAFFC AS Y\n");
  printf("   WHERE X.GRADE = Y.GRADE);\n");

  EXEC SQL SELECT COUNT(*)
     INTO   :coun
     FROM   STAFFC AS X
  WHERE UNIQUE(SELECT CITY, MGR FROM STAFFC AS Y
     WHERE X.GRADE = Y.GRADE);

CHCKOK();
printf("Coun should be 9 its value is :  %ld\n\n",coun);
  if (coun != 9)
     flag = 0;

/* predicate satisfied only when grade = 12 */

  coun = 999;
  printf("SELECT COUNT(*) INTO :coun FROM STAFFC AS X\n");
  printf("WHERE NOT UNIQUE(SELECT GRADE, CITY FROM STAFFC AS Y\n");
  printf("   WHERE X.GRADE = Y.GRADE);\n");

  EXEC SQL SELECT COUNT(*)
     INTO   :coun
     FROM   STAFFC AS X
  WHERE NOT UNIQUE(SELECT GRADE, CITY FROM STAFFC AS Y
     WHERE X.GRADE = Y.GRADE);

CHCKOK();
printf("Coun should be 3; its value is : %ld\n\n",coun);
  if (coun != 3)
     flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

 /* record results */

     if ( flag == 1 )
       {
          printf("\n\n       xts703.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7012','pass','PC');
       }
     else
       {
          printf("\n\n       xts703.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7012','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7012 *********************/
    exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

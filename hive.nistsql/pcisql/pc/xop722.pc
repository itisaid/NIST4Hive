/*  EMBEDDED C (file "XOP722.PC")  */

/*   Copyright 1994, 1995 X/Open Company Limited  */

/* All rights reserved.                                          */
/*                                                               */
/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */

/*   X/Open and the 'X' symbol are registered trademarks of X/Open Company  */
/*   Limited in the UK and other countries.                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1994/06/06 EMBEDDED C LANGUAGE                          */
/*  X/Open SQL VALIDATION TEST SUITE V6.0                        */
/*                                                               */
/*  XOP722.PC                                                    */
/*  WRITTEN BY: E. Pratt                                         */
/*                                                               */
/*  REVOKE ALL with optional PRIVILEGES omitted                  */
/*                                                               */
/*  REFERENCES                                                   */
/*        X/Open CAE SQL                                         */
/*        SECTION 5.3.10                                         */
/*                                                               */
/*                 <embedded SQL C program>                      */
/*                                                               */
/*  DATE PROGRAM LAST CHANGED   02/11/94                         */
/*                                                               */
/*****************************************************************/

/* This program should be run under Authorization id XOPEN3 */

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>
EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char ch1[3];
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
extern int AUTHID();

/* nosubclass variables */
char NORMSQ[6];
char ALPNUM[37];
long norm1;
long norm2;

int errcnt;
/* date_time declaration */
time_t cal;
            long  errflg;

NOSUBCLASS()
{
/* This routine replaces valid implementation defined    */
/* subclasses with 000. This replacement equates valid   */
/* implementation-defined subclasses with the 000 value  */
/* expected by the test case; otherwise the test will    */
/* fail. After calling NOSUBCLASS, NORMSQ will be tested */
/*                              SQLSTATE will be printed */

strcpy (NORMSQ, SQLSTATE);

norm1 = 2;
/* subclass begins in position 3 of char array NORMSQ    */
for (norm2 = 13; norm2 < 37; norm2++)
/* valid subclasses begin with 5/9, I-Z, end of ALPNUM table */
    {
    if (NORMSQ[norm1] == ALPNUM[norm2])
    NORMSQ[norm1] = '0';
    }

if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
goto P213;
/* Quit if NORMSQ is unchanged. Subclass is not impl.def */
/* Changed NORMSQ means implementation-defined subclass, */
/* so proceed to zero it out, if valid (0-9, A-Z)        */

norm1 = 3;
/* examining position 4 of char array NORMSQ             */
for (norm2 = 0; norm2 < 37; norm2++)
/* valid characters are 0-9 A-Z                          */
   {
   if (NORMSQ[norm1] == ALPNUM[norm2])
   NORMSQ[norm1] = '0';
   }
norm1 = 4;
/* examining position 5 of char array NORMSQ             */
for (norm2 = 0; norm2 < 37; norm2++)
/* valid characters are 0-9 A-z */
    {
    if (NORMSQ[norm1] == ALPNUM[norm2])
    NORMSQ[norm1] = '0';
    }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01). These equate to successful completion */
/* SQLSTATE values of 00000. */
/* reference SQL-92. 4.28 SQL-transactions, paragraph 2 */
   if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
       NORMSQ[1] = '0';
P213:
   return;
}


main()
{

printf("\nThis Test Program must be run after xop719.pc,\n");
printf("xop720.pc and xop721.pc but before xop723.pc\n");
printf("\n");

/* Log in as user XOPEN3 */
     strcpy(uid,"XOPEN3");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM XOPEN1.ECCO;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
errflg = 0;
printf("X/OPEN Extensions SQL Test Suite, V6.0, Embedded C, xop722.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/* initialise NOSUBCLASS comparison variable */
strcpy(ALPNUM, "01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

/******************** BEGIN TEST0722 ********************/

     printf("\n                     TEST0722             \n");
     printf(" X/O,REVOKE ALL with optional PRIVILEGES omitted \n");
     printf(" X/Open CAE SQL SEC. 5.3.10\n");
     printf("       - - - - - - - - - - - - - - - - - - -\n\n");
     printf("### SELECT A1 INTO :ch1 FROM XOPEN1.AAA \n");
     printf("###        WHERE A2 = 'AB';\n");
     printf("### DELETE FROM XOPEN1.BBB WHERE B1 = 'XX';\n");
     printf("### UPDATE XOPEN1.BBB SET B1 = 'EC' WHERE B2 = 'BH';\n");
     printf("### SELECT C1 INTO :ch1 FROM XOPEN1.CCC \n");
     printf("###        WHERE C2 = 'CB';\n");
     printf("### INSERT INTO XOPEN1.CCC VALUES('SU', 'ND', 'AY');\n");
     printf("\n\n=================================================\n");

/* Check that SELECT from AAA does not work, the */
/* privilege was previously revoked (xop721.pc) */
     strcpy(SQLSTATE,"x");
     EXEC SQL SELECT A1 INTO :ch1 FROM XOPEN1.AAA 
       WHERE A2 = 'AB';
     SQLSTATE[5] = '\0';
     ch1[2] = '\0';
     printf("SQLSTATE should be 42000 , it is %s\n",SQLSTATE);

     NOSUBCLASS();
     if (strncmp(NORMSQ,"42000",5) != 0)
     {
     printf ("*** Problem found (TEST STEP NUMBER 1) ! *** \n");
     errflg = errflg + 1;
     }

     printf("\n\n=================================================\n");

/* Check that DELETE from BBB does not work, the */
/* privilege was previously revoked (xop721.pc) */
     strcpy(SQLSTATE,"x");
     EXEC SQL DELETE FROM XOPEN1.BBB WHERE B1 = 'XX';
     SQLSTATE[5] = '\0';
     printf("SQLSTATE should be 42000 , it is %s\n",SQLSTATE);

     NOSUBCLASS();
     if (strncmp(NORMSQ,"42000",5) != 0)
     {
     printf ("*** Problem found (TEST STEP NUMBER 2) ! *** \n");
     errflg = errflg + 1;
     }

     printf("\n\n=================================================\n");

/* Check that UPDATE on BBB does not work, the privilege */
/* was previously revoked (xop721.pc) */
     strcpy(SQLSTATE,"x");
     EXEC SQL UPDATE XOPEN1.BBB SET B1 = 'EC' 
       WHERE B2 = 'BH';
     SQLSTATE[5] = '\0';
     printf("SQLSTATE should be 42000 , it is %s\n",SQLSTATE);

     NOSUBCLASS();
     if (strncmp(NORMSQ,"42000",5) != 0)
     {
     printf ("*** Problem found (TEST STEP NUMBER 3) ! *** \n");
     errflg = errflg + 1;
     }

     printf("\n\n=================================================\n");

/* Check that SELECT from CCC does not work, the */
/* privilege was never granted to XOPEN3 (xop719.pc) */
     strcpy(SQLSTATE,"x");
     strcpy(ch1,"  ");
     EXEC SQL SELECT C1 INTO :ch1 FROM XOPEN1.CCC  
       WHERE C2 = 'CB';
     SQLSTATE[5] = '\0';
     ch1[2] = '\0';
     printf("SQLSTATE should be 42000 , it is %s\n",SQLSTATE);

     NOSUBCLASS();
     if (strncmp(NORMSQ,"42000",5) != 0)
     {
     printf ("*** Problem found (TEST STEP NUMBER 4) ! *** \n");
     errflg = errflg + 1;
     }

     printf("\n\n=================================================\n");

/* Check that INSERT into CCC does not work, the */
/* privilege was never granted to XOPEN3 (xop719.pc) */
     strcpy(SQLSTATE,"x");
     EXEC SQL INSERT INTO XOPEN1.CCC 
       VALUES('SU', 'ND', 'AY');
     SQLSTATE[5] = '\0';
     printf("SQLSTATE should be 42000 , it is %s\n",SQLSTATE);

     NOSUBCLASS();
     if (strncmp(NORMSQ,"42000",5) != 0)
     {
     printf ("*** Problem found (TEST STEP NUMBER 5) ! *** \n");
     errflg = errflg + 1;
     }

/* No ROLLBACK - This program is part of a set, run */
/* together, xop719.pc and xop720.pc to xop723.pc */

/* Display the number of errors */
     printf("\nNumber of errors detected = %ld \n",errflg);
     printf("### maximum number of errors is 5 ###\n");

     if (errflg==0)
 {
 EXEC SQL INSERT INTO XOPEN1.TESTREPORT VALUES('0722','pass','PC');
 printf("\n\n      xop722.pc      *** pass ***     ");
 }
 else
 {
 EXEC SQL INSERT INTO XOPEN1.TESTREPORT VALUES('0722','fail','PC');
 errcnt = errcnt + 1;
 printf("\n\n      xop722.pc      *** fail ***     ");
 }

     printf("\n\n=================================================\n");
     printf("\n\n\n\n");
                         
     EXEC SQL COMMIT WORK;

/******************** END TEST0722 ********************/

     exit(errcnt);

}


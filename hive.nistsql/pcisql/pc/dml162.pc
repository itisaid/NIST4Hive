/*  EMBEDDED C (file "DML162.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1996-04-12 EMBEDDED C LANGUAGE                          */
/*  SQL VALIDATION TEST SUITE V6.0                          */
/* DISCLAIMER:                                                  */
/* This program was written by employees of NIST to test SQL    */
/* implementations for conformance to the SQL standards.        */
/* NIST assumes no responsibility for any party's use of        */
/* this program.                                                */
/*                                                               */
/*  DML162.PC                                                    */
/*  WRITTEN BY: David Flater                                     */
/*                                                               */
/*  This routine tests <joined table>.                           */
/*                                                               */
/*  REFERENCES                                                   */
/*    ANSI SQL-1992                                              */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
     char uid[19];
     char uidx[19];
long cnt1;
char enuum[4];
char enaam[21];
long egrd;
char ecity[16];
char pnuum[4];
long phrs;
short indic1;
short indic2;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"FLATER            ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, dml162.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0863 ********************/
flag = 1;

     printf("                  TEST0863 \n");
     printf("<joined table> directly contained in cursor, view\n");
     printf("References:\n");
     printf("    F#4 -- Joined table\n");
     printf("    F#3 -- Basic schema manipulation\n");
     printf("    11.19 -- <view definition>\n");
     printf("    13.1  -- <declare cursor>\n");
     printf("     - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("CREATE VIEW BLIVET (CITY, PNUM, EMPNUM, EMPNAME, GRADE,\n");
printf("HOURS, PNAME, PTYPE, BUDGET) AS\n");
printf("  HU.STAFF NATURAL JOIN HU.WORKS NATURAL JOIN HU.PROJ;\n");
EXEC SQL CREATE VIEW BLIVET (CITY, PNUM, EMPNUM, EMPNAME, GRADE,
HOURS, PNAME, PTYPE, BUDGET) AS
  HU.STAFF NATURAL JOIN HU.WORKS NATURAL JOIN HU.PROJ;
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

cnt1 = 0;
printf("SELECT COUNT(*) INTO :cnt1\n");
printf("  FROM BLIVET WHERE EMPNUM = 'E1';\n");
EXEC SQL SELECT COUNT(*) INTO :cnt1
  FROM BLIVET WHERE EMPNUM = 'E1';
CHCKOK ();
printf ("cnt1 should be 3; its value is %ld\n\n", cnt1);
if (cnt1 != 3)
  flag = 0;

cnt1 = 0;
printf("SELECT COUNT(*) INTO :cnt1\n");
printf("  FROM BLIVET WHERE EMPNUM <> 'E1';\n");
EXEC SQL SELECT COUNT(*) INTO :cnt1
  FROM BLIVET WHERE EMPNUM <> 'E1';
CHCKOK ();
printf ("cnt1 should be 3; its value is %ld\n\n", cnt1);
if (cnt1 != 3)
  flag = 0;

printf("DECLARE C16211 CURSOR FOR\n");
printf("  HU.STAFF LEFT OUTER JOIN HU.WORKS\n");
printf("  USING (EMPNUM);\n\n");
EXEC SQL DECLARE C16211 CURSOR FOR
  HU.STAFF LEFT OUTER JOIN HU.WORKS
  USING (EMPNUM);

printf("OPEN C16211;\n");
EXEC SQL OPEN C16211;
CHCKOK ();
printf ("\n");

printf ("We should be able to fetch 13 rows.\n\n");

cnt1 = 0;
P100:
strcpy (enuum, "xxx");
printf("FETCH C16211 INTO :enuum, :enaam, :egrd, :ecity,\n");
printf(":pnuum:indic1, :phrs:indic2;\n");
EXEC SQL FETCH C16211 INTO :enuum, :enaam, :egrd, :ecity,
:pnuum:indic1, :phrs:indic2;
if (cnt1 == 13)
  goto P101;
cnt1 = cnt1 + 1;
CHCKOK ();
printf ("enuum is %s\n\n", enuum);
goto P100;

P101:
printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
printf ("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (SQLCODE != 100 || strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

printf("DROP VIEW BLIVET CASCADE;\n");
EXEC SQL DROP VIEW BLIVET CASCADE;
CHCKOK ();
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf ("\n");

     if (flag == 1)
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0863','pass','PC');
       }
     else
       {
          printf("\n\n       dml162.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0863','fail','PC');
          errcnt = errcnt + 1;
       }
  EXEC SQL COMMIT WORK;
printf("\n================================================\n");

/******************** END TEST0863 *********************/
     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

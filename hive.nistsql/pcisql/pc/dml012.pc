/*  EMBEDDED C (file "DML012.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1987/08/21 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  DML012.PC                                                    */
/*  WRITTEN BY: HU YANPING                                       */
/*                                                               */
/*    THIS ROUTINE TESTS THE DELETE: searched STATEMENT IN THE   */
/*  LANGUAGE OF SQL. THE FORMAT IS :                             */
/*                DELETE FROM <table name>                       */
/*                [WHERE <search condition>]                     */
/*                                                               */
/*  REFERENCES                                                   */
/*        AMERICAN NATIONAL STANDARD database language - SQL     */
/*                          X3.135-1989                          */
/*                                                               */
/*                  SECTION 8.5  <delete statement: searched>    */
/*                  SECTION 8.7  <insert statement>              */
/*                  SECTION 8.9  <rollback statement>            */
/*                  SECTION 8.10 <select statement>              */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
      long i;
      long ii;
      long iii;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long SQLCODE;
int errcnt;
/* date_time declaration */
time_t cal;
      long  iiii;


main()
{
   strcpy(uid,"HU");
   AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
if (strncmp(uid,uidx,2) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, dml012.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0037 ********************/

   printf("\n                    TEST0037 \n");
   printf("            delete statement: searched \n");
   printf("reference X3.135-1989 section 8.5 General Rules a)\n");
   printf("     - - - - - - - - - - - - - - - - - - -\n\n");

   i= -1;
   ii= -1;
   iii= -1;

   EXEC SQL SELECT COUNT(*)
       INTO   :i
       FROM   STAFF;

   printf("                 Before delete i=%ld \n",i);
   EXEC SQL DELETE FROM STAFF;

   EXEC SQL SELECT COUNT(*)
       INTO   :ii
       FROM   STAFF;
   printf("                 After delete ii=%ld \n",ii);

   EXEC SQL ROLLBACK WORK;

/* Here we also tested the ROLLBACK statement */
   EXEC SQL SELECT COUNT(*)
       INTO   :iii
       FROM   STAFF;

   printf("                 After ROLLBACK iii=%ld \n\n",iii);
   printf("\nThe answer should be sqlcode = 0, i = iii & ii = 0");
   if (SQLCODE == 0 && i == iii && ii == 0)
     {
     printf("\n\n                *** pass *** \n");
     EXEC SQL INSERT INTO TESTREPORT
   VALUES('0037','pass','PC');
     }
   else
     {
     printf("\n\n      dml012.pc  *** fail *** \n");
     EXEC SQL INSERT INTO TESTREPORT
   VALUES('0037','fail','PC');
          errcnt = errcnt + 1;
     }
   printf("===================================================");

   printf("\n\n\n\n");
   EXEC SQL COMMIT WORK;
/******************** END TEST0037 ********************/

/******************** BEGIN TEST0038 ********************/

   printf("\n                    TEST0038 \n");
   printf("            delete statement: searched \n");
   printf("reference X3.135-1989 section 8.5 General Rules b)\n");
   printf("     - - - - - - - - - - - - - - - - - - -\n\n");

   i= -1;
   ii= -1;
   iii= -1;

   EXEC SQL SELECT COUNT(*)
       INTO   :i
       FROM   WORKS;
   printf("               Before delete i=%ld \n",i);

   EXEC SQL DELETE FROM WORKS
       WHERE WORKS.PNUM IN
          (SELECT PROJ.PNUM
          FROM   PROJ
          WHERE  PROJ.PNUM=WORKS.PNUM
             AND PROJ.CITY='Tampa');

   EXEC SQL SELECT COUNT(*)
       INTO   :ii
       FROM   WORKS;
   printf("               After delete ii=%ld \n",ii);

   EXEC SQL ROLLBACK WORK;
   iiii = SQLCODE;

/* Here we also tested the ROLLBACK statement */
   EXEC SQL SELECT COUNT(*)
       INTO   :iii
       FROM   WORKS;

   printf("               After ROLLBACK iii=%ld \n\n",iii);
   printf("\nThe answer should be iiii = 0, i = iii & ii = i-1.");

   if (iiii == 0 && i == iii && ii == (i - 1))
     {
     printf("\n\n                 *** pass *** \n");
     EXEC SQL INSERT INTO TESTREPORT
     VALUES('0038','pass','PC');
     }
   else
     {
     printf("\n\n       dml012.pc  *** fail *** \n");
     EXEC SQL INSERT INTO TESTREPORT
     VALUES('0038','fail','PC');
          errcnt = errcnt + 1;
     }

   printf("===================================================");

   printf("\n\n\n\n");

   EXEC SQL COMMIT WORK;

/******************** END TEST0038 ********************/

   exit(errcnt);
}

/*  EMBEDDED C (file "SDL022.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1988/09/06 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  SDL022.PC                                                    */
/*  WRITTEN BY: HU YANPING                                       */
/*                                                               */
/*    THIS ROUTINE TESTS THE SCHEMA DEFINITION LANGUAGE FOR SQL. */
/*                                                               */
/*  REFERENCES                                                   */
/*        AMERICAN NATIONAL STANDARD database language - SQL     */
/*                          X3.135-1989                          */
/*                                                               */
/*                 SECTION 6. Schema Definition Language         */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
     char     PNO1[4];
     char     PNAME1[21];
     char     USERID[20];
     char     COLUM2[3];
     long     COLUM1;
     long     BUDGT1;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long SQLCODE;
int errcnt;
/* date_time declaration */
time_t cal;
     long     ii;
     long     iii;



main()
{
     strcpy(uid,"SULLIVAN");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
if (strncmp(uid,uidx,8) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, sdl022.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

     printf("                  TEST0200       \n");
     printf("       (GRANT violation test__SELECT) \n");
     printf("Reference X3.135-89 section 6.10 <privilege def.> \n");     
     printf("     - - - - - - - - - - - - - - - - - - -\n\n");

     EXEC SQL INSERT INTO HU.UPUNIQ
          VALUES (10,'X');

     ii = SQLCODE;

     printf("SULLIVAN only has privilege to INSERT into HU.UPUNIQ\n");
     printf("\n\nSULLIVAN does not have privilege to SELECT from HU.UPUNIQ:\n");
     printf("*** EXEC SQL SELECT *          \n");
     printf("         INTO :COLUM1, :COLUM2 \n");
     printf("         FROM HU.UPUNIQ        \n");
     printf("         WHERE NUMKEY=3        \n");

/*  SULLIVAN does not have privilege to SELECT from table HU.UPUNIQ. */

     COLUM1 = 0;
     EXEC SQL SELECT *
           INTO  :COLUM1, :COLUM2
           FROM HU.UPUNIQ
           WHERE NUMKEY=3;

     iii = SQLCODE;
     printf(" \n ii = %ld;  iii = %ld ; COLUM1 = %ld\n",ii,iii,COLUM1);


     printf("The answer should be iii<0, ii=0, & COLUM1 <> 3\n");

     EXEC SQL ROLLBACK WORK;

     if (iii < 0 && ii == 0 && COLUM1 != 3)
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0200','pass','PC');
       }
     else
       {
          printf("\n\n       sdl022.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0200','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");
     EXEC SQL COMMIT WORK;
     exit(errcnt);
}


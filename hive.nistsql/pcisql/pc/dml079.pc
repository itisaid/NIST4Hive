/*  EMBEDDED C (file "DML079.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1991/10/10 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  DML079.PC                                                    */
/*  WRITTEN BY: SHIRLEY HURWITZ                                  */
/*                                                               */
/*  THIS ROUTINE TESTS MISCELLANEOUS FEATURES.                   */
/*                                                               */
/*  REFERENCES                                                   */
/*        AMERICAN NATIONAL STANDARD database language - SQL     */
/*                          X3.135-1989                          */
/*                          X3.168-1989                          */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
  char EMPNM1[21];
  long count1;
  long count2;
  long count3;
  long count4;
  long count5;
  long count6;
  char uid[19];
  char uidx[19];
EXEC SQL END DECLARE SECTION;

  long SQLCODE;
  int errcnt;

/* date_time declaration */
time_t cal;

  long flag1;
  long flag2;
  long i;
  long ii;
  long j;
  long jj;

main()

{

strcpy(uid,"HU");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
if (strncmp(uid,uidx,2) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, dml079.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");

/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0451 ********************/

      printf("==============================================\n");
      printf("            TEST0451       \n");     
      printf("     UNIQUEness is case sensitive \n");
      printf("X3.135-1989 Sec. 4.2.1 Character strings \n");
      printf("X3.135-1989 Sec. 5.1 <character> Format <letter> \n");
      printf("     - - - - - - - - - - - - - - - - - - -\n\n");

      i = 0;

      EXEC SQL UPDATE STAFF SET EMPNUM = 'e2'
           WHERE EMPNUM = 'E4';
      if (SQLCODE == 0) i = i + 1;
      printf("\n 1. SQLCODE = 0 is a pass.  SQLCODE = %ld", SQLCODE);
        
      EXEC SQL INSERT INTO STAFF(EMPNUM)
           VALUES ('E1');         
      if (SQLCODE < 0) i = i + 1;
      printf("\n 2. SQLCODE less than 0 is a pass.  SQLCODE = %ld", SQLCODE);
 
      EXEC SQL INSERT INTO STAFF(EMPNUM)
           VALUES ('e1');
      if (SQLCODE == 0) i = i + 1;
      printf("\n 3. SQLCODE = 0 is a pass.  SQLCODE = % ld", SQLCODE);

      EXEC SQL UPDATE STAFF
           SET EMPNUM = 'E1' WHERE EMPNUM = 'e1';
      if (SQLCODE < 0) i = i + 1;
      printf("\n 4. SQLCODE less than 0 is a pass.  SQLCODE = %ld", SQLCODE);
      
      EXEC SQL INSERT INTO WORKS (EMPNUM,PNUM)
           VALUES ('e1','p2');
      if (SQLCODE == 0) i = i + 1;
      printf("\n 5. SQLCODE = 0 is a pass.  SQLCODE = %ld", SQLCODE);
   
      EXEC SQL INSERT INTO WORKS (EMPNUM,PNUM)
           VALUES ('E1','p2');
      if (SQLCODE == 0) i = i + 1;
      printf("\n 6. SQLCODE = 0 is a pass.  SQLCODE = %ld", SQLCODE);
  
      EXEC SQL INSERT INTO WORKS (EMPNUM,PNUM) 
           VALUES ('E1','P2');
      if (SQLCODE < 0) i = i + 1;
      printf("\n 7. SQLCODE less than 0 is a pass.  SQLCODE = %ld", SQLCODE);
     
      EXEC SQL INSERT INTO WORKS (EMPNUM,PNUM)
           VALUES ('e1', 'P2');
      if (SQLCODE == 0) i = i + 1;
      printf("\n 8. SQLCODE = 0 is a pass.  SQLCODE = %ld", SQLCODE);
     
      EXEC SQL UPDATE WORKS
           SET EMPNUM = 'E1'
           WHERE PNUM = 'P5' AND EMPNUM = 'E4';
      if (SQLCODE < 0) i = i + 1;
      printf("\n 9. SQLCODE less than 0 is a pass.  SQLCODE = %ld", SQLCODE);

      EXEC SQL UPDATE WORKS
           SET EMPNUM = 'e1'
           WHERE PNUM = 'P5' AND EMPNUM = 'E4';
      if (SQLCODE == 0) i = i + 1;
      printf("\n 10. SQLCODE = 0 is a pass.  SQLCODE = %ld", SQLCODE);

      EXEC SQL UPDATE WORKS
           SET PNUM = 'P4'
           WHERE PNUM = 'P2' AND EMPNUM = 'E4';
      if (SQLCODE < 0) i = i + 1;
      printf("\n 11. SQLCODE less than 0 is a pass.  SQLCODE = %ld", SQLCODE);

      EXEC SQL UPDATE WORKS
           SET PNUM = 'p4'
           WHERE PNUM = 'P2' AND EMPNUM = 'E4';
      if (SQLCODE == 0) i = i + 1;
      printf("\n 12. SQLCODE = 0 is a pass.  SQLCODE = %ld", SQLCODE);

      EXEC SQL ROLLBACK WORK;

      printf("\n\n\n The correct answer is i = 12");
      printf("\n Your answer is i = %ld", i);    

      if (i == 12)
        {
        printf("\n\n                  *** pass ***");
        EXEC SQL INSERT INTO TESTREPORT
        VALUES('0451','pass','PC');
        }
      else
        {
        printf("\n\n        dml079.pc  *** fail ***");
        EXEC SQL INSERT INTO TESTREPORT
        VALUES('0451','fail','PC');
          errcnt = errcnt + 1;
        }

      printf("\n\n\n\n");
      EXEC SQL COMMIT WORK;
      printf("\n=====================================================");

/******************** END TEST0451 ********************/

/******************** BEGIN TEST0452 ********************/

      i=0;
      j=0;

      printf("\n                    TEST0452                  \n");
      printf("  Order of precedence, Left to Right, in UNION [ALL] \n");
      printf("X3.135-1989 sec. 8.3 GR 2) b) <query exp> and <query term>\n");
      printf("     - - - - - - - - - - - - - - - - - - -\n\n");

      printf("   *** FOR (SELECT EMPNAME FROM STAFF )\n");
      printf("   ***     UNION \n");
      printf("   ***     SELECT EMPNAME FROM STAFF \n");
      printf("   ***     UNION ALL \n");
      printf("   ***     SELECT EMPNAME FROM STAFF\n\n\n");

      printf("   *** FOR (SELECT EMPNAME FROM STAFF )\n");
      printf("   ***     UNION ALL \n");
      printf("   ***     SELECT EMPNAME FROM STAFF \n");
      printf("   ***     UNION \n");
      printf("   ***     SELECT EMPNAME FROM STAFF\n");

      EXEC SQL DECLARE X1 CURSOR
        FOR SELECT EMPNAME FROM STAFF
             UNION
             SELECT EMPNAME FROM STAFF
             UNION ALL 
             SELECT EMPNAME FROM STAFF;

      EXEC SQL DECLARE X2 CURSOR
        FOR SELECT EMPNAME FROM STAFF
             UNION ALL
             SELECT EMPNAME FROM STAFF
             UNION
             SELECT EMPNAME FROM STAFF;
 
      EXEC SQL OPEN X1;
      
      for (ii=1;ii<16;ii++)
      {
      EXEC SQL FETCH X1 INTO :EMPNM1;
      if (SQLCODE == 0)
        {
         i=ii;
        }
      }

      EXEC SQL CLOSE X1;

      EXEC SQL OPEN X2;
 
      for (jj=1;jj<16;jj++)
      {
      EXEC SQL FETCH X2 INTO :EMPNM1;
      if (SQLCODE == 0)
        {
          j=jj;
        }
      }

      EXEC SQL CLOSE X2;

      printf("\n\nThe correct answer is i=10 and j=5  ");
      printf("\nYour answer is i=%ld   j=%ld \n",i,j);
      if ((i == 10) && (j == 5))
        {
        printf("\n\n                  *** pass ***");
              EXEC SQL INSERT INTO TESTREPORT
        VALUES('0452','pass','PC');
        }
      else
        {
        printf("\n\n        dml079.pc  *** fail ***");
        EXEC SQL INSERT INTO TESTREPORT
        VALUES('0452','fail','PC');
          errcnt = errcnt + 1;
        }

      printf("\n\n\n\n");
      EXEC SQL COMMIT WORK;
      printf("\n=====================================================");

/******************** END TEST0452 ********************/

/******************** BEGIN TEST0453 ********************/

printf("\n                      TEST0453          \n");
printf("     NULL with empty subquery in ALL, SOME, ANY\n");
printf(" ref. X3.135-1989 5.16, GR 2a and 2d empty subquery <null>\n");
printf("--------------------------------------------------------------\n"); 

count1 = -7;
count2 = -7;
count3 = -7;
count4 = -7;
count5 = -7;
count6 = -7;
flag1 = 0;
flag2 = 0;

EXEC SQL UPDATE PROJ
  SET CITY = NULL WHERE PNAME = 'IRM';

EXEC SQL SELECT COUNT(*) INTO :count1 
  FROM PROJ
  WHERE CITY IS NULL;
if (count1 != 1)
  {
    flag1 = 1;
    printf("Failed to set city to NULL for IRM \n\n");
  }

EXEC SQL SELECT COUNT(*) INTO :count1
  FROM PROJ
  WHERE CITY = ALL (SELECT CITY
                    FROM STAFF
                    WHERE EMPNUM = 'E8');

EXEC SQL SELECT COUNT(*) INTO :count2
  FROM PROJ
  WHERE CITY <> ALL (SELECT CITY
                     FROM STAFF
                     WHERE EMPNUM = 'E8');

EXEC SQL SELECT COUNT(*) INTO :count3
  FROM PROJ
  WHERE CITY = ANY (SELECT CITY
                    FROM STAFF
                    WHERE EMPNUM = 'E8');

EXEC SQL SELECT COUNT(*) INTO :count4
  FROM PROJ
  WHERE CITY <> ANY (SELECT CITY
                     FROM STAFF
                     WHERE EMPNUM = 'E8');

EXEC SQL SELECT COUNT(*) INTO :count5
  FROM PROJ
  WHERE CITY = SOME (SELECT CITY
                     FROM STAFF
                     WHERE EMPNUM = 'E8');

EXEC SQL SELECT COUNT(*) INTO :count6
  FROM PROJ
  WHERE CITY <> SOME (SELECT CITY
                      FROM STAFF
                      WHERE EMPNUM = 'E8');

EXEC SQL ROLLBACK WORK;


printf(" The correct answers are:\n");
printf("  count1 = 6, count2 = 6, count3 = 0\n");
printf("  count4 = 0, count5 = 0, count6 = 0\n");
printf("\n");
printf(" Your answers are:\n");
printf("  count1 = %ld, count2 = %ld, count3 = %ld\n",count1,count2,count3);
printf("  count4 = %ld, count5 = %ld, count6 = %ld\n",count4,count5,count6);

if ((count1 != 6) || (count2 != 6) || (count3 != 0))
  flag1 = 1;

if ((count4 != 0) || (count5 != 0) || (count6 != 0))
  flag2 = 1;

if ((flag1 == 0) && (flag2 == 0))
  {
     printf("\n\n                   *** pass *** ");
     EXEC SQL INSERT INTO TESTREPORT
       VALUES('0453','pass','PC');
  }
else
  {
     printf("\n\n         dml079.pc  *** fail *** ");
     EXEC SQL INSERT INTO TESTREPORT
       VALUES('0453','fail','PC');
          errcnt = errcnt + 1;
  }
printf("\n");
EXEC SQL COMMIT WORK;
printf("\n==================================================");

/******************** END TEST0453 ********************/

exit(errcnt);

}

/*  EMBEDDED C (file "DML094.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1993/07/08 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  DML094.PC                                                    */
/*  WRITTEN BY:  David W. Flater                                 */
/*                                                               */
/*  This routine tests the regular old CHAR data type in         */
/*  Dynamic SQL -- blank padding, that sort of thing.  To run    */
/*  this test, you must support features 1, 3, and 10 for TSQL   */
/*  as listed in FIPS PUB 127-2.                                 */
/*                                                               */
/*  REFERENCES                                                   */
/*    FIPS PUB 127-2 14.1 Transitional SQL                       */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
char x1[11];
char x2[2];
char x3[11];
char x4[16];
char x5[5];
     char dstmt[51];
     char longst[241];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"FLATER            ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, dml094.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0567 ********************/
flag = 1;

     printf("                  TEST0567 \n");
     printf("         CHAR type in Dynamic SQL\n");
     printf("References:\n");
     printf("    FIPS PUB 127-2 14.1 Transitional SQL features 1, 3, 10\n");
     printf("    ANSI SQL-1992 6.1 <data type>\n");
     printf("                  12.4 Calls to a <procedure>\n");
     printf("                  9  Data assignment rules\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

     /* This is here to avoid language-dependent problems. */
     EXEC SQL DELETE FROM CONCATBUF;
     EXEC SQL INSERT INTO CONCATBUF VALUES (
       'CREATE TABLE CH1 ('          ||
       '  CH1A CHARACTER (10),'      ||
       '  CH1B CHARACTER,'           ||
       '  CH1C CHAR (10))'
     );
     EXEC SQL SELECT ZZ INTO :longst FROM CONCATBUF;
     longst[240] = '\0';

     printf("longst=\"%s\"\n", longst);

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("EXECUTE IMMEDIATE :longst;\n");
EXEC SQL EXECUTE IMMEDIATE :longst;

CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("dstmt=\"INSERT INTO CH1 VALUES ('FOO', '', '0123456789')\"\n");
     strcpy (dstmt,
     "INSERT INTO CH1 VALUES ('FOO', '', '0123456789')  ");

printf("EXECUTE IMMEDIATE :dstmt;\n");
EXEC SQL EXECUTE IMMEDIATE :dstmt;

CHCKOK ();
printf("\n");

printf("dstmt=\"SELECT CH1A, CH1B, CH1C FROM CH1\"\n");
     strcpy (dstmt,
     "SELECT CH1A, CH1B, CH1C FROM CH1                  ");

printf("PREPARE BLAT1 FROM :dstmt;\n");
EXEC SQL PREPARE BLAT1 FROM :dstmt;

CHCKOK ();
printf("\n");

printf("DECLARE BLAT2 CURSOR FOR BLAT1;\n");
EXEC SQL DECLARE BLAT2 CURSOR FOR BLAT1;

printf("\n");

printf("OPEN BLAT2;\n");
EXEC SQL OPEN BLAT2;

CHCKOK ();
printf("\n");

strcpy (x1, "xxxxxxxxxx");
strcpy (x2, "x");
strcpy (x3, "xxxxxxxxxx");

printf("FETCH BLAT2 INTO :x1, :x2, :x3;\n");
EXEC SQL FETCH BLAT2 INTO :x1, :x2, :x3;

x1[10] = '\0';
x2[1] = '\0';
x3[10] = '\0';

CHCKOK ();
printf("\n");

printf("CLOSE BLAT2;\n");
EXEC SQL CLOSE BLAT2;

CHCKOK ();
printf("\n");

/* 9.1 GR.3.c */

printf ("x1 should be 'FOO       '; its value is '%s'\n", x1);
printf ("x2 should be ' '; its value is '%s'\n", x2);
printf ("x3 should be '0123456789'; its value is '%s'\n\n", x3);

if (strcmp (x1, "FOO       ") != 0)
  flag = 0;
if (strcmp (x2, " ") != 0)
  flag = 0;
if (strcmp (x3, "0123456789") != 0)
  flag = 0;

/* 9.1 GR.3.e */

printf("OPEN BLAT2;\n");
EXEC SQL OPEN BLAT2;

CHCKOK ();
printf("\n");

strcpy (x1, "xxxxxxxxxx");
strcpy (x2, "x");
strcpy (x5, "xxxx");

printf("x5 is too short.\n");
printf("FETCH BLAT2 INTO :x1, :x2, :x5;\n");
EXEC SQL FETCH BLAT2 INTO :x1, :x2, :x5;

x1[10] = '\0';
x2[1] = '\0';
x5[4] = '\0';

printf("SQLCODE should be >= 0; its value is %ld\n", SQLCODE);
if (SQLCODE < 0)
  flag = 0;

SQLSTATE[5] = '\0';
printf("SQLSTATE should be 01004; its value is %s\n\n", SQLSTATE);
if (strncmp (SQLSTATE, "01004", 5) != 0)
  flag = 0;

printf("CLOSE BLAT2;\n");
EXEC SQL CLOSE BLAT2;

CHCKOK ();
printf("\n");

printf ("x1 should be 'FOO       '; its value is '%s'\n", x1);
printf ("x2 should be ' '; its value is '%s'\n", x2);
printf ("x5 should be '0123'; its value is '%s'\n\n", x5);

if (strcmp (x1, "FOO       ") != 0)
  flag = 0;
if (strcmp (x2, " ") != 0)
  flag = 0;
if (strcmp (x5, "0123") != 0)
  flag = 0;

/* 9.2 GR.3.b.ii */

     EXEC SQL DELETE FROM CONCATBUF;
     EXEC SQL INSERT INTO CONCATBUF VALUES (
       'INSERT INTO CH1 VALUES (''FOO'', '   ||
       '  ''F'', ''LITTLETOOLONG'')'
     );
     EXEC SQL SELECT ZZ INTO :longst FROM CONCATBUF;
     longst[240] = '\0';

     printf("longst=\"%s\"\n", longst);

printf("EXECUTE IMMEDIATE :longst;\n");
EXEC SQL EXECUTE IMMEDIATE :longst;

printf ("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;

SQLSTATE[5] = '\0';
printf ("SQLSTATE should be 22001; its value is %s\n\n", SQLSTATE);
/* The subclass is significant! */
if (strncmp (SQLSTATE, "22001", 5) != 0)
  flag = 0;

/* 9.2 GR.3.b.i */

printf("dstmt=\"DELETE FROM CH1\"\n");
     strcpy (dstmt,
     "DELETE FROM CH1                                   ");

printf("EXECUTE IMMEDIATE :dstmt;\n");
EXEC SQL EXECUTE IMMEDIATE :dstmt;

     EXEC SQL DELETE FROM CONCATBUF;
     EXEC SQL INSERT INTO CONCATBUF VALUES (
       'INSERT INTO CH1 VALUES (''FOO'', '   ||
       '  ''F'', ''BLANKS       '')'
     );
     EXEC SQL SELECT ZZ INTO :longst FROM CONCATBUF;
     longst[240] = '\0';

     printf("longst=\"%s\"\n", longst);

printf("EXECUTE IMMEDIATE :longst;\n");
EXEC SQL EXECUTE IMMEDIATE :longst;

CHCKOK ();
printf("\n");

printf("OPEN BLAT2;\n");
EXEC SQL OPEN BLAT2;

CHCKOK ();
printf("\n");

strcpy (x1, "xxxxxxxxxx");
strcpy (x2, "x");
strcpy (x3, "xxxxxxxxxx");

printf("FETCH BLAT2 INTO :x1, :x2, :x3;\n");
EXEC SQL FETCH BLAT2 INTO :x1, :x2, :x3;

x1[10] = '\0';
x2[1] = '\0';
x3[10] = '\0';

CHCKOK ();
printf("\n");

printf("CLOSE BLAT2;\n");
EXEC SQL CLOSE BLAT2;

CHCKOK ();
printf("\n");

printf ("x1 should be 'FOO       '; its value is '%s'\n", x1);
printf ("x2 should be 'F'; its value is '%s'\n", x2);
printf ("x3 should be 'BLANKS    '; its value is '%s'\n\n", x3);

if (strcmp (x1, "FOO       ") != 0)
  flag = 0;
if (strcmp (x2, "F") != 0)
  flag = 0;
if (strcmp (x3, "BLANKS    ") != 0)
  flag = 0;

printf("dstmt=\"DELETE FROM CH1\"\n");
     strcpy (dstmt,
     "DELETE FROM CH1                                   ");

printf("EXECUTE IMMEDIATE :dstmt;\n");
EXEC SQL EXECUTE IMMEDIATE :dstmt;

printf("strcpy (x1, \"FOO\");\n");
printf("strcpy (x2, \"\");\n");
printf("strcpy (x3, \"0123456789\");\n");

strcpy (x1, "FOO");
strcpy (x2, "");
strcpy (x3, "0123456789");

printf("dstmt=\"INSERT INTO CH1 VALUES (?, ?, ?)\"\n");
     strcpy (dstmt,
     "INSERT INTO CH1 VALUES (?, ?, ?)                  ");

printf("PREPARE BLAT3 FROM :dstmt;\n");
EXEC SQL PREPARE BLAT3 FROM :dstmt;

CHCKOK ();
printf("\n");

printf("EXECUTE BLAT3 USING :x1, :x2, :x3;\n");
EXEC SQL EXECUTE BLAT3 USING :x1, :x2, :x3;

CHCKOK ();
printf("\n");

printf("OPEN BLAT2;\n");
EXEC SQL OPEN BLAT2;

CHCKOK ();
printf("\n");

strcpy (x1, "xxxxxxxxxx");
strcpy (x2, "x");
strcpy (x3, "xxxxxxxxxx");

printf("FETCH BLAT2 INTO :x1, :x2, :x3;\n");
EXEC SQL FETCH BLAT2 INTO :x1, :x2, :x3;

x1[10] = '\0';
x2[1] = '\0';
x3[10] = '\0';

CHCKOK ();
printf("\n");

printf("CLOSE BLAT2;\n");
EXEC SQL CLOSE BLAT2;

CHCKOK ();
printf("\n");

printf ("x1 should be 'FOO       '; its value is '%s'\n", x1);
printf ("x2 should be ' '; its value is '%s'\n", x2);
printf ("x3 should be '0123456789'; its value is '%s'\n\n", x3);

if (strcmp (x1, "FOO       ") != 0)
  flag = 0;
if (strcmp (x2, " ") != 0)
  flag = 0;
if (strcmp (x3, "0123456789") != 0)
  flag = 0;

/* 9.2 GR.3.e.ii */

printf("strcpy (x4, \"LITTLETOOLONG\");\n");
strcpy (x4, "LITTLETOOLONG");

printf("dstmt=\"INSERT INTO CH1 VALUES ('FOO', 'FOO', ?)\"\n");
     strcpy (dstmt,
     "INSERT INTO CH1 VALUES ('FOO', 'FOO', ?)          ");

printf("PREPARE BLAT4 FROM :dstmt;\n");
EXEC SQL PREPARE BLAT4 FROM :dstmt;

CHCKOK ();
printf("\n");

printf("EXECUTE BLAT4 USING :x4;\n");
EXEC SQL EXECUTE BLAT4 USING :x4;

printf ("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;

SQLSTATE[5] = '\0';
printf ("SQLSTATE should be 22001; its value is %s\n\n", SQLSTATE);
/* The subclass is significant! */
if (strncmp (SQLSTATE, "22001", 5) != 0)
  flag = 0;

/* 9.2 GR.3.b.i */

printf("dstmt=\"DELETE FROM CH1\"\n");
     strcpy (dstmt,
     "DELETE FROM CH1                                   ");

printf("EXECUTE IMMEDIATE :dstmt;\n");
EXEC SQL EXECUTE IMMEDIATE :dstmt;

printf("strcpy (x4, \"BLANKS       \");\n");
strcpy (x4, "BLANKS       ");

printf("EXECUTE BLAT4 USING :x4;\n");
EXEC SQL EXECUTE BLAT4 USING :x4;

CHCKOK ();
printf("\n");

printf("OPEN BLAT2;\n");
EXEC SQL OPEN BLAT2;

CHCKOK ();
printf("\n");

strcpy (x1, "xxxxxxxxxx");
strcpy (x2, "x");
strcpy (x3, "xxxxxxxxxx");

printf("FETCH BLAT2 INTO :x1, :x2, :x3;\n");
EXEC SQL FETCH BLAT2 INTO :x1, :x2, :x3;

x1[10] = '\0';
x2[1] = '\0';
x3[10] = '\0';

CHCKOK ();
printf("\n");

printf("CLOSE BLAT2;\n");
EXEC SQL CLOSE BLAT2;

CHCKOK ();
printf("\n");

printf ("x1 should be 'FOO       '; its value is '%s'\n", x1);
printf ("x2 should be 'F'; its value is '%s'\n", x2);
printf ("x3 should be 'BLANKS    '; its value is '%s'\n\n", x3);

if (strcmp (x1, "FOO       ") != 0)
  flag = 0;
if (strcmp (x2, "F") != 0)
  flag = 0;
if (strcmp (x3, "BLANKS    ") != 0)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;

CHCKOK ();
printf("\n");

printf("dstmt=\"DROP TABLE CH1 CASCADE\"\n");
     strcpy (dstmt,
     "DROP TABLE CH1 CASCADE                            ");

printf("EXECUTE IMMEDIATE :dstmt;\n");
EXEC SQL EXECUTE IMMEDIATE :dstmt;

CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;

CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0567','pass','PC');
       }
     else
       {
          printf("\n\n       dml094.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0567','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0567 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

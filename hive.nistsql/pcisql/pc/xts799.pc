/*  EMBEDDED C (file " XTS799.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS799.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  COALESCE with three <value expression>s                      */
/*                                                               */
/*  REFERENCES                                                   */
/*    6.9 FT.2 -- <case abbreviation>                            */
/*    6.9 SR.2                                                   */
/*    6.9 SR.3                                                   */
/*    6.9 LR.2a Raised. Entry SQL restriction which prohibited   */
/*              the use of a <case expression>                   */
/*    6.11 LR.2c Raised. Entry SQL restriction which stated that */
/*               a <value expression primary> should not be a    */
/*               <case expression>                               */
/*    9.3     -- <Set operation result data types>               */ 
/*    9.3 SR.3                                                   */
/*    F#26  -- CASE expression                                   */
/*                                                               */
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 18/12/95                    */
/*         Print timestamp                                       */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*                                                               */
/*  QA STATUS : QA CHECK                                         */
/*                                                               */
/*  Revised by DWF 1996-02-28                                    */
/*    Fixed coding rule violations (variable names, field widths)*/
/*    Removed status checks after cursor definitions             */
/*    Fixed printout and pass criteria                           */
/*    Initialized variables as required by test code             */
/*    Fixed string lengths                                       */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long  SQLCODE;
char  SQLSTATE[6];
char  uid[19];
char  uidx[19];
long  hmpnum;
long  numhst;
char  strhst[21];
short indic1;
short indic2;
char  hv1[21];
long  hv2;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts799.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run:  %s\n", ctime(&cal));

/******************** BEGIN TEST7003 ********************/
flag = 1;
printf("                   TEST7003  \n");
printf("    COALESCE with three <value expression>s  \n"); 
printf("  References:\n");
printf("    6.9  FT.2 -- <case abbreviation>\n");
printf("    6.9  SR.2\n");
printf("    6.9  SR.3\n");
printf("    6.9  LR.2a Raised. Entry SQL restriction which prohibited\n");
printf("                 the use of a <case expression>\n");
printf("    6.11 LR.2c Raised. Entry SQL restriction which stated that\n");
printf("                 a <value expression primary> should not be a\n");    
printf("                 <case expression>                             \n"); 
printf("    9.3  -- <Set operation result data types>  \n"); 
printf("    9.3  SR.3\n");
printf("    F#26 -- CASE expression\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Populate the table CL_EMPLOYEE with 5 rows */
SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* Ensure that the table CL_EMPLOYEE is empty */
printf("DELETE FROM CL_EMPLOYEE;\n");
EXEC SQL DELETE FROM CL_EMPLOYEE;

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("INSERT INTO CL_EMPLOYEE VALUES(5000,NULL,NULL,NULL,NULL,NULL,NULL);\n");
EXEC SQL INSERT INTO CL_EMPLOYEE VALUES(5000,NULL,NULL,NULL,NULL,NULL,NULL);
CHCKOK();
printf("\n");

printf("INSERT INTO CL_EMPLOYEE VALUES(6000,NULL,'CRETA','JIM',NULL,4,130);\n");
EXEC SQL INSERT INTO CL_EMPLOYEE VALUES(6000,NULL,'CRETA','JIM',NULL,4,130);
CHCKOK();
printf("\n");

printf("INSERT INTO CL_EMPLOYEE VALUES(7000,'P2',NULL,NULL,NULL,NULL,150);\n");
EXEC SQL INSERT INTO CL_EMPLOYEE VALUES(7000,'P2',NULL,NULL,NULL,NULL,150);
CHCKOK();
printf("\n");

printf("INSERT INTO CL_EMPLOYEE");
printf(" VALUES(8000,'P2','HALKIDA',NULL,30000,6,NULL);\n");
EXEC SQL INSERT INTO CL_EMPLOYEE 
         VALUES(8000,'P2','HALKIDA',NULL,30000,6,NULL);
CHCKOK();
printf("\n");

printf("INSERT INTO CL_EMPLOYEE");
printf(" VALUES(9000,'P1','SANTORINH','ANDREWS',15000,5,125);\n");
EXEC SQL INSERT INTO CL_EMPLOYEE
         VALUES(9000,'P1','SANTORINH','ANDREWS',15000,5,125);
CHCKOK();
printf("\n");

printf("DECLARE a CURSOR FOR SELECT EMPNUM,\n"); 
printf("COALESCE(SALARY,GRADE,HOURS),\n"); 
printf("COALESCE(EMPNAME,LOC,DEPTNO) FROM CTS1.CL_EMPLOYEE\n");
printf("ORDER BY EMPNUM;\n\n");
EXEC SQL DECLARE a CURSOR FOR SELECT EMPNUM, COALESCE(SALARY,GRADE,HOURS),
         COALESCE(EMPNAME,LOC,DEPTNO) 
         FROM CTS1.CL_EMPLOYEE
         ORDER BY EMPNUM;

printf("OPEN a;\n");
EXEC SQL OPEN a;
CHCKOK();
printf("\n");

/* initialise host variables */
hmpnum = 0;
numhst = 0;
strcpy(strhst,"xxxxxxxxxxxxxxxxxxxx");
indic1 = 99; 
indic2 = 99;

/* start fetching rows from the table five in total     */
printf("FETCH a INTO :hmpnum,  :numhst:indic2 ,:strhst:indic1;\n");
EXEC SQL FETCH a INTO :hmpnum, :numhst:indic2 ,:strhst:indic1; 
CHCKOK();
printf("HMPNUM  should be 5000; its value is %ld \n",hmpnum);
printf("indic1 should be -1; its value is %d\n", indic1);
printf("indic2 should be -1; its value is %d\n", indic2);
if ( hmpnum != 5000  || indic2 != -1 || indic1 != -1 )
    flag = 0;
printf("\n");

/* initialise host variables */
hmpnum = 0;
numhst = 0;
strcpy(strhst,"xxxxxxxxxxxxxxxxxxxx");
indic1 = 99; 
indic2 = 99;

/* fetch the second row of the table */
printf("FETCH a INTO :hmpnum,  :numhst ,:strhst;\n");
EXEC SQL FETCH a INTO :hmpnum, :numhst ,:strhst; 
CHCKOK();
printf("HMPNUM  should be 6000; its value is %ld \n",hmpnum);
printf("NUMHST should be    4; its value is %ld\n",numhst);
printf("STRHST should be  JIM; its value is %s\n",strhst);
if ( hmpnum != 6000 || numhst != 4 || strncmp(strhst,"JIM",3) != 0 )
    flag = 0;
printf("\n");

/* initialise host variables */
hmpnum = 0;
numhst = 0;
strcpy(strhst,"xxxxxxxxxxxxxxxxxxxx");
indic1 = 99; 
indic2 = 99;

/* fetch the third row of the table */
printf("FETCH a INTO :hmpnum,  :numhst ,:strhst;\n");
EXEC SQL FETCH a INTO :hmpnum, :numhst ,:strhst; 
CHCKOK();
printf("HMPNUM  should be 7000; its value is %ld \n",hmpnum);
printf("NUMHST should be  150; its value is %ld\n",numhst);
printf("STRHST should be   P2; its value is %s\n",strhst);
if ( hmpnum != 7000 || numhst != 150 ||strncmp(strhst,"P2",2) != 0 )
    flag = 0;
printf("\n");

/* initialise host variables */
hmpnum = 0;
numhst = 0;
strcpy(strhst,"xxxxxxxxxxxxxxxxxxxx");
indic1 = 99; 
indic2 = 99;

/* fetch the fourth row of the table */
printf("FETCH a INTO :hmpnum,  :numhst ,:strhst;\n");
EXEC SQL FETCH a INTO :hmpnum, :numhst ,:strhst; 
CHCKOK();
printf("HMPNUM  should be    8000; its value is %ld \n",hmpnum);
printf("NUMHST should be   30000; its value is %ld\n",numhst);
printf("STRHST should be HALKIDA; its value is %s\n",strhst);
if (hmpnum != 8000 || numhst != 30000 ||strncmp(strhst,"HALKIDA",7) != 0)
    flag = 0;
printf("\n");

/* initialise host variables */
hmpnum = 0;
numhst = 0;
strcpy(strhst,"xxxxxxxxxxxxxxxxxxxx");
indic1 = 99; 
indic2 = 99;

/* fetch the last row of the table */
printf("FETCH a INTO :hmpnum,  :numhst ,:strhst;\n");
EXEC SQL FETCH a INTO :hmpnum, :numhst ,:strhst; 
CHCKOK();
printf("HMPNUM  should be    9000; its value is %ld \n",hmpnum);
printf("NUMHST should be   15000; its value is %ld\n",numhst);
printf("STRHST should be ANDREWS; its value is %s\n",strhst);
if (hmpnum != 9000 || numhst != 15000 ||strncmp(strhst,"ANDREWS",7) != 0)
    flag = 0;
printf("\n");

/* initialise host variables */
hmpnum = 0;
numhst = 50000;
strcpy(strhst,"ATHENS              ");
strcpy(hv1,"xxxxxxxxxxxxxxxxxxxx");
hv2 = 0;

printf("SELECT EMPNUM, COALESCE(DEPTNO,LOC, :strhst), \n");
printf("COALESCE(SALARY, :numhst, GRADE) \n");
printf("INTO :hmpnum, :hv1, :hv2 \n");
printf("FROM CL_EMPLOYEE \n");   
printf("WHERE EMPNUM = 5000;\n");
EXEC SQL SELECT EMPNUM, COALESCE(DEPTNO,LOC,:strhst), 
         COALESCE(SALARY,:numhst,GRADE) INTO :hmpnum, :hv1, :hv2
         FROM CL_EMPLOYEE
         WHERE EMPNUM = 5000;
CHCKOK();
printf("HMPNUM should be   5000; its value is %ld \n",hmpnum);
printf("hv1    should be ATHENS; its value is %s\n",hv1);
printf("hv2    should be  50000; its value is %ld\n",hv2);
if (hmpnum != 5000 || strncmp(hv1,"ATHENS",6) != 0 || hv2 != 50000 )
   flag = 0;
printf("\n");

/* initialise host variables */
hmpnum = 0;
strcpy(hv1,"xxxxxxxxxxxxxxxxxxxx");
hv2 = 0;

/********** 2nd select statement: single row **************/
printf("SELECT EMPNUM, COALESCE('NICKOS',DEPTNO,LOC), \n");
printf("COALESCE(SALARY, GRADE,47000) \n");
printf("INTO :hmpnum, :hv1, :hv2 \n");
printf("FROM CL_EMPLOYEE \n");   
printf("WHERE EMPNUM = 7000;\n");
EXEC SQL SELECT EMPNUM, COALESCE('NICKOS',DEPTNO,LOC), 
         COALESCE(SALARY,GRADE,47000) INTO :hmpnum, :hv1, :hv2
         FROM CL_EMPLOYEE
         WHERE EMPNUM = 7000;
CHCKOK();
printf("HMPNUM should be   7000; its value is %ld \n",hmpnum);
printf("hv1    should be NICKOS; its value is %s\n",hv1);
printf("hv2    should be  47000; its value is %ld\n",hv2);
if (hmpnum != 7000 || strncmp(hv1,"NICKOS",6) != 0 || hv2 != 47000 )
   flag = 0;
printf("\n");

/* initialise host variables */
hmpnum = 0;
numhst = 12000;
strcpy(strhst,"PAGRATI             ");
strcpy(hv1,"xxxxxxxxxxxxxxxxxxxx");
hv2 = 0;

printf("SELECT EMPNUM, COALESCE(EMPNAME,:strhst,LOC), \n");
printf("COALESCE(:numhst, SALARY,GRADE) \n");
printf("INTO :hmpnum, :hv1, :hv2 \n");
printf("FROM CL_EMPLOYEE \n");   
printf("WHERE EMPNUM = 8000;\n");
EXEC SQL SELECT EMPNUM, COALESCE(EMPNAME,:strhst,LOC), 
         COALESCE(:numhst,SALARY,GRADE) INTO :hmpnum, :hv1, :hv2
         FROM CL_EMPLOYEE
         WHERE EMPNUM = 8000;
CHCKOK();
printf("HMPNUM should be    8000; its value is %ld \n",hmpnum);
printf("hv1    should be PAGRATI; its value is %s\n",hv1);
printf("hv2    should be   12000; its value is %ld\n",hv2);
if (hmpnum != 8000 || strncmp(hv1,"PAGRATI",7) != 0 || hv2 != 12000 )
   flag = 0;
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       xts799.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7003','pass','PC');
       }
     else
       {
          printf("\n\n       xts799.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7003','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7003 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

/*  EMBEDDED C (file "YTS770.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS770.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  This routine tests Access to DOMAIN_CONSTRAINTS              */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    21.2.6   DOMAIN_CONSTRAINTS view                           */
/*    11.21    <domain definition>                               */
/*    F#35     Intermediate information schema                   */
/*    F#17     Multiple schemas per user                         */
/*    F#25     Domain definition                                 */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*  Initial review comments from DWF addressed 27/10/95          */
/*                                                               */
/*  QA Status: Full FC                                           */ 
/*                                                               */
/*  Revised by DWF 1996-03-12                                    */
/*    Added rollback after authid                                */
/*    Cleanup                                                    */
/*    Fixed bad printf format                                    */
/*    Fixed pass criteria                                        */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short co;
char DOMN[129];
char DOMS[129];
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
short    i;
long     flag;
long     flag2;
long     flag3;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts770.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7552 ********************/
flag = 1;
flag2 = 1;
flag3 = 1;

     printf("                  TEST7552 \n");
     printf("   Access to DOMAIN_CONSTRAINTS view\n");
     printf("References:\n");
     printf("    21.2.6   DOMAIN_CONSTRAINTS view \n");
     printf("    11.21    <domain definition>\n");
     printf("    F#35     Intermediate information schema\n");
     printf("    F#17     Multiple schemas per user\n");
     printf("    F#25     Domain definition\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* prepare database for the test */
printf("DROP DOMAIN cts1b.esal CASCADE;\n");
EXEC SQL DROP DOMAIN cts1b.esal CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* initialise variables */

for (i = 0; i < 128; i++)
{
   DOMN[i] = 'x';
   DOMS[i] = 'x';
}
DOMN[128] = '\0';
DOMS[128] = '\0';


/* declare cursor to return rows from */
/* DOMAIN_CONSTRAINTS view */
/* WHERE clause added */
/* - ensures program still works if schema changes */

printf("DECLARE data770 CURSOR FOR\n");
printf("SELECT DOMAIN_SCHEMA, DOMAIN_NAME\n");
printf("FROM INFORMATION_SCHEMA.DOMAIN_CONSTRAINTS\n");
printf("WHERE DOMAIN_NAME IN ('DOMSMALL', 'ESAL');\n\n");
EXEC SQL DECLARE data770 CURSOR FOR
SELECT DOMAIN_SCHEMA, DOMAIN_NAME
FROM INFORMATION_SCHEMA.DOMAIN_CONSTRAINTS
WHERE DOMAIN_NAME IN ('DOMSMALL', 'ESAL');

printf("OPEN data770;\n");
EXEC SQL OPEN data770;
CHCKOK ();

P102:
printf("\n");
printf("FETCH data770 INTO :DOMS, :DOMN;\n");
EXEC SQL FETCH data770 INTO :DOMS, :DOMN;
NOSUBCLASS();
if (strncmp(NORMSQ,"00000",5) != 0)
  goto P101;

printf("Fetch executed successfully\n");
if (strncmp(DOMS,"CTS1B",5) == 0 && strncmp(DOMN,"DOMSMALL",8) == 0)
       {
       flag2 = flag2 - 1;
       printf("Found schema 'CTS1B' domain 'DOMSMALL'\n");
       goto P102;
       }

if (strncmp(DOMS,"CTS1 ",5) == 0 && strncmp(DOMN,"ESAL",4) == 0) 
       {
       printf("Found schema 'CTS1' domain 'ESAL'\n");
       flag3 = flag3 - 1;
       goto P102;
       }

printf("Incorrect schema and domain returned.\n");
printf("Schema is %s and domain is %s\n", DOMS, DOMN);
flag = 0;
goto P102;

P101:
printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
printf ("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (SQLCODE != 100 || strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

/* check both correct values were returned */

if (flag2 != 0 || flag3 != 0)
      {
      printf("Incorrect DOMAIN_CONSTRAINT rows returned.\n\n");
      flag = 0;
      }

/* close the cursor */
printf("CLOSE data770;\n");
EXEC SQL CLOSE data770;
CHCKOK ();
printf("\n");

/* create domain cts1b.esal */
/* same specification as cts1.esal */
/* contains domain constraint */

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("CREATE DOMAIN cts1b.esal AS INTEGER\n");
printf("CHECK  (VALUE<500);\n");
EXEC SQL CREATE DOMAIN cts1b.esal AS INTEGER
CHECK  (VALUE<500);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* check that INFORMATION_SCHEMA.DOMAIN_CONSTRAINTS refers */
/* to cts1b.esal                                            */

co = 99;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.DOMAIN_CONSTRAINTS\n");
printf("WHERE DOMAIN_NAME = 'ESAL';\n");

EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.DOMAIN_CONSTRAINTS
WHERE DOMAIN_NAME = 'ESAL';
CHCKOK ();
printf("co should be 2; its value is %d\n\n", co);
if (co != 2)
   flag = 0;

/* Drop the new domain */

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("DROP DOMAIN cts1b.esal CASCADE;\n");
EXEC SQL DROP DOMAIN cts1b.esal CASCADE;
CHCKOK ();
printf("\n");

/* commit work */

printf("COMMIT WORK\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* check the dropped domain is no longer */
/* referenced in DOMAIN_CONSTRAINTS */

co = 99;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.DOMAIN_CONSTRAINTS\n");
printf("WHERE DOMAIN_NAME LIKE 'ESAL%';\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.DOMAIN_CONSTRAINTS
WHERE DOMAIN_NAME LIKE 'ESAL%';
CHCKOK ();
printf("co should be 1; its value is %d\n\n", co);
if (co != 1)
   flag = 0;

/* determine rows in domain constraints which do not */
/* refer to a schema owned by the present */
/* authorisation identifier */

co = 99;
printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.DOMAIN_CONSTRAINTS\n");
printf("WHERE DOMAIN_SCHEMA NOT IN\n");
printf("('CTS1' ,'CTS1B');\n");
EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.DOMAIN_CONSTRAINTS
WHERE DOMAIN_SCHEMA NOT IN
('CTS1','CTS1B');
CHCKOK ();
printf("co should be 0; its value is %d\n\n", co);
if (co != 0)
   flag = 0;

/* ensure database is left in a consistent state */

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("CREATE DOMAIN cts1b.esal AS INTEGER\n");
printf("CHECK  (VALUE>500);\n");
EXEC SQL CREATE DOMAIN cts1b.esal AS INTEGER
CHECK  (VALUE>500);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts770.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7552','pass','PC');
       }
     else
       {
          printf("\n\n       yts770.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7552','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7552 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


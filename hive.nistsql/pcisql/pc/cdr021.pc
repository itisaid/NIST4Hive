/*  EMBEDDED C (file "CDR021.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1987/12/07 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  CDR021.PC                                                    */
/*  WRITTEN BY: SUN DAJUN                                        */
/*                                                               */
/*    THIS ROUTINE TESTS THE REFERENCE INTEGRITY CONSTRAINT FOR  */
/*  SQL.                                                         */
/*                                                               */
/*  REFERENCES                                                   */
/*        AMERICAN NATIONAL STANDARD database language - SQL     */
/*                           with Integrity Enhancement          */
/*                                                               */
/*             SECTION 6.6 <unique constraint definition>        */
/*                <unique constraint definition>::=              */
/*                        <unique specifition>(<unique column    */
/*                        list>)                                 */
/*                 <unique specifition>::= UNIQUE|PRIMARY KEY    */
/*                                                               */
/*             SECTION 6.7 <referential constraint definition>   */
/*                <referential constraint definition>::=         */
/*                      FOREIGN KEY (<referencing columns>)      */
/*                      <references specification>               */
/*                <references specification>::=                  */
/*                      REFERENCES <referenced table and columns>*/
/*                <referencing columns>::=                       */
/*                        <reference column list>                */
/*                <refereced table and columns>::=               */
/*                        <table name>[(<reference column list>  */
/*                <reference column list>::=                     */
/*                        <column name>[{,<column name>}...]     */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>



EXEC SQL BEGIN DECLARE SECTION;
long count1;
char EMPNO1[4];
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long SQLCODE;
int errcnt;
/* date_time declaration */
time_t cal;



long code1;

main()

{
        strcpy(uid,"SUN");
        AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM SUN.ECCO;
if (strncmp(uid,uidx,3) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, cdr021.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));



/******************** BEGIN TEST0378 **********************/
/* This test deletes a row (E1,-,-,-) from PRIMARY KEY    */
/* TABLE -- STAFF_P, but there are such rows (E1,*,*) in   */
/* FOREIGN KEY TABLE -- WORKS_P, this should be an ERROR.   */

printf("\n                     TEST0378             \n");
printf("              REFERENTIAL INTEGRITY    \n");
printf("     SQL with Integrity Enhancement section 6.5,6.6,6.7\n");
printf("     - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("\n");
printf("        DELETE FROM STAFF_P\n");
printf("        WHERE EMPNUM='E1';\n");
printf("\n");
printf("code1 = SQLCODE;\n");
printf("\n");
printf("        SELECT EMPNUM INTO :EMPNO1\n");
printf("        FROM STAFF_P\n");
printf("        WHERE EMPNUM = 'E1';\n");
EXEC SQL DELETE FROM STAFF_P
        WHERE EMPNUM='E1';
code1 = SQLCODE;
strcpy(EMPNO1,"NV");
EXEC SQL SELECT EMPNUM INTO :EMPNO1
        FROM STAFF_P
        WHERE EMPNUM = 'E1';
EXEC SQL ROLLBACK WORK;
printf("        The correct result is code1 not equal to 0\n");
printf("        Your answer is code1=%ld\n",code1);
        if (code1 != 0 && strncmp(EMPNO1,"E1",2) == 0)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0378','pass','PC');
printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0378','fail','PC');
          errcnt = errcnt + 1;
printf("\n\n       cdr021.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;
/****************** END TEST0378 *********************/



/******************** BEGIN TEST0379 ********************/
/* This test update a row or rows on PRIMARY KEY        */
/* column in table STAFF_P, set those rows (E2,*,*,*) to   */
/* (E9,*,*,*),but there are rows (E2,*,*) in     */
/*  FOREIGN TABLE -- WORKS_P, this will bring about an  */
/*  ERROR.                                             */

printf("\n                     TEST0379             \n");
printf("              PRIMARY KEY & FOREIGN KEY    \n");
printf("     SQL with Integrity Enhancement section 6.5,6.6,6.7\n");
printf("     - - - - - - - - - - - - - - - - - - - - - \n\n");
printf("\n");
printf("        UPDATE STAFF_P\n");
printf("        SET EMPNUM='E9'\n");
printf("        WHERE EMPNUM='E2';\n");
printf("code1 = SQLCODE;\n");
printf("\n");
printf("        SELECT COUNT(*) INTO :count1\n");
printf("        FROM STAFF_P\n");
printf("        WHERE EMPNUM = 'E2';\n");
EXEC SQL UPDATE STAFF_P
        SET EMPNUM = 'E9'
        WHERE EMPNUM = 'E2';
code1 = SQLCODE;
EXEC SQL SELECT COUNT(*) INTO :count1
        FROM STAFF_P
        WHERE EMPNUM = 'E2';
EXEC SQL ROLLBACK WORK;
printf("        The correct result is code1 not equal 0\n");
printf("                              count1 = 1\n");
printf("        Your answer is code1=%ld\n",code1);
printf("                              count1 = %ld\n",count1);
if (code1 != 0 && count1 == 1)
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0379','pass','PC');
printf("\n\n                 *** pass ***     ");
       }
     else
       {
       EXEC SQL INSERT INTO TESTREPORT
          VALUES('0379','fail','PC');
          errcnt = errcnt + 1;
printf("\n\n       cdr021.pc  *** fail ***     ");
       }
     printf("\n================================================");

     printf("\n\n\n\n");
     EXEC SQL COMMIT WORK;
/******************** END TEST0379 **************************/



     exit(errcnt);

}




/*  EMBEDDED C (file "XTS722.PC")  */

/* Copyright 1995 National Computing Centre Limited, */
/* and Computer Logic R&D S.A */
/* on behalf of the CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS722.PC     TEST 7022                                     */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  Access to CONSTRAINT_TABLE_USAGE view                        */ 
/*                                                               */
/*  REFERENCES                                                   */
/*    21.2.23 -- CONSTRAINT_TABLE_USAGE view                     */
/*    21.3.18 -- CHECK_COLUMN_USAGE base table                   */
/*    21.3.15 -- REFERENTIAL_CONSTRAINTS base table              */
/*    21.3.13 -- TABLE_CONSTRAINTS base table                    */
/*    F#1     -- Dynamic SQL                                     */
/*    F#2     -- Basic information schema                        */
/*    F#3     -- Basic schema manipulation                       */
/*    F#34    -- Usage tables                                    */
/*                                                               */
/*  DATE LAST ALTERED  14/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 04/12/95                    */
/*                                                               */
/*  QA Status: QA CHECK                                          */
/*                                                               */
/*  Revised by DWF 1/29/96:                                      */
/*    Corrected expected results                                 */
/*    Fixed SDL transactions                                     */
/*    Dynamic SQL broken; replaced with static                   */
/*    Removed extraneous SQL syntax                              */
/*    Changed 722ACONS1 to remove SQL syntax error               */
/*    Harmonized printout with statements executed               */
/*    Fixed foreign key relationship (target wasn't unique)      */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 long coun1;
 long coun2;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
strcpy(uid,"CTS4              ");
AUTHID(uid); 
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts722.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run:  %s\n", ctime(&cal));

/******************** BEGIN TEST7022 ********************/

 flag = 1;
 printf("                  TEST7022\n");
 printf("    Access to CONSTRAINT_TABLE_USAGE view \n");
 printf(" References \n");
 printf("    21.2.23 -- CONSTRAINT_TABLE_USAGE view\n");
 printf("    21.3.18 -- CHECK_COLUMN_USAGE base table \n");
 printf("    21.3.15 -- REFERENTIAL_CONSTRAINTS base table\n");
 printf("    21.3.13 -- TABLE_CONSTRAINTS base table \n");
 printf("    F#2     -- Basic information schema \n");
 printf("    F#3     -- Basic schema manipulation\n");
 printf("    F#34    -- Usage tables         \n");
 printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* initialise host variable */
/* we expect a zero so initialise it to a value <> 0 */
coun1 = 9;

/* Access the CONSTRAINT_TABLE_USAGE view */
printf("SELECT COUNT(*) INTO :coun1\n");
printf("         FROM INFORMATION_SCHEMA.CONSTRAINT_TABLE_USAGE\n");
printf("         WHERE TABLE_SCHEMA = 'CTS4';\n");
EXEC SQL SELECT COUNT(*) INTO :coun1
         FROM INFORMATION_SCHEMA.CONSTRAINT_TABLE_USAGE
         WHERE TABLE_SCHEMA = 'CTS4';
CHCKOK();
printf("coun1 should be 0; its value is : %ld\n",coun1);
if (coun1 != 0)
  flag = 0;
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("CREATE TABLE TAB722a \n");
printf("(COLNUM1 NUMERIC(5),\n");
printf("COLNUM2 NUMERIC(5),\n");
printf("COLSTR1 CHAR(3),\n");
printf("CONSTRAINT 722ACONS1 PRIMARY KEY (COLSTR1),\n");
printf("CONSTRAINT 722ACONS2 CHECK(COLNUM2 > 0));\n");
EXEC SQL CREATE TABLE TAB722a 
 (COLNUM1 NUMERIC(5),
  COLNUM2 NUMERIC(5),
  COLSTR1 CHAR(3),
  CONSTRAINT 722ACONS1 PRIMARY KEY (COLSTR1),
  CONSTRAINT 722ACONS2 CHECK(COLNUM2 > 0));
CHCKOK();  
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("CREATE TABLE TAB722b\n");
printf("( C1 CHAR(3),\n");
printf("  C2 CHAR(10),\n");
printf("  CONSTRAINT 722B FOREIGN KEY(C1)\n"); 
printf("  REFERENCES TAB722a(COLSTR1);\n");  
EXEC SQL CREATE TABLE TAB722b
         ( C1 CHAR(3),
           C2 CHAR(10),
           CONSTRAINT 722B FOREIGN KEY(C1) 
           REFERENCES TAB722a(COLSTR1));  
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* Contents of CONSTRAINT_TABLE_USAGE are now: */
/* TAB722A  722ACONS1 */
/* TAB722A  722ACONS2 */
/* TAB722A  722B */

coun1 = 0; 
coun2 = 0;
printf("SELECT COUNT (DISTINCT TABLE_NAME),\n");
printf("COUNT(CONSTRAINT_NAME)\n");
printf("INTO :coun1,:coun2\n");
printf("FROM INFORMATION_SCHEMA.CONSTRAINT_TABLE_USAGE\n");
printf("WHERE CONSTRAINT_SCHEMA = 'CTS4';\n");
EXEC SQL SELECT COUNT (DISTINCT TABLE_NAME),
         COUNT(CONSTRAINT_NAME)
         INTO :coun1,:coun2
         FROM INFORMATION_SCHEMA.CONSTRAINT_TABLE_USAGE
         WHERE CONSTRAINT_SCHEMA = 'CTS4';
CHCKOK();
printf("Coun1 should be 1; it is %ld\n",coun1);
printf("Coun2 should be 3; it is %ld\n",coun2);
if (coun1 != 1 || coun2 != 3) 
    flag = 0;
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* Drop table TAB722A */
printf("DROP TABLE TAB722a CASCADE;\n");
EXEC SQL DROP TABLE TAB722a CASCADE;     
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* By Dropping table TAB722a the foreign key constraint   */
/* declared in TAB722b should be dropped                  */

coun1 = 5;
printf("SELECT COUNT (CONSTRAINT_NAME) INTO :coun1\n");
printf("  FROM INFORMATION_SCHEMA.VIEW_TABLE_USAGE\n");
printf("  WHERE TABLE_SCHEMA = 'CTS4';\n");
EXEC SQL SELECT COUNT (CONSTRAINT_NAME) INTO :coun1
  FROM INFORMATION_SCHEMA.VIEW_TABLE_USAGE
  WHERE TABLE_SCHEMA = 'CTS4';
CHCKOK();
printf("COUNT should be 0; its value is %ld\n",coun1);
if (coun1 != 0)
   flag = 0;
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* now restore the database in its original state */
/* by dropping table TAB722b */
printf("DROP TABLE TAB722b CASCADE;\n");
EXEC SQL DROP TABLE TAB722b CASCADE;
CHCKOK();
printf("\n");
 
printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");
 
 /* record results */

     if ( flag == 1 )
       {
          printf("\n\n       xts722.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7022','pass','PC'); 
       }
     else
       {
          printf("\n\n       xts722.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7022','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;

/******************** END TEST7022 *********************/
  exit(errcnt); 
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

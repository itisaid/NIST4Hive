/*  EMBEDDED C (file " XTS733.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS733.PC                                                   */
/*  WRITTEN BY: Manolis Megaloikonomou                           */
/*                                                               */
/*  FULL OUTER JOIN <table ref> ON <search condition> -- static. */
/*                                                               */
/*  REFERENCES                                                   */
/*     7.10   -- <query expression>                              */
/*     7.10 LR.2c -- Raised. Entry SQL restriction which         */
/*                prohibited the use of a <joined table>         */
/*                within a <query expression>.                   */
/*     6.3    -- <Table reference>.                              */
/*     6.3  LR.2a -- Raised. Entry SQL restriction which         */
/*                prohibited the use of a <joined table>         */
/*                in a <table reference>.                        */
/*     7.5    -- <joined table>.                                 */
/*     7.5  GR.1.c                                               */
/*     7.5  GR.5.d                                               */
/*     7.5  GR.6.b                                               */
/*     7.5  LR.2a -- Raised. Entry SQL restriction which         */
/*                prohibited the use of a <joined table>         */
/*                in a <table reference>.                        */
/*    F#4  -- Joined table.                                      */
/*    F#24 -- Keyword relaxations.                               */
/*    F#40 -- Full outer join.                                   */
/*                                                               */
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 06/12/95                    */
/*                                                               */
/*  QA STATUS :                                                  */
/*                                                               */
/*  Revised by DWF 1996-02-06                                    */
/*    Removed status checks after cursor definition              */
/*    Fixed expected results & allowed nulls to be sorted first  */
/*    Fixed null value no indicator parms                        */
/*    Check indicators instead of expecting data not to change   */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 long coun;
 long xtnum1;
 long xtnum2;
 long xtnum3;
 long xtnum4;
 char xtchar1[11];
 char xtchar2[11];
 char xtchar3[11];
 char xtchar4[11];
 short indic1;
 short indic2;
 short indic3;
 short indic4;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;
long flag2;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts733.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf( "\n Time Run:  %s\n", ctime(&cal));

/******************** BEGIN TEST7033 ********************/

flag = 1;
printf("                  TEST7033 \n");
printf("    FULL OUTER JOIN <table ref> ON <search condition> --static.\n");
printf("References:\n");
printf("    7.10 -- <query expression>\n");
printf("    7.10 LR.2c -- Raised. Entry SQL restriction which\n");
printf("                prohibited the use of a <joined table>\n");
printf("                within a <query expression>.\n");
printf("    6.3  -- <Table reference>.\n");
printf("    6.3  LR.2a -- Raised. Entry SQL restriction which\n");
printf("                prohibited the use of a <joined table>\n");
printf("                in a <table reference>.\n");
printf("    7.5  -- <joined table>.\n");
printf("    7.5  GR.1.c\n");
printf("    7.5  GR.5.d\n");
printf("    7.5  GR.6.b\n");
printf("    7.5  LR.2a -- Raised. Entry SQL restriction which\n");
printf("                prohibited the use of a <joined table>\n");
printf("                in a <table reference>.\n");
printf("    F#4  -- Joined table.\n");
printf("    F#24 -- Keyword relaxations.\n");
printf("    F#40 -- Full outer join.\n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

/* Ensure that the tables TEST6840A, TEST6840B, TEST6840C are empty */
EXEC SQL DELETE FROM TEST6840A;
EXEC SQL DELETE FROM TEST6840B;
EXEC SQL DELETE FROM TEST6840C;

/* Insert two rows of non null values into TEST6840A */
printf("INSERT INTO TEST6840A VALUES (1,'A');\n");
EXEC SQL INSERT INTO TEST6840A VALUES (1,'A');
CHCKOK();
printf("\n");
printf("INSERT INTO TEST6840A VALUES (2,'B');\n");
EXEC SQL INSERT INTO TEST6840A VALUES (2,'B');
CHCKOK();
printf("\n");

/* Insert two rows of non null values into TEST6840B */
printf("INSERT INTO TEST6840B VALUES (2,'C');\n");
EXEC SQL INSERT INTO TEST6840B VALUES (2,'C');
CHCKOK();
printf("\n");
printf("INSERT INTO TEST6840B VALUES (3,'A');\n");
EXEC SQL INSERT INTO TEST6840B VALUES (3,'A');
CHCKOK();
printf("\n");

printf("DECLARE a CURSOR\n");
printf("FOR SELECT * FROM TEST6840A FULL OUTER JOIN TEST6840B\n");
printf("ON NUM_A = NUM_B ORDER BY NUM_A;\n\n");
EXEC SQL DECLARE a CURSOR
         FOR SELECT * FROM TEST6840A FULL OUTER JOIN TEST6840B
         ON NUM_A = NUM_B ORDER BY NUM_A;

/* Result should be: */
/* NUM_A CH_A NUM_B CH_B */
/* ----- ---- ----- ---- */
/*   1     A   NULL NULL */
/*   2     B    2     C  */
/* NULL  NULL   3     A  */
/* Except that the last row might actually be the first: */
/* 13.1 GR.3.b:  Whether nulls sort above or below non-nulls is */
/* implementation-defined! */

/* flag2 will be set if the null row is first. */
flag2 = 0;

printf("OPEN a;\n");
EXEC SQL OPEN a;
CHCKOK();
printf("\n");

printf ("There are two possible sorting orders for this cursor,\n");
printf ("because the sort column contains a NULL.  (13.1 GR.3.b)\n\n");

P102:
/* Initialise host variables */
xtnum1 = 999;
xtnum2 = 999;
strcpy(xtchar1,"xxxxxxxxxx");
strcpy(xtchar2,"xxxxxxxxxx");
indic1 = 99;
indic2 = 99;
indic3 = 99;
indic4 = 99;

printf("FETCH a INTO :xtnum1:indic1, :xtchar1:indic2,\n");
printf("  :xtnum2:indic3, :xtchar2:indic4;\n");
EXEC SQL FETCH a INTO :xtnum1:indic1, :xtchar1:indic2,
  :xtnum2:indic3, :xtchar2:indic4;
CHCKOK();
if (indic1 == -1 && flag2 == 0)
{
  printf ("Sorting order is nulls-first.\n");
  flag2 = 1;
  goto P100;
}
if (indic1 != -1 && flag2 == 0)
{
  printf ("Sorting order is nulls-last.\n");
}
printf("xtnum1 should be       1; its value is %ld\n", xtnum1);
printf("xtchar1 should be      A; its value is %s\n", xtchar1);
printf("indic3 should be -1; its value is %d\n", indic3);
printf("indic4 should be -1; its value is %d\n", indic4);
if (xtnum1 != 1 || strncmp (xtchar1,"A",1) != 0) 
   flag = 0;
if (indic3 != -1 || indic4 != -1)
   flag = 0;
printf("\n");

/* Initialise host variables */
xtnum1 = 999;
xtnum2 = 999;
strcpy(xtchar1,"xxxxxxxxxx");
strcpy(xtchar2,"xxxxxxxxxx");

printf("FETCH a INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2;\n");
EXEC SQL FETCH a INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2;
CHCKOK();
printf("xtnum1 should be  2; its value is %ld\n", xtnum1);
printf("xtchar1 should be B; its value is %s\n", xtchar1);
printf("xtnum2 should be  2; its value is %ld\n", xtnum2);
printf("xtchar2 should be C; its value is %s\n", xtchar2);
if ( xtnum1 != 2 || strncmp(xtchar1,"B",1) != 0)
   flag = 0;
if ( xtnum2 != 2 || strncmp(xtchar2,"C",1) != 0)
   flag = 0;
printf("\n");

if (flag2 == 1)
  goto P101;

/* Initialise host variables */
xtnum1 = 999;
xtnum2 = 999;
strcpy(xtchar1,"xxxxxxxxxx");
strcpy(xtchar2,"xxxxxxxxxx");
indic1 = 99;
indic2 = 99;
indic3 = 99;
indic4 = 99;

printf("FETCH a INTO :xtnum1:indic1, :xtchar1:indic2,\n");
printf("  :xtnum2:indic3, :xtchar2:indic4;\n");
EXEC SQL FETCH a INTO :xtnum1:indic1, :xtchar1:indic2,
  :xtnum2:indic3, :xtchar2:indic4;
CHCKOK();

P100:
printf("indic1 should be -1; its value is %d\n", indic1);
printf("indic2 should be -1; its value is %d\n", indic2);
printf("xtnum2 should be       3; its value is %ld\n", xtnum2);
printf("xtchar2 should be      A; its value is %s\n", xtchar2);
if (indic1 != -1 || indic2 != -1)
   flag = 0;
if ( xtnum2 != 3 || strncmp(xtchar2,"A",1) != 0)
   flag = 0;
printf("\n");

if (flag2 == 1)
  goto P102;

P101:
printf("CLOSE a;\n");
EXEC SQL CLOSE a;
CHCKOK();
printf("\n");

printf("DECLARE b CURSOR\n");
printf("FOR SELECT * FROM TEST6840A FULL JOIN TEST6840B\n");
printf("ON CH_A = CH_B ORDER BY NUM_A;\n\n");
EXEC SQL DECLARE b CURSOR
         FOR SELECT * FROM TEST6840A FULL JOIN TEST6840B
         ON CH_A = CH_B ORDER BY NUM_A;

/* Result should be: */
/* NUM_A CH_A NUM_B CH_B */
/* ----- ---- ----- ---- */
/*   1     A    3     A  */
/*   2     B   NULL NULL */
/*  NULL  NULL  2     C  */
/* Again, the sorting order is uncertain because of the null. */

printf("OPEN b;\n");
EXEC SQL OPEN b;
CHCKOK();
printf("\n");

/* Branch if nulls first */
if (flag2 == 1)
  goto P103;

P104:
/* Initialise host variables */
xtnum1 = 999;
xtnum2 = 999;
strcpy(xtchar1,"xxxxxxxxxx");
strcpy(xtchar2,"xxxxxxxxxx");

printf("FETCH b INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2;\n");
EXEC SQL FETCH b INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2;
CHCKOK();
printf("xtnum1 should be  1; its value is %ld\n", xtnum1);
printf("xtchar1 should be A; its value is %s\n", xtchar1);
printf("xtnum2 should be  3; its value is %ld\n", xtnum2);
printf("xtchar2 should be A; its value is %s\n", xtchar2);
if ( xtnum1 != 1 || strncmp(xtchar1,"A",1) != 0 )
   flag = 0;
if ( xtnum2 != 3 || strncmp(xtchar2,"A",1) != 0 )
   flag = 0;
printf("\n");

/* Initialise host variables */
xtnum1 = 999;
xtnum2 = 999;
strcpy(xtchar1,"xxxxxxxxxx");
strcpy(xtchar2,"xxxxxxxxxx");
indic1 = 99;
indic2 = 99;

EXEC SQL FETCH b INTO :xtnum1, :xtchar1,
  :xtnum2:indic1, :xtchar2:indic2;
CHCKOK();
printf("xtnum1 should be       2; its value is %ld\n", xtnum1);
printf("xtchar1 should be      B; its value is %s\n", xtchar1);
printf("indic1 should be -1; its value is %d\n", indic1);
printf("indic2 should be -1; its value is %d\n", indic2);
if ( xtnum1 != 2 || strncmp(xtchar1,"B",1) != 0 )
   flag = 0;
if (indic1 != -1 || indic2 != -1)
   flag = 0;
printf("\n");

if (flag2 == 1)
  goto P105;

P103:
/* Initialise host variables */
xtnum1 = 999;
xtnum2 = 999;
strcpy(xtchar1, "xxxxxxxxxx");
strcpy(xtchar2,"xxxxxxxxxx");

printf("FETCH b INTO :xtnum1:indic1, :xtchar1:indic2,\n");
printf("  :xtnum2, :xtchar2;\n");
EXEC SQL FETCH b INTO :xtnum1:indic1, :xtchar1:indic2,
  :xtnum2, :xtchar2;
CHCKOK();
printf("indic1 should be -1; its value is %d\n", indic1);
printf("indic2 should be -1; its value is %d\n", indic2);
printf("xtnum2 should be       2; its value is %ld\n", xtnum2);
printf("xtchar2 should be      C; its value is %s\n", xtchar2);
if (indic1 != -1 || indic2 != -1)
   flag = 0;
if ( xtnum2 != 2 || strncmp(xtchar2,"C",1) != 0 )
   flag = 0;
printf("\n");

if (flag2 == 1)
  goto P104;

P105:
printf("CLOSE b;\n");
EXEC SQL CLOSE b;
CHCKOK();
printf("\n");

printf("INSERT INTO TEST6840C\n");
printf("TEST6840A FULL OUTER JOIN TEST6840B ON NUM_A = 2;\n");
EXEC SQL INSERT INTO TEST6840C
         TEST6840A FULL OUTER JOIN TEST6840B ON NUM_A = 2;
CHCKOK();
printf("\n");

/* TEST6840C is now: */
/* NUM_C1 CH_C1 NUM_C2 CH_C2 */
/* ------ ----- ------ ----- */
/*   2      B     2      C   */
/*   2      B     3      A   */
/*   1      A    NULL  NULL  */

coun=99;
printf("SELECT COUNT(*) INTO :coun FROM TEST6840C;\n");
EXEC SQL SELECT  COUNT(*) INTO :coun FROM TEST6840C;
CHCKOK();
printf("coun should be 3; its value is %ld\n", coun);
if (coun != 3)
   flag = 0;
printf("\n");

coun=99;
printf("SELECT COUNT(*) INTO :coun FROM TEST6840C\n");
printf("WHERE NUM_C1 = 1 AND CH_C1 = 'A' ");
printf("AND NUM_C2 IS NULL AND CH_C2 IS NULL;\n");
EXEC SQL SELECT  COUNT(*) INTO :coun FROM TEST6840C
         WHERE NUM_C1 = 1 AND CH_C1 = 'A' AND NUM_C2 IS NULL AND CH_C2 IS NULL;
CHCKOK();
printf("coun should be 1; its value is %ld\n", coun);
if (coun != 1)
   flag = 0;
printf("\n");

coun=99;
printf("SELECT COUNT(*) INTO :coun FROM TEST6840C\n");
printf("WHERE NUM_C1 = 2 AND CH_C1 = 'B' AND NUM_C2 = 2 AND CH_C2 = 'C';\n");
EXEC SQL SELECT  COUNT(*) INTO :coun FROM TEST6840C
         WHERE NUM_C1 = 2 AND CH_C1 = 'B' AND NUM_C2 = 2 AND CH_C2 = 'C';
CHCKOK();
printf("coun should be 1; its value is %ld\n", coun);
if (coun != 1)
   flag = 0;
printf("\n");

coun=99;
printf("SELECT COUNT(*) INTO :coun FROM TEST6840C\n");
printf("WHERE NUM_C1 = 2 AND CH_C1 = 'B' AND NUM_C2 = 3 AND CH_C2 = 'A';\n");
EXEC SQL SELECT  COUNT(*) INTO :coun FROM TEST6840C
         WHERE NUM_C1 = 2 AND CH_C1 = 'B' AND NUM_C2 = 3  AND CH_C2 = 'A';
CHCKOK();
printf("coun should be 1; its value is %ld\n", coun);
if (coun != 1)
   flag = 0;
printf("\n");

printf("DECLARE c CURSOR FOR SELECT * FROM\n");
printf("(TEST6840B FULL JOIN TEST6840A AS CN1 ON TEST6840B.CH_B = CN1.CH_A)\n");
printf("FULL JOIN TEST6840A AS CN2 ON TEST6840B.NUM_B = CN2.NUM_A\n");
printf("ORDER BY TEST6840B.NUM_B, CN1.NUM_A;\n\n");
EXEC SQL DECLARE c CURSOR
       FOR SELECT * FROM
       (TEST6840B FULL JOIN TEST6840A AS CN1 ON TEST6840B.CH_B = CN1.CH_A)
       FULL JOIN TEST6840A AS CN2 ON TEST6840B.NUM_B = CN2.NUM_A
       ORDER BY TEST6840B.NUM_B, CN1.NUM_A;

/* TEST6840B is */
/* NUM_B  CH_B */
/* -----  ---- */
/*   2      C  */
/*   3      A  */

/* TEST6840A is */
/* NUM_A  CH_A */
/* -----  ---- */
/*   1      A  */
/*   2      B  */

/* TEST6840B FULL JOIN TEST6840A AS CN1 ON TEST6840B.CH_B = CN1.CH_A is */
/* NUM_B  CH_B  NUM_A  CH_A */
/* -----  ----  -----  ---- */
/*   3      A     1      A  */
/*   2      C    NULL  NULL */
/*  NULL  NULL    2      B  */

/* ...  FULL JOIN TEST6840A AS CN2 ON TEST6840B.NUM_B = CN2.NUM_A */
/* Result should be (nulls last): */
/* NUM_B  CH_B  CN1.NUM_A  CN1.CH_A  CN2.NUM_A  CN2.CH_A */
/* -----  ----  ---------  --------  ---------  -------- */
/*   2      C      NULL      NULL        2          B    */
/*   3      A        1         A        NULL      NULL   */
/* NULL   NULL       2         B        NULL      NULL   */
/* NULL   NULL     NULL      NULL        1          A    */
/* or (nulls first): */
/* NUM_B  CH_B  CN1.NUM_A  CN1.CH_A  CN2.NUM_A  CN2.CH_A */
/* -----  ----  ---------  --------  ---------  -------- */
/* NULL   NULL     NULL      NULL        1          A    */
/* NULL   NULL       2         B        NULL      NULL   */
/*   2      C      NULL      NULL        2          B    */
/*   3      A        1         A        NULL      NULL   */

printf("OPEN c;\n");
EXEC SQL OPEN c;
CHCKOK();
printf("\n");

if (flag2 == 1)
  goto P106;

/* This is the nulls-last branch */

xtnum1 = 999;
xtnum2 = 999;
xtnum3 = 999;
strcpy(xtchar1,"xxxxxxxxxx");
strcpy(xtchar2,"xxxxxxxxxx");
strcpy(xtchar3,"xxxxxxxxxx");
indic1 = 99;
indic2 = 99;
printf("FETCH c INTO :xtnum1, :xtchar1, :xtnum2:indic1,\n");
printf(":xtchar2:indic2,  :xtnum3, :xtchar3;\n");
EXEC SQL FETCH c INTO :xtnum1, :xtchar1, :xtnum2:indic1,
:xtchar2:indic2,  :xtnum3, :xtchar3;
CHCKOK();
printf("xtnum1 should be       2; its value is %ld\n", xtnum1);
printf("xtchar1 should be      C; its value is %s\n", xtchar1);
printf("indic1 should be -1; its value is %d\n", indic1);
printf("indic2 should be -1; its value is %d\n", indic2);
printf("xtnum3 should be       2; its value is %ld\n", xtnum3);
printf("xtchar3 should be      B; its value is %s\n", xtchar3);
if (xtnum1 != 2  || strncmp(xtchar1,"C",1) != 0 || indic1 != -1)
   flag = 0;
if (indic2 != -1 || xtnum3!=2 || strncmp(xtchar3,"B",1)!= 0)
   flag = 0;
printf("\n");

xtnum1 = 999;
xtnum2 = 999;
xtnum3 = 999;
strcpy(xtchar1,"xxxxxxxxxx");
strcpy(xtchar2,"xxxxxxxxxx");
strcpy(xtchar3, "xxxxxxxxxx");
indic1 = 99;
indic2 = 99;
printf("FETCH c INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2,\n");
printf(":xtnum3:indic1, :xtchar3:indic2;\n");
EXEC SQL FETCH c INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2,
:xtnum3:indic1, :xtchar3:indic2;
CHCKOK();
printf("xtnum1 should be       3; its value is %ld\n", xtnum1);
printf("xtchar1 should be      A; its value is %s\n", xtchar1);
printf("xtnum2 should be       1; its value is %ld\n", xtnum2);
printf("xtchar2 should be      A; its value is %s\n", xtchar2);
printf("indic1 should be -1; its value is %d\n", indic1);
printf("indic2 should be -1; its value is %d\n", indic2);
if ( xtnum1 != 3  || strncmp(xtchar1,"A",1) != 0 || xtnum2 != 1)
   flag = 0;
if (strncmp(xtchar2,"A",1)!=0 || indic1 != -1 || indic2 != -1)
   flag = 0;
printf("\n");

xtnum1 = 999;
xtnum2 = 999;
xtnum3 = 999;
strcpy(xtchar1, "xxxxxxxxxx");
strcpy(xtchar2,"xxxxxxxxxx");
strcpy(xtchar3, "xxxxxxxxxx");
indic1 = 99;
indic2 = 99;
indic3 = 99;
indic4 = 99;
EXEC SQL FETCH c INTO :xtnum1:indic1, :xtchar1:indic2,
:xtnum2, :xtchar2, :xtnum3:indic3, :xtchar3:indic4;
CHCKOK();
printf("indic1 should be -1; its value is %d\n", indic1);
printf("indic2 should be -1; its value is %d\n", indic2);
printf("xtnum2 should be       2; its value is %ld\n", xtnum2);
printf("xtchar2 should be      B; its value is %s\n", xtchar2);
printf("indic3 should be -1; its value is %d\n", indic3);
printf("indic4 should be -1; its value is %d\n", indic4);
if (indic1 != -1 || indic2 != -1 || xtnum2 != 2)
   flag = 0;
if (strncmp(xtchar2,"B",1)!=0 || indic3 != -1 || indic4 != -1)
   flag = 0;
printf("\n");

xtnum1 = 999;
xtnum2 = 999;
xtnum3 = 999;
strcpy(xtchar1, "xxxxxxxxxx");
strcpy(xtchar2, "xxxxxxxxxx");
strcpy(xtchar3,"xxxxxxxxxx");
indic1 = 99;
indic2 = 99;
indic3 = 99;
indic4 = 99;
printf("FETCH c INTO :xtnum1:indic1, :xtchar1:indic2,\n");
printf(":xtnum2:indic3, :xtchar2:indic4, :xtnum3, :xtchar3;\n");
EXEC SQL FETCH c INTO :xtnum1:indic1, :xtchar1:indic2,
:xtnum2:indic3, :xtchar2:indic4, :xtnum3, :xtchar3;
CHCKOK();
printf("indic1 should be -1; its value is %d\n", indic1);
printf("indic2 should be -1; its value is %d\n", indic2);
printf("indic3 should be -1; its value is %d\n", indic3);
printf("indic4 should be -1; its value is %d\n", indic4);
printf("xtnum3 should be       1; its value is %ld\n", xtnum3);
printf("xtchar3 should be      A; its value is %s\n", xtchar3);
if (indic1 != -1 || indic2 != -1 || indic3 != -1)
   flag = 0;
if (indic4 != -1 || xtnum3!=1 || strncmp(xtchar3,"A",1)!=0)
   flag = 0;
printf("\n");

goto P107;

/* nulls-first branch */
P106:
xtnum1 = 999;
xtnum2 = 999;
xtnum3 = 999;
strcpy(xtchar1, "xxxxxxxxxx");
strcpy(xtchar2, "xxxxxxxxxx");
strcpy(xtchar3,"xxxxxxxxxx");
indic1 = 99;
indic2 = 99;
indic3 = 99;
indic4 = 99;
printf("FETCH c INTO :xtnum1:indic1, :xtchar1:indic2,\n");
printf(":xtnum2:indic3, :xtchar2:indic4, :xtnum3, :xtchar3;\n");
EXEC SQL FETCH c INTO :xtnum1:indic1, :xtchar1:indic2,
:xtnum2:indic3, :xtchar2:indic4, :xtnum3, :xtchar3;
CHCKOK();
printf("indic1 should be -1; its value is %d\n", indic1);
printf("indic2 should be -1; its value is %d\n", indic2);
printf("indic3 should be -1; its value is %d\n", indic3);
printf("indic4 should be -1; its value is %d\n", indic4);
printf("xtnum3 should be       1; its value is %ld\n", xtnum3);
printf("xtchar3 should be      A; its value is %s\n", xtchar3);
if (indic1 != -1 || indic2 != -1 || indic3 != -1)
   flag = 0;
if (indic4 != -1 || xtnum3!=1 || strncmp(xtchar3,"A",1)!=0)
   flag = 0;
printf("\n");

xtnum1 = 999;
xtnum2 = 999;
xtnum3 = 999;
strcpy(xtchar1, "xxxxxxxxxx");
strcpy(xtchar2,"xxxxxxxxxx");
strcpy(xtchar3, "xxxxxxxxxx");
indic1 = 99;
indic2 = 99;
indic3 = 99;
indic4 = 99;
EXEC SQL FETCH c INTO :xtnum1:indic1, :xtchar1:indic2,
:xtnum2, :xtchar2, :xtnum3:indic3, :xtchar3:indic4;
CHCKOK();
printf("indic1 should be -1; its value is %d\n", indic1);
printf("indic2 should be -1; its value is %d\n", indic2);
printf("xtnum2 should be       2; its value is %ld\n", xtnum2);
printf("xtchar2 should be      B; its value is %s\n", xtchar2);
printf("indic3 should be -1; its value is %d\n", indic3);
printf("indic4 should be -1; its value is %d\n", indic4);
if (indic1 != -1 || indic2 != -1 || xtnum2 != 2)
   flag = 0;
if (strncmp(xtchar2,"B",1)!=0 || indic3 != -1 || indic4 != -1)
   flag = 0;
printf("\n");

xtnum1 = 999;
xtnum2 = 999;
xtnum3 = 999;
strcpy(xtchar1,"xxxxxxxxxx");
strcpy(xtchar2,"xxxxxxxxxx");
strcpy(xtchar3,"xxxxxxxxxx");
indic1 = 99;
indic2 = 99;
printf("FETCH c INTO :xtnum1, :xtchar1, :xtnum2:indic1,\n");
printf(":xtchar2:indic2,  :xtnum3, :xtchar3;\n");
EXEC SQL FETCH c INTO :xtnum1, :xtchar1, :xtnum2:indic1,
:xtchar2:indic2,  :xtnum3, :xtchar3;
CHCKOK();
printf("xtnum1 should be       2; its value is %ld\n", xtnum1);
printf("xtchar1 should be      C; its value is %s\n", xtchar1);
printf("indic1 should be -1; its value is %d\n", indic1);
printf("indic2 should be -1; its value is %d\n", indic2);
printf("xtnum3 should be       2; its value is %ld\n", xtnum3);
printf("xtchar3 should be      B; its value is %s\n", xtchar3);
if (xtnum1 != 2  || strncmp(xtchar1,"C",1) != 0 || indic1 != -1)
   flag = 0;
if (indic2 != -1 || xtnum3!=2 || strncmp(xtchar3,"B",1)!= 0)
   flag = 0;
printf("\n");

xtnum1 = 999;
xtnum2 = 999;
xtnum3 = 999;
strcpy(xtchar1,"xxxxxxxxxx");
strcpy(xtchar2,"xxxxxxxxxx");
strcpy(xtchar3, "xxxxxxxxxx");
indic1 = 99;
indic2 = 99;
printf("FETCH c INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2,\n");
printf(":xtnum3:indic1, :xtchar3:indic2;\n");
EXEC SQL FETCH c INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2,
:xtnum3:indic1, :xtchar3:indic2;
CHCKOK();
printf("xtnum1 should be       3; its value is %ld\n", xtnum1);
printf("xtchar1 should be      A; its value is %s\n", xtchar1);
printf("xtnum2 should be       1; its value is %ld\n", xtnum2);
printf("xtchar2 should be      A; its value is %s\n", xtchar2);
printf("indic1 should be -1; its value is %d\n", indic1);
printf("indic2 should be -1; its value is %d\n", indic2);
if ( xtnum1 != 3  || strncmp(xtchar1,"A",1) != 0 || xtnum2 != 1)
   flag = 0;
if (strncmp(xtchar2,"A",1)!=0 || indic1 != -1 || indic2 != -1)
   flag = 0;
printf("\n");

P107:
printf("CLOSE c;\n");
EXEC SQL CLOSE c;
CHCKOK();
printf("\n");

printf("DECLARE d CURSOR FOR SELECT * FROM\n");
printf("(TEST6840A AS CN3 FULL OUTER JOIN TEST6840A AS CN4\n");
printf(" ON CN3.NUM_A = CN4.NUM_A) FULL OUTER JOIN\n");
printf("(TEST6840B AS CN5 FULL OUTER JOIN TEST6840B AS CN6\n");
printf(" ON CN5.CH_B = CN6.CH_B) ON CN3.NUM_A = CN5.NUM_B\n");
printf("ORDER BY CN3.NUM_A;\n\n");
EXEC SQL DECLARE d CURSOR
         FOR SELECT * FROM
         (TEST6840A AS CN3 FULL OUTER JOIN TEST6840A AS CN4
          ON CN3.NUM_A = CN4.NUM_A)
         FULL OUTER JOIN
         (TEST6840B AS CN5 FULL OUTER JOIN TEST6840B AS CN6 
          ON CN5.CH_B = CN6.CH_B)
         ON CN3.NUM_A = CN5.NUM_B
         ORDER BY CN3.NUM_A;

/* TEST6840A is */
/* NUM_A  CH_A */
/* -----  ---- */
/*   1      A  */
/*   2      B  */

/* TEST6840B is */
/* NUM_B  CH_B */
/* -----  ---- */
/*   2      C  */
/*   3      A  */

/* TEST6840A AS CN3 FULL OUTER JOIN TEST6840A AS CN4 */
/*          ON CN3.NUM_A = CN4.NUM_A                 */
/* CN3.NUM_A CN3.CH_A CN4.NUM_A CN4.CH_A */
/* --------- -------- --------- -------- */
/*     1        A          1        A    */
/*     2        B          2        B    */

/* TEST6840B AS CN5 FULL OUTER JOIN TEST6840B AS CN6  */
/*           ON CN5.CH_B = CN6.CH_B */
/* CN5.NUM_B CN5.CH_B CN6.NUM_B CN6.CH_B */
/* --------- -------- --------- -------- */
/*    2          C        2         C    */
/*    3          A        3         A    */

/* ... OUTER JOIN ... ON CN3.NUM_A = CN5.NUM_B ORDER BY CN3.NUM_A */
/* Result should be */
/* CN3.NUM_ACN3.CH_ACN4.NUM_ACN4.CH_ACN5.NUM_BCN5.CH_BCN6.NUM_BCN6.CH_B */
/* -------------------------------------------------------------------- */
/*    1          A      1        A      NULL     NULL   NULL      NULL */
/*    2          B      2        B       2        C       2        C */
/*  NULL        NULL   NULL    NULL      3        A       3        A */
/* Or last row can be first for nulls-first sorting. */

printf("OPEN d;\n");
EXEC SQL OPEN d;
CHCKOK();
printf("\n");

if (flag2 == 1)
  goto P109;

/* nulls-last branch */

xtnum1 = 999;
xtnum2 = 999;
xtnum3 = 999;
xtnum4 = 999;
strcpy(xtchar1, "xxxxxxxxxx");
strcpy(xtchar2, "xxxxxxxxxx");
strcpy(xtchar3, "xxxxxxxxxx");
strcpy(xtchar4, "xxxxxxxxxx");
indic1 = 99;
indic2 = 99;
indic3 = 99;
indic4 = 99;
printf("FETCH d INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2,\n");
printf(":xtnum3:indic1, :xtchar3:indic2, :xtnum4:indic3, :xtchar4:indic4;\n");
EXEC SQL FETCH d INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2,
:xtnum3:indic1, :xtchar3:indic2, :xtnum4:indic3, :xtchar4:indic4;
CHCKOK();
printf("xtnum1 should be       1; its value is %ld\n", xtnum1);
printf("xtchar1 should be      A; its value is %s\n", xtchar1);
printf("xtnum2 should be       1; its value is %ld\n", xtnum2);
printf("xtchar2 should be      A; its value is %s\n", xtchar2);
printf("indic1 should be -1; its value is %d\n", indic1);
printf("indic2 should be -1; its value is %d\n", indic2);
printf("indic3 should be -1; its value is %d\n", indic3);
printf("indic4 should be -1; its value is %d\n", indic4);
if ( xtnum1 != 1 || strncmp(xtchar1,"A",1) != 0)
   flag = 0;
if ( xtnum2 != 1 || strncmp(xtchar2,"A",1) != 0)
   flag = 0;
if (indic1 != -1 || indic2 != -1)
   flag = 0;
if (indic3 != -1 || indic4 != -1)
   flag = 0;
printf("\n");

xtnum1 = 999;
xtnum2 = 999;
xtnum3 = 999;
xtnum4 = 999;
strcpy(xtchar1, "xxxxxxxxxx");
strcpy(xtchar2, "xxxxxxxxxx");
strcpy(xtchar3, "xxxxxxxxxx");
strcpy(xtchar4, "xxxxxxxxxx");
printf("FETCH d INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2,\n");
printf(":xtnum3, :xtchar3, :xtnum4, :xtchar4;\n");
EXEC SQL FETCH d INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2,
                      :xtnum3, :xtchar3, :xtnum4, :xtchar4;
CHCKOK();
printf("xtnum1 should be       2; its value is %ld\n", xtnum1);
printf("xtchar1 should be      B; its value is %s\n", xtchar1);
printf("xtnum2 should be       2; its value is %ld\n", xtnum2);
printf("xtchar2 should be      B; its value is %s\n", xtchar2);
printf("xtnum3 should be       2; its value is %ld\n", xtnum3);
printf("xtchar3 should be      C; its value is %s\n", xtchar3);
printf("xtnum4 should be       2; its value is %ld\n", xtnum4);
printf("xtchar4 should be      C; its value is %s\n", xtchar4);
if ( xtnum1 != 2 || strncmp(xtchar1,"B",1) != 0)
   flag = 0;
if ( xtnum2 != 2 || strncmp(xtchar2,"B",1) != 0)
   flag = 0;
if ( xtnum3 != 2 || strncmp(xtchar3,"C",1) != 0)
   flag = 0;
if ( xtnum4 != 2 || strncmp(xtchar4,"C",1) != 0)
   flag = 0;
printf("\n");

xtnum1 = 999;
xtnum2 = 999;
xtnum3 = 999;
xtnum4 = 999;
strcpy(xtchar1, "xxxxxxxxxx");
strcpy(xtchar2, "xxxxxxxxxx");
strcpy(xtchar3, "xxxxxxxxxx");
strcpy(xtchar4, "xxxxxxxxxx");
indic1 = 99;
indic2 = 99;
indic3 = 99;
indic4 = 99;
printf("FETCH d INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2,\n");
printf(":xtnum3, :xtchar3, :xtnum4, :xtchar4;\n");
EXEC SQL FETCH d INTO :xtnum1:indic1, :xtchar1:indic2,
:xtnum2:indic3, :xtchar2:indic4,
:xtnum3, :xtchar3, :xtnum4, :xtchar4;
CHCKOK();
printf("indic1 should be -1; its value is %d\n", indic1);
printf("indic2 should be -1; its value is %d\n", indic2);
printf("indic3 should be -1; its value is %d\n", indic3);
printf("indic4 should be -1; its value is %d\n", indic4);
printf("xtnum3 should be       3; its value is %ld\n", xtnum3);
printf("xtchar3 should be      A; its value is %s\n", xtchar3);
printf("xtnum4 should be       3; its value is %ld\n", xtnum4);
printf("xtchar4 should be      A; its value is %s\n", xtchar4);
if (indic1 != -1 || indic2 != -1)
   flag = 0;
if (indic3 != -1 || indic4 != -1)
   flag = 0;
if ( xtnum3 != 3 || strncmp(xtchar3,"A",1) != 0)
   flag = 0;
if ( xtnum4 != 3 || strncmp(xtchar4,"A",1) != 0)
   flag = 0;
printf("\n");

goto P108;

P109:

/* nulls-first branch */
xtnum1 = 999;
xtnum2 = 999;
xtnum3 = 999;
xtnum4 = 999;
strcpy(xtchar1, "xxxxxxxxxx");
strcpy(xtchar2, "xxxxxxxxxx");
strcpy(xtchar3, "xxxxxxxxxx");
strcpy(xtchar4, "xxxxxxxxxx");
indic1 = 99;
indic2 = 99;
indic3 = 99;
indic4 = 99;
printf("FETCH d INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2,\n");
printf(":xtnum3, :xtchar3, :xtnum4, :xtchar4;\n");
EXEC SQL FETCH d INTO :xtnum1:indic1, :xtchar1:indic2,
:xtnum2:indic3, :xtchar2:indic4,
:xtnum3, :xtchar3, :xtnum4, :xtchar4;
CHCKOK();
printf("indic1 should be -1; its value is %d\n", indic1);
printf("indic2 should be -1; its value is %d\n", indic2);
printf("indic3 should be -1; its value is %d\n", indic3);
printf("indic4 should be -1; its value is %d\n", indic4);
printf("xtnum3 should be       3; its value is %ld\n", xtnum3);
printf("xtchar3 should be      A; its value is %s\n", xtchar3);
printf("xtnum4 should be       3; its value is %ld\n", xtnum4);
printf("xtchar4 should be      A; its value is %s\n", xtchar4);
if (indic1 != -1 || indic2 != -1)
   flag = 0;
if (indic3 != -1 || indic4 != -1)
   flag = 0;
if ( xtnum3 != 3 || strncmp(xtchar3,"A",1) != 0)
   flag = 0;
if ( xtnum4 != 3 || strncmp(xtchar4,"A",1) != 0)
   flag = 0;
printf("\n");

xtnum1 = 999;
xtnum2 = 999;
xtnum3 = 999;
xtnum4 = 999;
strcpy(xtchar1, "xxxxxxxxxx");
strcpy(xtchar2, "xxxxxxxxxx");
strcpy(xtchar3, "xxxxxxxxxx");
strcpy(xtchar4, "xxxxxxxxxx");
indic1 = 99;
indic2 = 99;
indic3 = 99;
indic4 = 99;
printf("FETCH d INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2,\n");
printf(":xtnum3:indic1, :xtchar3:indic2, :xtnum4:indic3, :xtchar4:indic4;\n");
EXEC SQL FETCH d INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2,
:xtnum3:indic1, :xtchar3:indic2, :xtnum4:indic3, :xtchar4:indic4;
CHCKOK();
printf("xtnum1 should be       1; its value is %ld\n", xtnum1);
printf("xtchar1 should be      A; its value is %s\n", xtchar1);
printf("xtnum2 should be       1; its value is %ld\n", xtnum2);
printf("xtchar2 should be      A; its value is %s\n", xtchar2);
printf("indic1 should be -1; its value is %d\n", indic1);
printf("indic2 should be -1; its value is %d\n", indic2);
printf("indic3 should be -1; its value is %d\n", indic3);
printf("indic4 should be -1; its value is %d\n", indic4);
if ( xtnum1 != 1 || strncmp(xtchar1,"A",1) != 0)
   flag = 0;
if ( xtnum2 != 1 || strncmp(xtchar2,"A",1) != 0)
   flag = 0;
if (indic1 != -1 || indic2 != -1)
   flag = 0;
if (indic3 != -1 || indic4 != -1)
   flag = 0;
printf("\n");

xtnum1 = 999;
xtnum2 = 999;
xtnum3 = 999;
xtnum4 = 999;
strcpy(xtchar1, "xxxxxxxxxx");
strcpy(xtchar2, "xxxxxxxxxx");
strcpy(xtchar3, "xxxxxxxxxx");
strcpy(xtchar4, "xxxxxxxxxx");
printf("FETCH d INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2,\n");
printf(":xtnum3, :xtchar3, :xtnum4, :xtchar4;\n");
EXEC SQL FETCH d INTO :xtnum1, :xtchar1, :xtnum2, :xtchar2,
                      :xtnum3, :xtchar3, :xtnum4, :xtchar4;
CHCKOK();
printf("xtnum1 should be       2; its value is %ld\n", xtnum1);
printf("xtchar1 should be      B; its value is %s\n", xtchar1);
printf("xtnum2 should be       2; its value is %ld\n", xtnum2);
printf("xtchar2 should be      B; its value is %s\n", xtchar2);
printf("xtnum3 should be       2; its value is %ld\n", xtnum3);
printf("xtchar3 should be      C; its value is %s\n", xtchar3);
printf("xtnum4 should be       2; its value is %ld\n", xtnum4);
printf("xtchar4 should be      C; its value is %s\n", xtchar4);
if ( xtnum1 != 2 || strncmp(xtchar1,"B",1) != 0)
   flag = 0;
if ( xtnum2 != 2 || strncmp(xtchar2,"B",1) != 0)
   flag = 0;
if ( xtnum3 != 2 || strncmp(xtchar3,"C",1) != 0)
   flag = 0;
if ( xtnum4 != 2 || strncmp(xtchar4,"C",1) != 0)
   flag = 0;
printf("\n");

P108:
printf("CLOSE d;\n");
EXEC SQL CLOSE d;
CHCKOK();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");


     if ( flag == 1 )
       {
          printf("\n\n       xts733.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7033','pass','PC');
       }
     else
       {
          printf("\n\n       xts733.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7033','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7033 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

/*  EMBEDDED C (file " XTS740.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS740.PC              TEST7040                             */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  COUNT(ALL <column name>) with Nulls in column                */ 
/*                                                               */
/*  REFERENCES                                                   */
/*    6.5  -- <Set function specification>                       */
/*    6.5  GR.1b                                                 */
/*    6.5  GR.2                                                  */
/*    6.5  SR.1                                                  */
/*    F#44 -- Intermediate set function                          */
/*    F#5  -- DATETIME data types                                */
/*                                                               */
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 07/12/95                    */
/*         Print timestamp                                       */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*                                                               */
/*  QA STATUS : FC                                               */
/*                                                               */
/*  Revised by DWF 1996-02-09                                    */
/*    Removed field widths in printfs                            */
/*    Removed coding rules violations                            */
/*    Minor cleanup                                              */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 long cncols;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts740.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf(" \n Time Run :  %s \n ", ctime(&cal));

/******************** BEGIN TEST7040 ********************/
 flag = 1;

printf("                     TEST7040\n");  
printf("    COUNT(ALL <column name>) with Nulls in column \n"); 
printf(" References:\n");
printf("    6.5  -- <Set function specification> \n");   
printf("    6.5  GR.1b                           \n");
printf("    6.5  GR.2                            \n");
printf("    6.5  SR.1                            \n");
printf("    F#44 -- Intermediate set function    \n");                   
printf("    F#5  -- DATETIME data types          \n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* Ensure that the table EMPTY740 is empty. */
EXEC SQL DELETE FROM EMPTY740;

/* use an empty table EMPTY740 from the standard schema */
/* and count every column and check returned results    */
/* we expect a zero so initialise host variable to      */ 
/* a value other than the expected                      */
cncols = 9;
printf("SELECT COUNT(ALL COL_1) INTO :cncols\n"); 
printf("FROM EMPTY740;\n");
EXEC SQL SELECT COUNT(ALL COL_1) INTO :cncols
         FROM EMPTY740;
CHCKOK(); 
printf("Count should be zero; its value is %ld\n",cncols);
if (cncols != 0)
   flag = 0;
printf("\n");

/* count occurences of the second column of EMPTY740 */    
cncols = 9;
printf("SELECT COUNT(COL_2) INTO :cncols\n"); 
printf("FROM EMPTY740;\n");
EXEC SQL SELECT COUNT(COL_2) INTO :cncols
         FROM EMPTY740;
CHCKOK(); 
printf("Count should be zero; its value is %ld\n",cncols);
if (cncols != 0)
   flag = 0;
printf("\n");

/* count occurences of the third column of EMPTY740 */    
cncols = 9;
printf("SELECT COUNT(COL_3) INTO :cncols\n"); 
printf("FROM EMPTY740;\n");
EXEC SQL SELECT COUNT(COL_3) INTO :cncols
         FROM EMPTY740;
CHCKOK(); 
printf("Count should be zero; its value is %ld\n",cncols);
if (cncols != 0)
   flag = 0;
printf("\n");

/* count occurences of the fourth column of EMPTY740 */    
cncols = 9;
printf("SELECT COUNT(COL_4) INTO :cncols\n"); 
printf("FROM EMPTY740;\n");
EXEC SQL SELECT COUNT(COL_4) INTO :cncols
         FROM EMPTY740;
CHCKOK(); 
printf("Count should be zero; its value is %ld\n",cncols);
if (cncols != 0)
   flag = 0;
printf("\n");

/* count occurences of the fifth column of EMPTY740 */    
printf("SELECT COUNT(ALL COL_5) INTO :cncols\n"); 
printf("FROM EMPTY740;\n");
EXEC SQL SELECT COUNT(ALL COL_5) INTO :cncols
         FROM EMPTY740;
CHCKOK(); 
printf("Count should be zero; its value is %ld\n",cncols);
if (cncols != 0)
   flag = 0;
printf("\n");

/* Insert five rows in table EMPTY740 in order to test */
/* variations of COUNT */
printf("INSERT INTO EMPTY740\n");
printf("VALUES('NICKOS','NICK',NULL,116,TIME'09:30:30');\n");
EXEC SQL INSERT INTO EMPTY740 
         VALUES('NICKOS','NICK',NULL,116,TIME'09:30:30');
CHCKOK();
printf("\n");

printf("INSERT INTO EMPTY740\n");
printf("VALUES('MARIA',NULL,NULL,NULL,TIME'15:43:52');\n");
EXEC SQL INSERT INTO EMPTY740 
         VALUES('MARIA',NULL,NULL,NULL,TIME'15:43:52');
CHCKOK();
printf("\n");

printf("INSERT INTO EMPTY740\n");
printf("VALUES('KILLER','BUCK',NULL,127,TIME'15:43:52');\n");
EXEC SQL INSERT INTO EMPTY740 
         VALUES('KILLER','BUCK',NULL,127,TIME'15:43:52');
CHCKOK();
printf("\n");

printf("INSERT INTO EMPTY740\n");
printf("VALUES('JOYCE',NULL,NULL,17,TIME'12:53:13');\n");
EXEC SQL INSERT INTO EMPTY740 
         VALUES('JOYCE',NULL,NULL,17,TIME'12:53:13');
CHCKOK();
printf("\n");

printf("INSERT INTO EMPTY740\n");
printf("VALUES('ANGIE','TREE',NULL,7,TIME'16:29:22');\n");
EXEC SQL INSERT INTO EMPTY740 
         VALUES('ANGIE','TREE',NULL,7,TIME'16:29:22');
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* 1st SELECT statement: single row  */
cncols = 0;
printf("SELECT COUNT(COL_1) INTO :cncols FROM EMPTY740;\n"); 
EXEC SQL SELECT COUNT(COL_1) INTO :cncols FROM EMPTY740;
CHCKOK();   
printf("Count should be    5; its value is %ld\n",cncols);
if (cncols != 5)
   flag = 0;
printf("\n");

/* 2nd SELECT statement: single row  */
cncols = 0;
printf("SELECT COUNT(ALL COL_2) INTO :cncols FROM EMPTY740;\n"); 
EXEC SQL SELECT COUNT(ALL COL_2) INTO :cncols FROM EMPTY740;
printf("Count should be        3; its value is %ld\n",cncols);
printf("SQLSTATE should be 01003; its value is %s\n",SQLSTATE);
if (cncols != 3 || strncmp(SQLSTATE,"01003",5) != 0)
   flag = 0;
printf("\n");

/* 3d SELECT statement: single row  */
cncols = 9;
printf("SELECT COUNT(ALL COL_3) INTO :cncols FROM EMPTY740;\n"); 
EXEC SQL SELECT COUNT(ALL COL_3) INTO :cncols FROM EMPTY740;
printf("Count should be     zero; its value is %ld\n",cncols);
printf("SQLSTATE should be 01003; its value is %s\n",SQLSTATE);
if (cncols != 0 || strncmp(SQLSTATE,"01003",5) != 0)
   flag = 0;
printf("\n");

/* 4th  SELECT statement: single row  */
cncols = 0;
printf("SELECT COUNT(ALL COL_4) INTO :cncols FROM EMPTY740;\n"); 
EXEC SQL SELECT COUNT(ALL COL_4) INTO :cncols FROM EMPTY740;
printf("Count should be        4; its value is %ld\n",cncols);
printf("SQLSTATE should be 01003; its value is %s\n",SQLSTATE);
if (cncols != 4 || strncmp(SQLSTATE,"01003",5) != 0)
   flag = 0;
printf("\n");

/* 5th SELECT statement: single row  */
cncols = 0;
printf("SELECT COUNT(ALL COL_5) INTO :cncols FROM EMPTY740;\n"); 
EXEC SQL SELECT COUNT(ALL COL_5) INTO :cncols FROM EMPTY740;
CHCKOK();   
printf("Count should be        5; its value is %ld\n",cncols);
if (cncols != 5)
   flag = 0;
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* Clean-up database */
printf("DELETE FROM EMPTY740;\n");
EXEC SQL DELETE FROM EMPTY740;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* Now record results of the tests */ 

     if ( flag == 1 )
       {
          printf("\n\n       xts740.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7040','pass','PC');
       }
     else
       {
          printf("\n\n       xts740.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7040','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7040 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

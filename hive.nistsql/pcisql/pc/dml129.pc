/*  EMBEDDED C (file "DML129.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1994/7/26 EMBEDDED C LANGUAGE                           */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  DML129.PC                                                    */
/*  WRITTEN BY:  David W. Flater                                 */
/*                                                               */
/*  This routine tests several VARCHAR-related items.  It is     */
/*  applicable in C, PL/I, and MUMPS.                            */
/*                                                               */
/*  REFERENCES                                                   */
/*    FIPS PUB 127-2 14.1 Transitional SQL                       */
/*    ANSI SQL-1992                                              */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
char st[6];
varchar co[51];
varchar sco[51];
varchar nl1[2];
varchar nl2[2];
varchar nl3[2];
varchar nl4[2];
varchar nl5[2];
varchar mtxt[51];
long mlen;
long omlen;
long tlen;
long int1;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"FLATER            ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, dml129.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0676 ********************/
flag = 1;

     printf("                  TEST0676 \n");
     printf("           Diagnostics:  VARCHAR\n");
     printf("This test is only applicable in C, PL/I, and MUMPS.\n");
     printf("References:\n");
     printf("    F# 12 -- Get diagnostics\n");
     printf("    18.1 -- <get diagnostics statement>\n");
     printf("    F# 6 -- VARCHAR data type\n");

     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("INSERT INTO HU.STAFF VALUES (\n");
printf("  '000', 'Loser', 1 / 0, 'Baltimore');\n");
EXEC SQL INSERT INTO HU.STAFF VALUES (
  '000', 'Loser', 1 / 0, 'Baltimore');
printf ("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
SQLSTATE[5] = '\0';
printf ("SQLSTATE should be 22012; its value is %s\n\n", SQLSTATE);
if (strcmp (SQLSTATE, "22012") != 0)
  flag = 0;

int1 = -1;
strcpy (st, "xxxxx");
strcpy (co, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy (sco, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
strcpy (nl1, "x");
strcpy (nl2, "x");
strcpy (nl3, "x");
strcpy (nl4, "x");
strcpy (nl5, "x");
strcpy (mtxt, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
mlen = -1;
omlen = -1;
printf("GET DIAGNOSTICS EXCEPTION 1\n");
printf("  :int1 = CONDITION_NUMBER, :st = RETURNED_SQLSTATE,\n");
printf("  :co = CLASS_ORIGIN, :sco = SUBCLASS_ORIGIN,\n");
printf("  :nl1 = CONSTRAINT_SCHEMA, :nl2 = SCHEMA_NAME,\n");
printf("  :nl3 = TABLE_NAME, :nl4 = COLUMN_NAME,\n");
printf("  :nl5 = CURSOR_NAME, :mtxt = MESSAGE_TEXT,\n");
printf("  :mlen = MESSAGE_LENGTH, :omlen = MESSAGE_OCTET_LENGTH;\n");
EXEC SQL GET DIAGNOSTICS EXCEPTION 1
  :int1 = CONDITION_NUMBER, :st = RETURNED_SQLSTATE,
  :co = CLASS_ORIGIN, :sco = SUBCLASS_ORIGIN,
  :nl1 = CONSTRAINT_SCHEMA, :nl2 = SCHEMA_NAME,
  :nl3 = TABLE_NAME, :nl4 = COLUMN_NAME,
  :nl5 = CURSOR_NAME, :mtxt = MESSAGE_TEXT,
  :mlen = MESSAGE_LENGTH, :omlen = MESSAGE_OCTET_LENGTH;
printf ("SQLCODE should be >= 0; its value is %ld\n", SQLCODE);
if (SQLCODE < 0)
  flag = 0;
SQLSTATE[5] = '\0';
printf ("SQLSTATE should be 00000 or 01004; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "00000", 5) != 0 && strncmp (NORMSQ, "01004", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf ("int1 should be 1; its value is %ld\n", int1);
if (int1 != 1)
  flag = 0;
st[5] = '\0';
printf ("st should be 22012; its value is %s\n", st);
if (strcmp (st, "22012") != 0)
  flag = 0;
co[50] = '\0';
printf ("co should be ISO 9075; its value is '%s'\n", co);
if (strcmp (co, "ISO 9075") != 0)
  flag = 0;
sco[50] = '\0';
printf ("sco should be ISO 9075; its value is '%s'\n", sco);
if (strcmp (sco, "ISO 9075") != 0)
  flag = 0;
nl1[1] = '\0';
printf ("nl1 should be 0-length; its value is '%s'\n", nl1);
if (strcmp (nl1, "") != 0)
  flag = 0;
nl2[1] = '\0';
printf ("nl2 should be 0-length; its value is '%s'\n", nl2);
if (strcmp (nl2, "") != 0)
  flag = 0;
nl3[1] = '\0';
printf ("nl3 should be 0-length; its value is '%s'\n", nl3);
if (strcmp (nl3, "") != 0)
  flag = 0;
nl4[1] = '\0';
printf ("nl4 should be 0-length; its value is '%s'\n", nl4);
if (strcmp (nl4, "") != 0)
  flag = 0;
nl5[1] = '\0';
printf ("nl5 should be 0-length; its value is '%s'\n", nl5);
if (strcmp (nl5, "") != 0)
  flag = 0;

mtxt[50] = '\0';

/* UNTRANSLATABLE FUNCTION CALL:  strlen */
tlen = strlen (mtxt);

printf ("mtxt should be blank or set to a value; its value is '%s'\n", mtxt);
printf ("mlen should be >= 0; its value is %ld\n", mlen);
printf ("omlen should be %ld; its value is is %ld\n\n", tlen, omlen);
if (strcmp (mtxt, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx") == 0)
  flag = 0;
if (mlen < 0 || omlen != tlen)
  flag = 0;

printf ("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0676','pass','PC');
       }
     else
       {
          printf("\n\n       dml129.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0676','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0676 *********************/
/******************** BEGIN TEST0677 ********************/
flag = 1;

     printf("                  TEST0677 \n");
     printf("         VARCHAR with <like predicate>\n");
     printf("This test is only applicable in C, PL/I, and MUMPS.\n");
     printf("References:\n");
     printf("    F# 6 -- VARCHAR data type\n");
     printf("    8.5 -- <like predicate>\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("CREATE TABLE FREON (\n");
printf("  R12 CHARACTER VARYING (10));\n");
EXEC SQL CREATE TABLE FREON (
  R12 CHARACTER VARYING (10));

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("INSERT INTO FREON VALUES ('Cool');\n");
EXEC SQL INSERT INTO FREON VALUES ('Cool');
CHCKOK ();
printf("\n");

printf("INSERT INTO FREON VALUES ('Cool ');\n");
EXEC SQL INSERT INTO FREON VALUES ('Cool ');
CHCKOK ();
printf("\n");

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM FREON\n");
printf("  WHERE R12 LIKE 'Cool';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM FREON
  WHERE R12 LIKE 'Cool';
CHCKOK ();
printf ("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM FREON\n");
printf("  WHERE R12 LIKE 'Cool ';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM FREON
  WHERE R12 LIKE 'Cool ';
CHCKOK ();
printf ("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = -1;
strcpy(sco,"Cool%");
printf("strcpy(sco,\"Cool%%\");\n");
printf("SELECT COUNT(*) INTO :int1 FROM FREON\n");
printf("  WHERE R12 LIKE :sco;\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM FREON
  WHERE R12 LIKE :sco;
CHCKOK ();
printf ("int1 should be 2; its value is %ld\n\n", int1);
if (int1 != 2)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM FREON\n");
printf("  WHERE R12 LIKE 'Cool %%';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM FREON
  WHERE R12 LIKE 'Cool %';
CHCKOK ();
printf ("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/* 8.5 GR.5.a */
printf("strcpy(nl1,\"\");\n");
strcpy(nl1,"");
printf("INSERT INTO FREON VALUES (:nl1);\n");
EXEC SQL INSERT INTO FREON VALUES (:nl1);
CHCKOK ();

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM FREON\n");
printf("  WHERE R12 LIKE :nl1;\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM FREON
  WHERE R12 LIKE :nl1;
CHCKOK ();
printf ("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM FREON CENTIGRADE, FREON FAHRENHEIT\n");
printf("  WHERE CENTIGRADE.R12 LIKE FAHRENHEIT.R12;\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM FREON CENTIGRADE, FREON FAHRENHEIT
  WHERE CENTIGRADE.R12 LIKE FAHRENHEIT.R12;
CHCKOK ();
printf ("int1 should be 3; its value is %ld\n\n", int1);
if (int1 != 3)
  flag = 0;

/* 8.2 GR.3.a */
int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM FREON CENTIGRADE, FREON FAHRENHEIT\n");
printf("  WHERE CENTIGRADE.R12 = FAHRENHEIT.R12;\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM FREON CENTIGRADE, FREON FAHRENHEIT
  WHERE CENTIGRADE.R12 = FAHRENHEIT.R12;
CHCKOK ();
printf ("int1 should be 5; its value is %ld\n\n", int1);
if (int1 != 5)
  flag = 0;

printf ("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP TABLE FREON RESTRICT;\n");
EXEC SQL DROP TABLE FREON RESTRICT;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0677','pass','PC');
       }
     else
       {
          printf("\n\n       dml129.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0677','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0677 *********************/
/******************** BEGIN TEST0681 ********************/
flag = 1;

     printf("                  TEST0681 \n");
     printf("      INFO_SCHEM:  Varchar data types\n");
     printf("This test is only applicable in C, PL/I, and MUMPS.\n");
     printf("References:\n");
     printf("    F# 6 -- VARCHAR data type\n");
     printf("    F# 2 -- Basic information schema\n");
     printf("    FIPS Change Notice #1 -- Shortened identifiers\n");
     printf("      in INFO_SCHEM\n");
     printf("    TC #2 21.2.9 -- Interval columns in COLUMNS view\n\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("CREATE TABLE ISVC1 (\n");
printf("  NAAM VARCHAR (20));\n");
EXEC SQL CREATE TABLE ISVC1 (
  NAAM VARCHAR (20));
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("CREATE VIEW ISVC2 (NAAM, NUMBUR) AS\n");
printf("  SELECT NAAM, EMPNUM FROM ISVC1, HU.STAFF\n");
printf("  WHERE NAAM = EMPNAME;\n");
EXEC SQL CREATE VIEW ISVC2 (NAAM, NUMBUR) AS
  SELECT NAAM, EMPNUM FROM ISVC1, HU.STAFF
  WHERE NAAM = EMPNAME;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'ISVC1'\n");
printf("  AND TABLE_TYPE = 'BASE TABLE';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'ISVC1'
  AND TABLE_TYPE = 'BASE TABLE';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = -2;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.VIEWS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'ISVC1';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.VIEWS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'ISVC1';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'ISVC2'\n");
printf("  AND TABLE_TYPE = 'VIEW';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'ISVC2'
  AND TABLE_TYPE = 'VIEW';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.VIEWS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'ISVC2';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.VIEWS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'ISVC2';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'ISVC1'\n");
printf("  AND COLUMN_NAME = 'NAAM' AND ORDINAL_POSITION = 1\n");
printf("  AND COLUMN_DEF IS NULL AND IS_NULLABLE = 'YES'\n");
printf("  AND DATA_TYPE = 'CHARACTER VARYING' AND\n");
printf("  CHAR_MAX_LENGTH = 20 AND CHAR_OCTET_LENGTH > 14\n");
printf("  AND NUM_PREC IS NULL AND NUM_PREC_RADIX IS NULL\n");
printf("  AND NUM_SCALE IS NULL AND DATETIME_PREC IS NULL\n");
printf("  AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS NULL;\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'ISVC1'
  AND COLUMN_NAME = 'NAAM' AND ORDINAL_POSITION = 1
  AND COLUMN_DEF IS NULL AND IS_NULLABLE = 'YES'
  AND DATA_TYPE = 'CHARACTER VARYING' AND
  CHAR_MAX_LENGTH = 20 AND CHAR_OCTET_LENGTH > 14
  AND NUM_PREC IS NULL AND NUM_PREC_RADIX IS NULL
  AND NUM_SCALE IS NULL AND DATETIME_PREC IS NULL
  AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS NULL;
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'ISVC2'\n");
printf("  AND COLUMN_NAME = 'NAAM' AND ORDINAL_POSITION = 1\n");
printf("  AND COLUMN_DEF IS NULL AND IS_NULLABLE = 'YES'\n");
printf("  AND DATA_TYPE = 'CHARACTER VARYING' AND\n");
printf("  CHAR_MAX_LENGTH = 20 AND CHAR_OCTET_LENGTH > 14\n");
printf("  AND NUM_PREC IS NULL AND NUM_PREC_RADIX IS NULL\n");
printf("  AND NUM_SCALE IS NULL AND DATETIME_PREC IS NULL\n");
printf("  AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS NULL;\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'ISVC2'
  AND COLUMN_NAME = 'NAAM' AND ORDINAL_POSITION = 1
  AND COLUMN_DEF IS NULL AND IS_NULLABLE = 'YES'
  AND DATA_TYPE = 'CHARACTER VARYING' AND
  CHAR_MAX_LENGTH = 20 AND CHAR_OCTET_LENGTH > 14
  AND NUM_PREC IS NULL AND NUM_PREC_RADIX IS NULL
  AND NUM_SCALE IS NULL AND DATETIME_PREC IS NULL
  AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS NULL;
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'ISVC2'\n");
printf("  AND COLUMN_NAME = 'NUMBUR' AND ORDINAL_POSITION = 2\n");
printf("  AND COLUMN_DEF IS NULL AND IS_NULLABLE = 'NO'\n");
printf("  AND DATA_TYPE = 'CHARACTER' AND\n");
printf("  CHAR_MAX_LENGTH = 3 AND CHAR_OCTET_LENGTH > 2\n");
printf("  AND NUM_PREC IS NULL AND NUM_PREC_RADIX IS NULL\n");
printf("  AND NUM_SCALE IS NULL AND DATETIME_PREC IS NULL\n");
printf("  AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS NULL;\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'ISVC2'
  AND COLUMN_NAME = 'NUMBUR' AND ORDINAL_POSITION = 2
  AND COLUMN_DEF IS NULL AND IS_NULLABLE = 'NO'
  AND DATA_TYPE = 'CHARACTER' AND
  CHAR_MAX_LENGTH = 3 AND CHAR_OCTET_LENGTH > 2
  AND NUM_PREC IS NULL AND NUM_PREC_RADIX IS NULL
  AND NUM_SCALE IS NULL AND DATETIME_PREC IS NULL
  AND INTERVAL_TYPE IS NULL AND INTERVAL_PREC IS NULL;
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

printf ("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP TABLE ISVC1 CASCADE;\n");
EXEC SQL DROP TABLE ISVC1 CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0681','pass','PC');
       }
     else
       {
          printf("\n\n       dml129.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0681','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0681 *********************/
     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

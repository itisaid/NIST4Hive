/*  EMBEDDED C (file "DML160.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1995/12/11 EMBEDDED C LANGUAGE                          */
/*  SQL VALIDATION TEST SUITE V6.0                          */
/* DISCLAIMER:                                                  */
/* This program was written by employees of NIST to test SQL    */
/* implementations for conformance to the SQL standards.        */
/* NIST assumes no responsibility for any party's use of        */
/* this program.                                                */
/*                                                               */
/*  DML160.PC                                                    */
/*  WRITTEN BY:  David Flater                                    */
/*                                                               */
/*  This routine tests joined tables.                            */
/*                                                               */
/*  REFERENCES                                                   */
/*    FIPS PUB 127-2 14.2 Intermediate SQL                       */
/*    ANSI SQL-1992                                              */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
char emnum[4];
long cnth;
long xhour;
long xminit;
float flt1;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"FLATER            ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, dml160.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0859 ********************/
flag = 1;

     printf("                  TEST0859\n");
     printf("  <joined table> contained in <select list>\n");
     printf("References:\n");
     printf("    7.5 SR.4.b -- set function in <join condition>\n");
     printf("    F# 4 -- Joined table\n");
     printf("    F# 47 -- Scalar subquery values\n");
     printf("    6.11 LR.2.e\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* <join condition> ::= ON <search condition> */

/* Count the number of projects that each employee is working on */
/* that meet certain budgetary criteria */

printf("DECLARE C16011 CURSOR FOR\n");
printf("  SELECT EMPNUM, (SELECT COUNT(*) FROM HU.WORKS JOIN HU.PROJ\n");
printf("  ON HU.WORKS.PNUM = HU.PROJ.PNUM\n");
printf("  AND BUDGET > AVG (OSTAFF.GRADE) * 1000\n");
printf("  WHERE HU.WORKS.EMPNUM = OSTAFF.EMPNUM) FROM HU.STAFF AS OSTAFF\n");
printf("  ORDER BY 2, 1;\n\n");
EXEC SQL DECLARE C16011 CURSOR FOR
  SELECT EMPNUM, (SELECT COUNT(*) FROM HU.WORKS JOIN HU.PROJ
  ON HU.WORKS.PNUM = HU.PROJ.PNUM
  AND BUDGET > AVG (OSTAFF.GRADE) * 1000
  WHERE HU.WORKS.EMPNUM = OSTAFF.EMPNUM) FROM HU.STAFF AS OSTAFF
  ORDER BY 2, 1;

printf("OPEN C16011;\n");
EXEC SQL OPEN C16011;
CHCKOK ();
printf("\n");

strcpy (emnum, "xxx");
cnth = -1;
printf("FETCH C16011 INTO :emnum, :cnth;\n");
EXEC SQL FETCH C16011 INTO :emnum, :cnth;
CHCKOK ();
printf ("emnum should be 'E5 '; its value is '%s'\n", emnum);
printf ("cnth should be 0; its value is %ld\n\n", cnth);
if (strcmp (emnum, "E5 ") != 0 || cnth != 0)
  flag = 0;

strcpy (emnum, "xxx");
cnth = -1;
printf("FETCH C16011 INTO :emnum, :cnth;\n");
EXEC SQL FETCH C16011 INTO :emnum, :cnth;
CHCKOK ();
printf ("emnum should be 'E2 '; its value is '%s'\n", emnum);
printf ("cnth should be 1; its value is %ld\n\n", cnth);
if (strcmp (emnum, "E2 ") != 0 || cnth != 1)
  flag = 0;

strcpy (emnum, "xxx");
cnth = -1;
printf("FETCH C16011 INTO :emnum, :cnth;\n");
EXEC SQL FETCH C16011 INTO :emnum, :cnth;
CHCKOK ();
printf ("emnum should be 'E3 '; its value is '%s'\n", emnum);
printf ("cnth should be 1; its value is %ld\n\n", cnth);
if (strcmp (emnum, "E3 ") != 0 || cnth != 1)
  flag = 0;

strcpy (emnum, "xxx");
cnth = -1;
printf("FETCH C16011 INTO :emnum, :cnth;\n");
EXEC SQL FETCH C16011 INTO :emnum, :cnth;
CHCKOK ();
printf ("emnum should be 'E4 '; its value is '%s'\n", emnum);
printf ("cnth should be 2; its value is %ld\n\n", cnth);
if (strcmp (emnum, "E4 ") != 0 || cnth != 2)
  flag = 0;

strcpy (emnum, "xxx");
cnth = -1;
printf("FETCH C16011 INTO :emnum, :cnth;\n");
EXEC SQL FETCH C16011 INTO :emnum, :cnth;
CHCKOK ();
printf ("emnum should be 'E1 '; its value is '%s'\n", emnum);
printf ("cnth should be 4; its value is %ld\n\n", cnth);
if (strcmp (emnum, "E1 ") != 0 || cnth != 4)
  flag = 0;

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0859','pass','PC');
       }
     else
       {
          printf("\n\n       dml160.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0859','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0859 *********************/
/******************** BEGIN TEST0860 ********************/
flag = 1;

     printf("                  TEST0860\n");
     printf("      Domains over various data types\n");
     printf("References:\n");
     printf("    F# 25 -- Domain definition\n");
     printf("    F# 41 -- Time zone specification\n");
     printf("    F# 5 -- DATETIME data types\n");
     printf("    F# 6 -- VARCHAR data type\n");
     printf("    F# 8 -- Union in views\n");
     printf("    F# 17 -- Multiple schemas per user\n");
     printf("    F# 20 -- CAST functions\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* Some people insist on using epochs outside of the traditional */
/* 0 to 360 range, so may as well use implementation-defined */
/* precision too. */
printf("CREATE DOMAIN EPOCH_NOT_NORM AS DECIMAL (5, 2);\n");
EXEC SQL CREATE DOMAIN EPOCH_NOT_NORM AS DECIMAL (5, 2);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* Similar, for people who think in radians */
printf("CREATE DOMAIN RAD_EPOCH_TYPE FLOAT (20)\n");
printf("  CHECK (VALUE BETWEEN 0E0 AND 2E0 * 3.1416E0);\n");
EXEC SQL CREATE DOMAIN RAD_EPOCH_TYPE FLOAT (20)
  CHECK (VALUE BETWEEN 0E0 AND 2E0 * 3.1416E0);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("CREATE DOMAIN RAD_EPOCH_NOT_NORM REAL;\n");
EXEC SQL CREATE DOMAIN RAD_EPOCH_NOT_NORM REAL;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* We only have data for 1994 through 2025 */
printf("CREATE DOMAIN TIDEDATE AS DATE\n");
printf("  CHECK (VALUE BETWEEN DATE '1994-01-01' AND DATE '2025-12-31');\n");
EXEC SQL CREATE DOMAIN TIDEDATE AS DATE
  CHECK (VALUE BETWEEN DATE '1994-01-01' AND DATE '2025-12-31');
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("CREATE DOMAIN TIDETIMESTAMP AS TIMESTAMP WITH TIME ZONE\n");
printf("  CHECK (VALUE BETWEEN TIMESTAMP '1994-01-01 00:00:00+00:00'\n");
printf("  AND TIMESTAMP '2025-12-31 23:59:59+00:00');\n");
EXEC SQL CREATE DOMAIN TIDETIMESTAMP AS TIMESTAMP WITH TIME ZONE
  CHECK (VALUE BETWEEN TIMESTAMP '1994-01-01 00:00:00+00:00'
  AND TIMESTAMP '2025-12-31 23:59:59+00:00');
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* ...and furthermore, we have very specific notions about dinner. */
printf("CREATE DOMAIN DINNERTIME AS TIME\n");
printf("  CHECK (VALUE BETWEEN TIME '17:30:00' AND TIME '19:00:00');\n");
EXEC SQL CREATE DOMAIN DINNERTIME AS TIME
  CHECK (VALUE BETWEEN TIME '17:30:00' AND TIME '19:00:00');
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* Re-invent the wheel in our default schema because we have non- */
/* normalized data and think in radians.  Eventually the non- */
/* normalized data will be normalized and moved into the main */
/* schema (we hope). */

printf("CREATE TABLE CONST_NOT_NORM (\n");
printf("  LOC_ID DEC (7) NOT NULL,\n");
printf("  CONST_ID TIDES.CONST_ID_TYPE NOT NULL,\n");
printf("  UNIQUE (LOC_ID, CONST_ID),\n");
printf("  AMPLITUDE TIDES.AMPLITUDE_TYPE,\n");
printf("  EPOCH EPOCH_NOT_NORM);\n");
EXEC SQL CREATE TABLE CONST_NOT_NORM (
  LOC_ID DEC (7) NOT NULL,
  CONST_ID TIDES.CONST_ID_TYPE NOT NULL,
  UNIQUE (LOC_ID, CONST_ID),
  AMPLITUDE TIDES.AMPLITUDE_TYPE,
  EPOCH EPOCH_NOT_NORM);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("CREATE VIEW CONST_RAD (LOC_ID, CONST_ID,\n");
printf("  AMPLITUDE, EPOCH) AS\n");
printf("  SELECT LOC_ID, CONST_ID, AMPLITUDE,\n");
printf("  CAST (EPOCH * 3.14159265358979E0 / 180E0 AS RAD_EPOCH_TYPE)\n");
printf("  FROM TIDES.CONSTITUENTS;\n");
EXEC SQL CREATE VIEW CONST_RAD (LOC_ID, CONST_ID,
  AMPLITUDE, EPOCH) AS
  SELECT LOC_ID, CONST_ID, AMPLITUDE,
  CAST (EPOCH * 3.14159265358979E0 / 180E0 AS RAD_EPOCH_TYPE)
  FROM TIDES.CONSTITUENTS;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("CREATE VIEW CONST_RAD_NOT_NORM (LOC_ID, CONST_ID,\n");
printf("  AMPLITUDE, EPOCH) AS\n");
printf("  SELECT LOC_ID, CONST_ID, AMPLITUDE,\n");
printf("  CAST (EPOCH * 3.14159265358979E0 / 180E0 AS RAD_EPOCH_NOT_NORM)\n");
printf("  FROM CONST_NOT_NORM;\n");
EXEC SQL CREATE VIEW CONST_RAD_NOT_NORM (LOC_ID, CONST_ID,
  AMPLITUDE, EPOCH) AS
  SELECT LOC_ID, CONST_ID, AMPLITUDE,
  CAST (EPOCH * 3.14159265358979E0 / 180E0 AS RAD_EPOCH_NOT_NORM)
  FROM CONST_NOT_NORM;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* List of tide predictions that are pending */

printf("CREATE TABLE PENDING (\n");
printf("  LOC_ID DEC (7) NOT NULL,\n");
printf("  FROMTIME TIDETIMESTAMP NOT NULL,\n");
printf("  TOTIME TIDETIMESTAMP NOT NULL,\n");
printf("  CHECK (FROMTIME <= TOTIME),\n");
printf("  JOB_ID INT PRIMARY KEY);\n");
EXEC SQL CREATE TABLE PENDING (
  LOC_ID DEC (7) NOT NULL,
  FROMTIME TIDETIMESTAMP NOT NULL,
  TOTIME TIDETIMESTAMP NOT NULL,
  CHECK (FROMTIME <= TOTIME),
  JOB_ID INT PRIMARY KEY);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* The data for the starting and ending days are hand-verified */

/* 6.10 GR.9.c  Casting timestamp to date throws out the time */
/* part.  Which is good, considering that you can't */
/* EXTRACT (DATE FROM TIDEDATE). */

printf("CREATE VIEW CHECK_PTS (CHECK_DATES, JOB_ID, FLAG) AS\n");
printf("  SELECT CAST (FROMTIME AS TIDEDATE), JOB_ID,\n");
printf("  CAST (0 AS INT) FROM PENDING\n");
printf("    UNION\n");
printf("  SELECT CAST (TOTIME AS TIDEDATE), JOB_ID,\n");
printf("  CAST (1 AS INT) FROM PENDING;\n");
EXEC SQL CREATE VIEW CHECK_PTS (CHECK_DATES, JOB_ID, FLAG) AS
  SELECT CAST (FROMTIME AS TIDEDATE), JOB_ID,
  CAST (0 AS INT) FROM PENDING
    UNION
  SELECT CAST (TOTIME AS TIDEDATE), JOB_ID,
  CAST (1 AS INT) FROM PENDING;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("CREATE TABLE DINNER_CLUB (\n");
printf("  LOC_ID DEC (7) NOT NULL,\n");
printf("  DINNER DINNERTIME);\n");
EXEC SQL CREATE TABLE DINNER_CLUB (
  LOC_ID DEC (7) NOT NULL,
  DINNER DINNERTIME);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* First try out the DOUBLE PRECISION and INTERVAL domains that are */
/* already in TIDES. */

xhour = 500;
xminit = 500;
printf("SELECT EXTRACT (HOUR FROM MERIDIAN), EXTRACT\n");
printf("  (MINUTE FROM MERIDIAN) INTO :xhour, :xminit\n");
printf("  FROM TIDES.LOCATIONS WHERE LOC_NAME LIKE '%Newfound%';\n");
EXEC SQL SELECT EXTRACT (HOUR FROM MERIDIAN), EXTRACT
  (MINUTE FROM MERIDIAN) INTO :xhour, :xminit
  FROM TIDES.LOCATIONS WHERE LOC_NAME LIKE '%Newfound%';
CHCKOK ();
/* Sign of results specified by 6.6 GR.3.a.i */
printf ("xhour should be -3; its value is %ld\n", xhour);
printf ("xminit should be -30; its value is %ld\n\n", xminit);
if (xhour != -3 || xminit != -30)
  flag = 0;

/* There is no GMT-13.  Violation of domain constraint 9.2 GR.4 */
/* Integrity constraint violation */

printf("INSERT INTO TIDES.LOCATIONS VALUES (\n");
printf("  300, 'Atlantis', 160.0000, 3.0000, 0, 1.2E0,\n");
printf("  INTERVAL -'13:00' HOUR TO MINUTE, 'GMT-13');\n");
EXEC SQL INSERT INTO TIDES.LOCATIONS VALUES (
  300, 'Atlantis', 160.0000, 3.0000, 0, 1.2E0,
  INTERVAL -'13:00' HOUR TO MINUTE, 'GMT-13');
printf ("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;
printf ("SQLSTATE should be 23000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "23000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "23000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf ("\n");

/* Negative amplitudes also illegal */

printf("UPDATE TIDES.CONSTITUENTS\n");
printf("  SET AMPLITUDE = - AMPLITUDE\n");
printf("  WHERE LOC_ID = 100\n");
printf("  AND CONST_ID = 0;\n");
EXEC SQL UPDATE TIDES.CONSTITUENTS
  SET AMPLITUDE = - AMPLITUDE
  WHERE LOC_ID = 100
  AND CONST_ID = 0;
printf ("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;
printf ("SQLSTATE should be 23000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "23000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "23000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf ("\n");

printf("INSERT INTO TIDES.LOCATIONS VALUES (300,\n");
printf("   'Bath, Maine', -69.8133, 43.9183,\n");
printf("   1, 3.422E0, INTERVAL '-05:00' HOUR TO MINUTE, ':US/Eastern');\n");
EXEC SQL INSERT INTO TIDES.LOCATIONS VALUES (300,
   'Bath, Maine', -69.8133, 43.9183,
   1, 3.422E0, INTERVAL '-05:00' HOUR TO MINUTE, ':US/Eastern');
CHCKOK ();
printf("\n");

/* Check constraint on normalized table */

printf("INSERT INTO TIDES.CONSTITUENTS VALUES (300, 2, 0.134E0, 385.0);\n");
EXEC SQL INSERT INTO TIDES.CONSTITUENTS VALUES (300, 2, 0.134E0, 385.0);
printf ("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;
printf ("SQLSTATE should be 23000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "23000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "23000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf ("\n");

/* Load up some non-normalized data */

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 0, 0.021E0, 151.6);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 0, 0.021E0, 151.6);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 1, 0.324E0, 144.5);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 1, 0.324E0, 144.5);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 2, 0.134E0, 385.0);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 2, 0.134E0, 385.0);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 3, 0.181E0, 40.9);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 3, 0.181E0, 40.9);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 4, 0.037E0, 150.0);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 4, 0.037E0, 150.0);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 5, 3.143E0, 352.3);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 5, 3.143E0, 352.3);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 6, 0.000E0, 50.0);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 6, 0.000E0, 50.0);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 7, 0.104E0, 242.8);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 7, 0.104E0, 242.8);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 8, 0.031E0, 158.6);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 8, 0.031E0, 158.6);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 9, 0.000E0, 133.3);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 9, 0.000E0, 133.3);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 10, 0.744E0, 322.0);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 10, 0.744E0, 322.0);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 11, 0.087E0, 307.4);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 11, 0.087E0, 307.4);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 12, 0.260E0, 130.4);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 12, 0.260E0, 130.4);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 13, 0.011E0, 158.7);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 13, 0.011E0, 158.7);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 14, 0.107E0, 140.8);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 14, 0.107E0, 140.8);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 15, 0.043E0, 114.3);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 15, 0.043E0, 114.3);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 16, 0.007E0, 116.4);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 16, 0.007E0, 116.4);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 17, 0.004E0, 383.2);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 17, 0.004E0, 383.2);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 18, 0.000E0, 17.3);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 18, 0.000E0, 17.3);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 19, 0.488E0, 383.4);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 19, 0.488E0, 383.4);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 20, 0.000E0, 69.0);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 20, 0.000E0, 69.0);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 21, 0.000E0, 103.5);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 21, 0.000E0, 103.5);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 22, 0.053E0, 365.8);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 22, 0.053E0, 365.8);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 23, 0.053E0, 37.3);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 23, 0.053E0, 37.3);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 24, 0.023E0, 297.8);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 24, 0.023E0, 297.8);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 25, 0.138E0, 328.3);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 25, 0.138E0, 328.3);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 26, 0.010E0, 124.4);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 26, 0.010E0, 124.4);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 27, 0.000E0, 50.6);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 27, 0.000E0, 50.6);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 28, 0.000E0, 49.4);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 28, 0.000E0, 49.4);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 29, 0.000E0, 66.0);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 29, 0.000E0, 66.0);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 30, 0.000E0, 67.8);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 30, 0.000E0, 67.8);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 31, 0.000E0, 35.7);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 31, 0.000E0, 35.7);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 32, 0.073E0, 285.0);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 32, 0.073E0, 285.0);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 33, 0.033E0, 257.3);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 33, 0.033E0, 257.3);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 34, 0.000E0, 0.6);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 34, 0.000E0, 0.6);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 35, 0.056E0, 128.8);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 35, 0.056E0, 128.8);
CHCKOK ();
printf ("\n");

printf("INSERT INTO CONST_NOT_NORM VALUES (300, 36, 0.038E0, 97.7);\n");
EXEC SQL INSERT INTO CONST_NOT_NORM VALUES (300, 36, 0.038E0, 97.7);
CHCKOK ();
printf ("\n");

flt1 = 0.0;
printf("SELECT EPOCH INTO :flt1 FROM CONST_RAD\n");
printf("  WHERE LOC_ID = 100\n");
printf("  AND CONST_ID = 0;\n");
EXEC SQL SELECT EPOCH INTO :flt1 FROM CONST_RAD
  WHERE LOC_ID = 100
  AND CONST_ID = 0;
CHCKOK ();
printf ("flt1 should be 2.11 += 0.01; its value is %f\n\n", flt1);
if (flt1 < 2.10 || flt1 > 2.12)
  flag = 0;

cnth = -1;
printf("SELECT COUNT(*) INTO :cnth\n");
printf("  FROM CONST_RAD_NOT_NORM\n");
printf("  WHERE EPOCH > 6.2831853E0;\n");
EXEC SQL SELECT COUNT(*) INTO :cnth
  FROM CONST_RAD_NOT_NORM
  WHERE EPOCH > 6.2831853E0;
CHCKOK ();
printf ("cnth should be 4; its value is %ld\n\n", cnth);
if (cnth != 4)
  flag = 0;

printf("INSERT INTO PENDING VALUES (\n");
printf("  300, TIMESTAMP '1995-12-15 00:00:00-05:00',\n");
printf("       TIMESTAMP '1995-12-17 00:00:00-05:00', 0);\n");
EXEC SQL INSERT INTO PENDING VALUES (
  300, TIMESTAMP '1995-12-15 00:00:00-05:00',
       TIMESTAMP '1995-12-17 00:00:00-05:00', 0);
CHCKOK ();
printf("\n");

/* Check that constraint. */
/* 7PM EST is 12AM GMT, which is outside the constraint */

printf("INSERT INTO PENDING VALUES (\n");
printf("  101, TIMESTAMP '2025-12-30 19:00:00-05:00',\n");
printf("       TIMESTAMP '2025-12-31 19:00:00-05:00', 1);\n");
EXEC SQL INSERT INTO PENDING VALUES (
  101, TIMESTAMP '2025-12-30 19:00:00-05:00',
       TIMESTAMP '2025-12-31 19:00:00-05:00', 1);
printf ("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;
printf ("SQLSTATE should be 23000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "23000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "23000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf ("\n");

printf("INSERT INTO PENDING VALUES (\n");
printf("  101, TIMESTAMP '2025-12-30 19:00:00-05:00',\n");
printf("       TIMESTAMP '2025-12-31 18:59:59-05:00', 1);\n");
EXEC SQL INSERT INTO PENDING VALUES (
  101, TIMESTAMP '2025-12-30 19:00:00-05:00',
       TIMESTAMP '2025-12-31 18:59:59-05:00', 1);
CHCKOK ();
printf("\n");

printf("INSERT INTO PENDING VALUES (\n");
printf("  102, TIMESTAMP '1993-12-31 19:00:00-05:00',\n");
printf("       TIMESTAMP '1994-01-02 00:00:00-05:00', 2);\n");
EXEC SQL INSERT INTO PENDING VALUES (
  102, TIMESTAMP '1993-12-31 19:00:00-05:00',
       TIMESTAMP '1994-01-02 00:00:00-05:00', 2);
CHCKOK ();
printf("\n");

/* 1993-12-31 19:00:00-05:00 is within the constraint because it's */
/* midnight GMT.  Unfortunately, when we cast it to TIDEDATE, */
/* it ends up being just 1993-12-31, which does not meet the */
/* constraint.  6.10 GR.9.c */

printf("SELECT EXTRACT (YEAR FROM CHECK_DATES)\n");
printf("  INTO :cnth\n");
printf("  FROM CHECK_PTS WHERE JOB_ID = 2 AND FLAG = 0;\n");
EXEC SQL SELECT EXTRACT (YEAR FROM CHECK_DATES)
  INTO :cnth
  FROM CHECK_PTS WHERE JOB_ID = 2 AND FLAG = 0;
printf ("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;
printf ("SQLSTATE should be 23000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "23000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "23000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf ("\n");

cnth = -1;
printf("SELECT EXTRACT (YEAR FROM CHECK_DATES)\n");
printf("  INTO :cnth\n");
printf("  FROM CHECK_PTS WHERE JOB_ID = 2 AND FLAG = 1;\n");
EXEC SQL SELECT EXTRACT (YEAR FROM CHECK_DATES)
  INTO :cnth
  FROM CHECK_PTS WHERE JOB_ID = 2 AND FLAG = 1;
CHCKOK ();
printf ("cnth should be 1994; its value is %ld\n\n", cnth);
if (cnth != 1994)
  flag = 0;

printf("INSERT INTO DINNER_CLUB VALUES\n");
printf("  (0, TIME '17:30:00');\n");
EXEC SQL INSERT INTO DINNER_CLUB VALUES
  (0, TIME '17:30:00');
CHCKOK ();
printf("\n");

printf("INSERT INTO DINNER_CLUB VALUES\n");
printf("  (1, CAST (TIME '18:00:00' AS DINNERTIME));\n");
EXEC SQL INSERT INTO DINNER_CLUB VALUES
  (1, CAST (TIME '18:00:00' AS DINNERTIME));
CHCKOK ();
printf("\n");

printf("INSERT INTO DINNER_CLUB VALUES\n");
printf("  (2, TIME '19:30:00');\n");
EXEC SQL INSERT INTO DINNER_CLUB VALUES
  (2, TIME '19:30:00');
printf ("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;
printf ("SQLSTATE should be 23000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "23000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "23000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf ("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* Clean up the mess */

printf("DROP DOMAIN EPOCH_NOT_NORM CASCADE;\n");
EXEC SQL DROP DOMAIN EPOCH_NOT_NORM CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("DROP DOMAIN RAD_EPOCH_TYPE CASCADE;\n");
EXEC SQL DROP DOMAIN RAD_EPOCH_TYPE CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("DROP DOMAIN RAD_EPOCH_NOT_NORM CASCADE;\n");
EXEC SQL DROP DOMAIN RAD_EPOCH_NOT_NORM CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("DROP DOMAIN TIDEDATE CASCADE;\n");
EXEC SQL DROP DOMAIN TIDEDATE CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("DROP DOMAIN TIDETIMESTAMP CASCADE;\n");
EXEC SQL DROP DOMAIN TIDETIMESTAMP CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("DROP DOMAIN DINNERTIME CASCADE;\n");
EXEC SQL DROP DOMAIN DINNERTIME CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("DROP TABLE CONST_NOT_NORM CASCADE;\n");
EXEC SQL DROP TABLE CONST_NOT_NORM CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("DROP VIEW CONST_RAD CASCADE;\n");
EXEC SQL DROP VIEW CONST_RAD CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("DROP TABLE PENDING CASCADE;\n");
EXEC SQL DROP TABLE PENDING CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("DROP TABLE DINNER_CLUB CASCADE;\n");
EXEC SQL DROP TABLE DINNER_CLUB CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("DELETE FROM TIDES.LOCATIONS\n");
printf("  WHERE LOC_ID = 300;\n");
EXEC SQL DELETE FROM TIDES.LOCATIONS
  WHERE LOC_ID = 300;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0860','pass','PC');
       }
     else
       {
          printf("\n\n       dml160.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0860','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0860 *********************/
     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

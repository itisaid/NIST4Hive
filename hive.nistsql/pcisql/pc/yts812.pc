/*  EMBEDDED C (file "YTS812.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS812.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  This routine tests <null predicate> with concatenation       */
/*  in <row value constructor>                                   */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    8.6 GR2   <null predicate> - IS NULL                       */
/*    8.6 GR3   <null predicate> - IS NOT NULL                   */
/*    6.13 GR2  <string value expression>                        */
/*    13.5 GR2b <select statement : single row>                  */
/*    F#48      Expanded null predicate                          */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-04-03                                    */
/*    Added rollback after authid                                */
/*    Removed EXEC SQL from printfs                              */
/*    Initialize vars                                            */
/*    Fixed logic error                                          */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short co;
short val1;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;
long     flag1;
long     flag2;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts812.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7569 ********************/
flag = 1;
flag1 = 1;
flag2 = 1;


     printf("                  TEST7569 \n");
     printf("   <null predicate>,concat. in<row value constructor>\n");
     printf("References:\n");
     printf("    8.6 GR2   <null predicate> - IS NULL\n");
     printf("    8.6 GR3   <null predicate> - IS NOT NULL\n");
     printf("    6.13 GR2  <string value expression>\n");
     printf("    13.5 GR2b <select statement : single row>\n");
     printf("    F#48       Expanded null predicate\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

val1 = 0;
printf("SELECT COUNT (*) INTO :val1\n");
printf("FROM TX\n");
printf("WHERE TX2 || TX3 IS NOT NULL;\n");
EXEC SQL SELECT COUNT (*) INTO :val1
FROM TX
WHERE TX2 || TX3 IS NOT NULL;
CHCKOK ();
printf("value 3 expected, %d returned\n\n", val1);
if (val1 != 3)
  flag = 0;

printf("DECLARE data812 CURSOR FOR\n");
printf("SELECT TX1 FROM TX;\n");
printf("WHERE TX3 || TX2 IS NULL;\n\n");
EXEC SQL DECLARE data812 CURSOR FOR
SELECT TX1 FROM TX
WHERE TX3 || TX2 IS NULL;

printf("OPEN data812\n");
EXEC SQL OPEN data812;
CHCKOK ();
printf("\n");

/* Fetch all rows from cursor */

for (co = 0; co < 2; co++)
{
  /* initalise host variable */
  val1 = -99;

  printf("FETCH data812 INTO :val1;\n");
  EXEC SQL FETCH data812 INTO :val1;
  
  CHCKOK ();

  printf("value expected was 1 or 2, value returned was %d\n\n", val1);

  if (val1 != 1 && val1 != 2)
     flag = 0;

  if (val1 == 1)
     flag1 = 0;
  if (val1 == 2)
     flag2 = 0;
}
   
if (flag1 != 0 || flag2 != 0)
{
   printf("!!!!Incorrect rows returned!!!!\n\n");
   flag = 0;
}

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts812.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7569','pass','PC');
       }
     else
       {
          printf("\n\n       yts812.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7569','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7569 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


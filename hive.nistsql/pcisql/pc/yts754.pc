/*  EMBEDDED C (file "YTS754.PC")  */

/* Copyright 1996 National Computing Centre Limited, */
/* and Computer Logic R&D S.A */ 
/* on behalf of the CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS754.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  This routine tests DROP DOMAIN CASCADE                       */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    11.27   <drop domain statement>                            */
/*    11.21   <domain definition>                                */
/*    11.3    <table definition>                                 */
/*    11.4    <column definition>                                */
/*    F#25    Domain definition>                                 */
/*    F#3     Basic schema manipulation                          */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-04                                    */
/*    Removed EXEC SQL from inside printfs                       */
/*    Fixed SDL transactions                                     */
/*    More output                                                */
/*    More checking of status codes                              */
/*    Warn about collating sequence                              */
/*    Cleanups                                                   */
/*    Added rollback after authid                                */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char checkc[2];
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts754.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7504 ********************/
flag = 1;

     printf("                  TEST7504 \n");
     printf("   DROP DOMAIN CASCADE - domain definition in use\n");
     printf("References:\n");
     printf("    11.27   <drop domain statement>\n");
     printf("    11.21   <domain definition>\n");
     printf("    11.3    <table definition>\n");
     printf("    11.4    <column definition>\n");
     printf("    F#25    Domain definition\n");
     printf("    F#3     Basic schema manipulation\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

printf("Note:  This test will need some changes if your collating\n");
printf("sequence is not ASCII.\n\n");

/* initialise host variable */

strcpy (checkc, "x");

/*create domain char_dom */

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("CREATE DOMAIN char_dom CHARACTER\n");
EXEC SQL CREATE DOMAIN char_dom CHARACTER;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* create table char_in_use */

printf("CREATE TABLE char_in_use\n");
printf("(   litt1  char_dom,\n");
printf("    numm   integer);\n");
EXEC SQL CREATE TABLE char_in_use
(  litt1   char_dom,
   numm    integer);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* populate the table with three rows */

printf("INSERT INTO char_in_use VALUES ('a',00);\n");
EXEC SQL INSERT INTO char_in_use VALUES ('a',00);
CHCKOK ();
printf("\n");

printf("INSERT INTO char_in_use VALUES ('z',99);\n");
EXEC SQL INSERT INTO char_in_use VALUES ('z',99);
CHCKOK ();
printf("\n");

printf("INSERT INTO char_in_use VALUES ('A',999999);\n");
EXEC SQL INSERT INTO char_in_use VALUES ('A',999999);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* drop domain char_dom CASCADE */

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("DROP DOMAIN char_dom CASCADE\n");
EXEC SQL DROP DOMAIN char_dom CASCADE;

CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* declare cursor to retrieve values stored in table*/

printf("DECLARE DATA1 CURSOR\n");
printf("  FOR SELECT litt1\n");
printf("  FROM char_in_use\n");
printf("  ORDER BY numm;\n");
EXEC SQL DECLARE DATA1 CURSOR FOR
  SELECT litt1 FROM char_in_use
  ORDER BY numm;

printf("OPEN DATA1;\n");
EXEC SQL OPEN DATA1;
CHCKOK ();
printf("\n");


/* check each value stored in table has not changed */

printf("FETCH DATA1 INTO :checkc;\n");
EXEC SQL FETCH DATA1 INTO :checkc;
CHCKOK ();
printf ("checkc should be a; its value is %s\n\n", checkc);
if (strcmp (checkc, "a") != 0)
  flag = 0;

printf("FETCH DATA1 INTO :checkc;\n");
EXEC SQL FETCH DATA1 INTO :checkc;
CHCKOK ();
printf ("checkc should be z; its value is %s\n\n", checkc);
if (strcmp (checkc, "z") != 0)
  flag = 0;

printf("FETCH DATA1 INTO :checkc;\n");
EXEC SQL FETCH DATA1 INTO :checkc;
CHCKOK ();
printf ("checkc should be A; its value is %s\n\n", checkc);
if (strcmp (checkc, "A") != 0)
  flag = 0;

/* insert into table values which should be accepted */

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("INSERT INTO char_in_use VALUES ('p',654);\n");
EXEC SQL INSERT INTO char_in_use VALUES ('p',654);
CHCKOK ();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP TABLE char_in_use CASCADE;\n");
EXEC SQL DROP TABLE char_in_use CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts754.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7504','pass','PC');
       }
     else
       {
          printf("\n\n       yts754.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7504','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7504 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


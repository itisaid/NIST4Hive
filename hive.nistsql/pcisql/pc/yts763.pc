/*  EMBEDDED C (file "YTS763.PC")  */

/* Copyright 1996 National Computing Centre Limited, */
/* and Computer Logic R&D S.A */
/* on behalf of the CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS763.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  <query expression> with INTERSECT CORRESPONDING              */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    7.10    <query expression>                                 */
/*    7.10    SR.9a                                              */
/*    7.10    SR.10a                                             */
/*    7.10    GR.1b                                              */
/*    7.3     <table expression>                                 */
/*    13.5    <select statement : single row>                    */
/*    13.1    <declare cursor>                                   */
/*    F#30    Table operations                                   */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-08                                    */
/*    Added rollback after authid                                */
/*    Fixed string lengths                                       */
/*    Increased output                                           */
/*    Deleted subtest that didn't make sense                     */
/*    Removed EXEC SQL from inside printf                        */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short i;
char ename[21];
long egrad;
char ecit[16];
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;
long     flag2;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts763.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7518 ********************/

flag = 1;
flag2 = 1;

     printf("                  TEST7518 \n");
     printf("   <query expression> with INTERSECT CORRESPONDING\n");
     printf("References:\n");
     printf("    7.10   <query expression>\n");
     printf("    7.10   SR.9a\n");
     printf("    7.10   SR.10a\n");
     printf("    7.10   GR.1b\n");
     printf("    7.3    <table expression>\n");
     printf("    13.5   <select statement : single row>\n");
     printf("    13.1   <declare cursor>\n");
     printf("    F#30   Table operations\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* initialise all variables */
i = 0;
strcpy(ename,"zzzzzzzzzzzzzzzzzzzz");
strcpy(ecit,"yyyyyyyyyyyyyyy");
egrad = 0;

/* Populate STAFF_CTS2 in such a way that it contains three or more */
/* copies of some rows, two copies of some rows and some rows */
/* that are not duplicated */
/* For the rows that are not duplicated include some where the */
/* rows would be duplicates if only the corresponding cols were */
/* considered */

/* Populate STAFF_CTS so that, considering only the corresponding */
/* columns, it contains some rows that are duplicates of rows in  */
/* STAFF_CTS2 and some that are not */
/* Include cases where the multiplicity of a row in STAFF_CTS is */
/* less than, equal to and more than the multiplicity of that row */
/* in STAFF_CTS2 */

printf("Check the number of lines in STAFF_CTS2 is correct\n");
printf("SELECT COUNT (*) INTO :i FROM STAFF_CTS2;\n");
EXEC SQL SELECT COUNT (*) INTO :i FROM STAFF_CTS2;
printf("i should be 8; its value is %d\n\n", i);
if (i != 8)
   flag = 0;

/* check the number of rows in STAFF_CTS is correct */
printf("Check the number of rows in STAFF_CTS\n");
printf("SELECT COUNT (*) INTO :i FROM STAFF_CTS;\n");
EXEC SQL SELECT COUNT (*) INTO :i FROM STAFF_CTS;
printf("i should be 5; its value is %d\n\n", i);
if (i != 5)
   flag = 0;

printf("INSERT INTO CTS1.ET(col2, col3, col4)\n");
printf("SELECT * FROM STAFF_CTS2\n");
printf("INTERSECT CORRESPONDING\n");
printf("SELECT * FROM STAFF_CTS;\n");
EXEC SQL INSERT INTO CTS1.ET(col2, col3, col4)
SELECT * FROM STAFF_CTS2
INTERSECT CORRESPONDING
SELECT * FROM STAFF_CTS;
CHCKOK ();
printf("\n");

/* Corresponding columns:  EMPNAME GRADE CITY */
/* Betty 10 Vienna */
/* Carmen 13 Vienna */
/* Don 12 Deale */

/* Declare an ordered cursor */

printf("DECLARE data63 CURSOR FOR\n");
printf("SELECT col2, col3, col4\n");
printf("FROM CTS1.ET\n");
printf("ORDER BY col3, col4;\n\n");
EXEC SQL DECLARE data63 CURSOR FOR 
SELECT col2, col3, col4
FROM CTS1.ET
ORDER BY col3, col4;

printf("OPEN data63\n");
EXEC SQL OPEN data63;
CHCKOK ();
printf("\n");

/* retrieve all the rows defined by the cursor */

printf("FETCH data63 INTO :ename, :egrad, :ecit;\n");
EXEC SQL FETCH data63 INTO :ename, :egrad, :ecit;
CHCKOK ();
printf("Row expected is 'Betty',10,'Vienna'\n");
printf("values returned were %s, %ld, %s\n\n",ename, egrad, ecit);
if (strncmp(ename,"Betty",5) != 0 || egrad != 10)
   flag2 = 0;
if (strncmp(ecit,"Vienna",6) != 0)
   flag2 = 0;

printf("FETCH data63 INTO :ename, :egrad, :ecit;\n");
EXEC SQL FETCH data63 INTO :ename, :egrad, :ecit;
CHCKOK ();
printf("Row expected is 'Don',12,'Deale'\n");
printf("Values returned were %s, %ld, %s\n\n", ename, egrad, ecit);
if (strncmp(ename,"Don",3) != 0 || egrad != 12)
   flag2 = 0;
if (strncmp(ecit,"Deale",5) != 0)
   flag2 = 0;

printf("FETCH data63 INTO :ename, :egrad, :ecit;\n");
EXEC SQL FETCH data63 INTO :ename, :egrad, :ecit;
printf("Row expected is 'Carmen',13,'Vienna'\n");
printf("Values returned are %s, %ld, %s\n\n", ename, egrad, ecit);
if (strncmp(ename,"Carmen",6) != 0 || egrad != 13)
   flag2 = 0;
if (strncmp(ecit,"Vienna",6) != 0)
   flag2 = 0;

/* tell user of FETCH status */
if (flag2 == 0) {
   printf("incorrect rows returned - FETCH data63\n\n");
   flag = 0;
}

printf("CLOSE data63\n");
EXEC SQL CLOSE data63;
CHCKOK ();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts763.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7518','pass','PC');
       }
     else
       {
          printf("\n\n       yts763.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7518','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7518 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


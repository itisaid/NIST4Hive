/*  EMBEDDED C (file " XTS754.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS754.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  ALTER TABLE ADD COLUMN WITH domain and constraint            */ 
/*                                                               */
/*  REFERENCES                                                   */
/*    11.10   -- <Alter table statement>                         */
/*    11.10   AR.1                                               */
/*    11.11   -- <Add column definition>                         */
/*    11.1    GR.1                                               */
/*    11.4    -- <column definition>                             */
/*    F#2     -- Basic Information Schema                        */
/*    F#25    -- Domain definition                               */
/*    F#38    -- Schema manipulation                             */
/*                                                               */ 
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 15/12/95                    */
/*         Print timestamp                                       */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*                                                               */
/*  QA STATUS : QA CHECK                                         */
/*                                                               */
/*  Revised by DWF 1996-02-20                                    */
/*    Fixed SDL transactions                                     */
/*    Removed field widths in printfs                            */
/*    Added a subtest                                            */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
long coun;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts754.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf(" \n Time Run :  %s \n ", ctime(&cal));

/******************** BEGIN TEST7054 ********************/
flag = 1;
printf("                   TEST7054\n");
printf("    ALTER TABLE ADD COLUMN WITH domain and constraint \n"); 
printf(" References \n");
printf("    11.10   -- <Alter table statement>\n");
printf("    11.10   AR.1 \n");
printf("    11.11   -- <Add column definition> \n");
printf("    11.11   GR.1 \n");
printf("    11.4    -- <column definition>\n");
printf("    F#2     -- Basic Information Schema \n");
printf("    F#25    -- Domain definition\n");
printf("    F#38    -- Schema manipulation \n");
printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* create a table domain under the current schema */
/* with a domain and check constraint specified */
printf("CREATE DOMAIN DOM6138 AS INTEGER\n");
printf("CHECK (VALUE > 1000)\n");
printf("CHECK (VALUE < 2000);\n");
EXEC SQL CREATE DOMAIN DOM6138 AS INTEGER
      CHECK (VALUE > 1000)
      CHECK (VALUE < 2000);
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();   
printf("\n");

/* create table TAB754 */
printf("CREATE TABLE TAB754\n");
printf("(C1 NUMERIC(5),\n");
printf(" C2 DECIMAL(4));\n");
EXEC SQL CREATE TABLE TAB754
         (C1 NUMERIC(5),
          C2 DECIMAL(4));
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();   
printf("\n");

/* now alter the table and add a column based on DOM6138*/
printf("ALTER TABLE TAB754 ADD COLUMN COLDOM DOM6138\n");
printf("CONSTRAINT c3dom_check CHECK (COLDOM <= 1998);\n");
EXEC SQL ALTER TABLE CTS1.TAB754 ADD COLUMN COLDOM DOM6138
         CONSTRAINT c3dom_check CHECK (COLDOM <= 1998);
CHCKOK(); 
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* access the COLUMN_DOMAIN_USAGE view and check that */
/* the column COLDOM is present */
coun = 0;
printf("SELECT COUNT(*) INTO :coun\n"); 
printf("FROM INFORMATION_SCHEMA.COLUMN_DOMAIN_USAGE \n");
printf("WHERE DOMAIN_SCHEMA = 'CTS1' AND DOMAIN_NAME = 'DOM6138'\n");   
printf("AND TABLE_SCHEMA = 'CTS1' AND TABLE_NAME = 'TAB754'\n");
printf("AND COLUMN_NAME = 'COLDOM';\n");
EXEC SQL SELECT COUNT(*)  INTO :coun
         FROM INFORMATION_SCHEMA.COLUMN_DOMAIN_USAGE
         WHERE DOMAIN_SCHEMA = 'CTS1' AND DOMAIN_NAME = 'DOM6138'
         AND TABLE_SCHEMA = 'CTS1' AND TABLE_NAME = 'TAB754'
         AND COLUMN_NAME = 'COLDOM';
CHCKOK();
printf("coun should be 1; its value is %ld\n",coun);
if (coun != 1)
  flag = 0;
printf("\n");

/* insert one valid row in CTS1.TAB754 */ 
printf("INSERT INTO TAB754 VALUES(1000,766,1990);\n");
EXEC SQL INSERT INTO TAB754 VALUES(1000,766,1990);
CHCKOK();
printf("\n");
 
/* now add a row which violates the check constraint */
/* with value 1999 but not the domain constraint */
/* and should fail */
printf("INSERT INTO TAB754 VALUES(1001,767,1999);\n");  
EXEC SQL INSERT INTO TAB754 VALUES(1001,767,1999);
/* That should generate an integrity constraint violation */
/* which is SQLSTATE 23000 */
printf("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
printf("SQLSTATE should be 23000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (SQLCODE >= 0)
  flag = 0;
if (strncmp(NORMSQ, "23000", 5) != 0)
  flag = 0;
if (strncmp(NORMSQ, "23000", 5) == 0 && strncmp(NORMSQ, SQLSTATE, 5) != 0)
  printf("Valid implementation-defined SQLSTATE accepted.\n");
printf ("\n");

/* (DWF) Test the domain constraint too. */
printf("INSERT INTO TAB754 VALUES(1001,767,0);\n");
EXEC SQL INSERT INTO TAB754 VALUES(1001,767,0);
/* That should generate an integrity constraint violation */
/* which is SQLSTATE 23000 */
printf("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
printf("SQLSTATE should be 23000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (SQLCODE >= 0)
  flag = 0;
if (strncmp(NORMSQ, "23000", 5) != 0)
  flag = 0;
if (strncmp(NORMSQ, "23000", 5) == 0 && strncmp(NORMSQ, SQLSTATE, 5) != 0)
  printf("Valid implementation-defined SQLSTATE accepted.\n");
printf ("\n");
   
printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* now restore database in its original state */ 
printf("DROP TABLE TAB754 CASCADE;\n");
EXEC SQL DROP TABLE TAB754 CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DROP DOMAIN DOM6138 CASCADE;\n");
EXEC SQL DROP DOMAIN DOM6138 CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

 /* record results */

     if ( flag == 1 )
       {
          printf("\n\n       xts754.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7054','pass','PC');
       }
     else
       {
          printf("\n\n       xts754.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7054','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7054 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

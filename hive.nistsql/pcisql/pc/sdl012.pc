/*  EMBEDDED C (file "SDL012.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1987/12/07 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  SDL012.PC                                                    */
/*  WRITTEN BY: HU YANPING                                       */
/*                                                               */
/*    THIS ROUTINE TESTS THE SCHEMA DEFINITION LANGUAGE FOR SQL. */
/*                                                               */
/*  REFERENCES                                                   */
/*        AMERICAN NATIONAL STANDARD database language - SQL     */
/*                          X3.135-1989                          */
/*                                                               */
/*                  SECTION 6. Schema Definition Language        */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
     char     EMPNO1[4];
     char     EMPNA1[21];
     char     USERID[20];
     long     i;
     long     ii;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long SQLCODE;
int errcnt;
/* date_time declaration */
time_t cal;
     long     i2;


main()
{

     strcpy(uid,"HU");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
if (strncmp(uid,uidx,2) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, sdl012.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

     printf("                  TEST0148        \n");
     printf("        (CREATE TABLE with NOT NULL)   \n");
     printf("     Reference X3.135-89 section 6.2 & 6.3\n");     
     printf("     - - - - - - - - - - - - - - - - - - -\n\n");
 
     printf(" *** CREATE TABLE STAFF1 (EMPNUM  CHAR NOT NULL,\n");
     printf(" ***                      EMPNAME CHAR(20),\n");
     printf(" ***                      GRADE   DECIMAL(3),\n");
     printf(" ***                      CITY    CHAR(15))\n");

     EXEC SQL INSERT INTO STAFF1(EMPNAME,GRADE,CITY)
           VALUES('Carmen',40,'Boston');

     i2 = SQLCODE;
     i = -1;

     EXEC SQL SELECT COUNT(*)
              INTO   :i
              FROM   STAFF1;

     printf(" i = %ld, i2 = %ld  \n\n", i, i2);

     printf("The correct answer should be i=0, i2 < 0  \n");

     EXEC SQL ROLLBACK WORK;

     if ( i2 < 0 && i == 0)
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO TESTREPORT
          VALUES('0148','pass','PC');
       }
     else
       {
          printf("\n\n       sdl012.pc  *** fail *** \n");
          EXEC SQL INSERT INTO TESTREPORT
          VALUES('0148','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;

     exit(errcnt);
}

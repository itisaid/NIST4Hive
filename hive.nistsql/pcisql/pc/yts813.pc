/*  EMBEDDED C (file "YTS813.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS813.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  This routine tests <null predicate> with                     */
/*  (numeric value expression> in <row value constructor>        */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    8.6 GR2   <null predicate> - IS NULL                       */
/*    8.6 GR3   <null predicate> - IS NOT NULL                   */
/*    6.12 GR1  <numeric value expression>                       */
/*    6.2 GR7   <value specification> and <target specification> */
/*    13.5 GR2b <select statement : single row>                  */
/*    F#48      Expanded null predicate                          */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-04-03                                    */
/*    Added rollback after authid                                */
/*    Removed EXEC SQL from printfs                              */
/*    Renamed variable                                           */
/*    Fixed expected results                                     */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short val1;
short indic1;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts813.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7570 ********************/
flag = 1;

     printf("                  TEST7570 \n");
     printf("   <null predct>, <numrc val expr> in <row val cons>\n");
     printf("References:\n");
     printf("    8.6 GR2   <null predicate> - IS NULL\n");
     printf("    8.6 GR3   <null predicate> - IS NOT NULL\n");
     printf("    6.12 GR1  <numeric value expression>\n");
     printf("    6.2 GR7   <value specification> and\n");
     printf("              <target specification>\n");
     printf("    13.5 GR2b <select statement : single row\n");
     printf("    F#48 Expanded null predicate\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* Prepare database for test */

printf("INSERT INTO CTS1.PROJ_DURATION (MONTHS, EMP_HOURS)\n");
printf("VALUES (1, 2);\n");
EXEC SQL INSERT INTO CTS1.PROJ_DURATION (MONTHS, EMP_HOURS)
VALUES (1, 2);
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.PROJ_DURATION VALUES (2,3,4);\n");
EXEC SQL INSERT INTO CTS1.PROJ_DURATION VALUES (2,3,4);
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.PROJ_DURATION (MONTHS, TIME_LEFT)\n");
printf("VALUES (3,5);\n");
EXEC SQL INSERT INTO CTS1.PROJ_DURATION (MONTHS, TIME_LEFT)
VALUES (3, 5);
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.PROJ_DURATION VALUES (4, 6, 7);\n");
EXEC SQL INSERT INTO CTS1.PROJ_DURATION VALUES (4, 6, 7);
CHCKOK ();
printf("\n");

/* count rows where TIME_LEFT + EMP_HOURS is not NULL */

/* initialise host variable */
val1 = 99;

printf("SELECT COUNT (*) INTO :val1\n");
printf("FROM CTS1.PROJ_DURATION\n");
printf("WHERE TIME_LEFT + EMP_HOURS IS NOT NULL;\n");
EXEC SQL SELECT COUNT (*) INTO :val1
FROM CTS1.PROJ_DURATION
WHERE TIME_LEFT + EMP_HOURS IS NOT NULL;
CHCKOK ();
printf("value expected was 2, value returned was %d\n\n", val1);
if (val1 != 2)
   flag = 0;

/* declare a cursor to return MONTHS when TIME_LEFT- EMP_HOURS is NULL */

printf("DECLARE data813 CURSOR FOR\n");
printf("SELECT MONTHS FROM CTS1.PROJ_DURATION\n");
printf("WHERE EMP_HOURS - TIME_LEFT IS NULL\n");
printf("ORDER BY MONTHS;\n\n");
EXEC SQL DECLARE data813 CURSOR FOR
SELECT MONTHS FROM CTS1.PROJ_DURATION
WHERE EMP_HOURS - TIME_LEFT IS NULL
ORDER BY MONTHS;

printf("OPEN data813;\n");
EXEC SQL OPEN data813;
CHCKOK ();
printf("\n");

/* fetch all rows defined by cursor */

/* initialise host variables */

val1 = 99;

printf("FETCH data813 INTO :val1;\n");
EXEC SQL FETCH data813 INTO :val1;
CHCKOK ();
printf("value 1 expected, %d returned\n\n", val1);
if (val1 != 1)
   flag = 0;

/* initialise host variables */

val1 = 99;

printf("FETCH data813 INTO :val1;\n");
EXEC SQL FETCH data813 INTO :val1;
CHCKOK ();
printf("value 3 expected, %d returned\n\n", val1);
if (val1 != 3)
   flag = 0;

printf("FETCH data813 INTO :val1;\n");
EXEC SQL FETCH data813 INTO :val1;

/* That should generate a no data exception */
/* which is SQLSTATE 02000 */

printf("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;
printf("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf ("\n");

/* execute update statement */

/* put negative value into null indicator */

printf("indic1 = -99;\n");
indic1 = -99;

/* put random value into host variable */

printf("val1 = 34;\n");
val1 = 34;

printf("UPDATE CTS1.PROJ_DURATION\n");
printf("SET TIME_LEFT = 9\n");
printf("WHERE EMP_HOURS * :val1 INDICATOR :indic1 IS NOT NULL;\n");
EXEC SQL UPDATE CTS1.PROJ_DURATION
SET TIME_LEFT = 9
WHERE EMP_HOURS * :val1 INDICATOR :indic1 IS NOT NULL;

printf("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;
printf("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf ("\n");

/* check no rows have been updated */

val1 = 99;
printf("SELECT COUNT (*) INTO :val1\n");
printf("FROM CTS1.PROJ_DURATION\n");
printf("WHERE TIME_LEFT = 9;\n");
EXEC SQL SELECT COUNT (*) INTO :val1
FROM CTS1.PROJ_DURATION
WHERE TIME_LEFT = 9;
CHCKOK ();
printf("value expected is 0, value returned is %d\n\n", val1);
if (val1 != 0)
  flag = 0;

/* execute an update statement where indic1 is positive */

/* initialise host variables */

printf("indic1 = 9;\n");
printf("val1 = 99;\n");
indic1 = 9;
val1 = 99;

printf("UPDATE CTS1.PROJ_DURATION \n");
printf("SET EMP_HOURS = 3 \n");
printf("WHERE EMP_HOURS * :val1 INDICATOR :indic1 IS NOT NULL;\n");
EXEC SQL UPDATE CTS1.PROJ_DURATION 
SET EMP_HOURS = 3 
WHERE EMP_HOURS * :val1 INDICATOR :indic1 IS NOT NULL;
CHCKOK ();
printf("\n");

/* check relevent rows have been updated */

val1 = 99;
printf("SELECT COUNT (*) INTO :val1\n");
printf("FROM CTS1.PROJ_DURATION\n");
printf("WHERE EMP_HOURS = 3;\n");
EXEC SQL SELECT COUNT (*) INTO :val1
FROM CTS1.PROJ_DURATION
WHERE EMP_HOURS = 3;
CHCKOK ();
printf("value expected is 3, value returned is %d\n\n", val1);
if (val1 != 3)
  flag = 0;

/* check row containing null value in EMP_HOURS has not been updated */

/* initialise host variables */

indic1 = 99;
val1 = 99;

printf("SELECT EMP_HOURS INTO :val1:indic1\n");
printf("FROM CTS1.PROJ_DURATION\n");
printf("WHERE MONTHS = 3;\n");

EXEC SQL SELECT EMP_HOURS INTO :val1:indic1
FROM CTS1.PROJ_DURATION
WHERE MONTHS = 3;
CHCKOK ();
printf("indic1 should be -1; its value is %d\n\n", indic1);
if (indic1 != -1)
   flag = 0;

/* ensure database is left in a consistent state */

printf("ROLLBACK WORK\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts813.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7570','pass','PC');
       }
     else
       {
          printf("\n\n       yts813.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7570','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7570 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


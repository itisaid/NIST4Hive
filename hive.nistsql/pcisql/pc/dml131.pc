/*  EMBEDDED C (file "DML131.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1994/8/16 EMBEDDED C LANGUAGE                           */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  DML131.PC                                                    */
/*  WRITTEN BY:  David W. Flater                                 */
/*                                                               */
/*  This routine tests the Information Schema.                   */
/*                                                               */
/*  REFERENCES                                                   */
/*    FIPS PUB 127-2 14.1 Transitional SQL                       */
/*    ANSI SQL-1992                                              */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
long int1;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"FLATER            ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, dml131.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0683 ********************/
flag = 1;

     printf("                  TEST0683 \n");
     printf("     INFO_SCHEM:  Changes are visible\n");
     printf("References:\n");
     printf("    F# 2 -- Basic information schema\n");
     printf("    F# 3 -- Basic schema manipulation\n");
     printf("    FIPS Change Notice #1 -- Shortened identifiers\n");
     printf("      in INFO_SCHEM\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* Table should not exist yet */

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VISCHANGE';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VISCHANGE';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VISCHANGE';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VISCHANGE';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("CREATE TABLE VISCHANGE (C1 INT, C2 FLOAT);\n");
EXEC SQL CREATE TABLE VISCHANGE (C1 INT, C2 FLOAT);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* Table should exist */

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VISCHANGE'\n");
printf("  AND TABLE_TYPE = 'BASE TABLE';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VISCHANGE'
  AND TABLE_TYPE = 'BASE TABLE';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VISCHANGE';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VISCHANGE';
CHCKOK ();
printf("int1 should be 2; its value is %ld\n\n", int1);
if (int1 != 2)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("ALTER TABLE VISCHANGE DROP C1 RESTRICT;\n");
EXEC SQL ALTER TABLE VISCHANGE DROP C1 RESTRICT;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* Deleted column should not exist */

int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VISCHANGE';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VISCHANGE';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VISCHANGE'\n");
printf("  AND COLUMN_NAME = 'C2';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VISCHANGE'
  AND COLUMN_NAME = 'C2';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP TABLE VISCHANGE CASCADE;\n");
EXEC SQL DROP TABLE VISCHANGE CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* Table should not exist */

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VISCHANGE';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VISCHANGE';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VISCHANGE';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VISCHANGE';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0683','pass','PC');
       }
     else
       {
          printf("\n\n       dml131.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0683','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0683 *********************/
/******************** BEGIN TEST0684 ********************/
flag = 1;

     printf("                  TEST0684 \n");
     printf("  INFO_SCHEM:  Visibility to other users\n");
     printf("References:\n");
     printf("    F# 2 -- Basic information schema\n");
     printf("    FIPS Change Notice #1 -- Shortened identifiers\n");
     printf("      in INFO_SCHEM\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* This test checks for the correct levels of visibility in the */
/* Information Schema when the user has different levels of     */
/* access to the target table. */

/* FLATER has SELECT on HU.WORKS */

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'WORKS'\n");
printf("  AND TABLE_TYPE = 'BASE TABLE';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'WORKS'
  AND TABLE_TYPE = 'BASE TABLE';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'WORKS';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'WORKS';
CHCKOK ();
printf("int1 should be 3; its value is %ld\n\n", int1);
if (int1 != 3)
  flag = 0;

/* PUBLIC has INSERT on HU.TESTREPORT */

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'TESTREPORT'\n");
printf("  AND TABLE_TYPE = 'VIEW';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'TESTREPORT'
  AND TABLE_TYPE = 'VIEW';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.VIEWS\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'TESTREPORT';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.VIEWS
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'TESTREPORT';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'TESTREPORT';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'TESTREPORT';
CHCKOK ();
printf("int1 should be 3; its value is %ld\n\n", int1);
if (int1 != 3)
  flag = 0;

/* FLATER has UPDATE (COL1) on HU.VTABLE */

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'VTABLE'\n");
printf("  AND TABLE_TYPE = 'BASE TABLE';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'VTABLE'
  AND TABLE_TYPE = 'BASE TABLE';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = 0;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'VTABLE';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'VTABLE';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/* FLATER has ZILCH on HU.FF */

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'FF';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.TABLES
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'FF';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'FF';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM INFO_SCHEM.COLUMNS
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'FF';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0684','pass','PC');
       }
     else
       {
          printf("\n\n       dml131.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0684','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0684 *********************/
/******************** BEGIN TEST0685 ********************/
flag = 1;

     printf("                  TEST0685 \n");
     printf("  INFO_SCHEM:  Privileges and privilege views\n");
     printf("References:\n");
     printf("    F# 2 -- Basic information schema\n");
     printf("    F# 3 -- Basic schema manipulation\n");
     printf("    F# 23 -- Privilege tables\n");
     printf("    FIPS Change Notice #1 -- Shortened identifiers\n");
     printf("      in INFO_SCHEM\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* 11.3 GR.4:  owner privs are granted by _SYSTEM */

int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.TABLE_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND GRANTOR <> '_SYSTEM'\n");
printf("  AND GRANTEE = 'FLATER';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.TABLE_PRIVILEGES
  WHERE TABLE_SCHEM = 'FLATER' AND GRANTOR <> '_SYSTEM'
  AND GRANTEE = 'FLATER';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.COLUMN_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND GRANTOR <> '_SYSTEM'\n");
printf("  AND GRANTEE = 'FLATER';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.COLUMN_PRIVILEGES
  WHERE TABLE_SCHEM = 'FLATER' AND GRANTOR <> '_SYSTEM'
  AND GRANTEE = 'FLATER';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

/* This one was a GRANT ALL TO SCHANZLE.  Five rows: */
/* SELECT, INSERT, UPDATE, DELETE, REFERENCES        */

int1 = 0;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.TABLE_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VS1'\n");
printf("  AND GRANTOR = 'FLATER' AND GRANTEE = 'SCHANZLE'\n");
printf("  AND IS_GRANTABLE = 'NO';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.TABLE_PRIVILEGES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VS1'
  AND GRANTOR = 'FLATER' AND GRANTEE = 'SCHANZLE'
  AND IS_GRANTABLE = 'NO';
CHCKOK ();
printf("int1 should be 5; its value is %ld\n\n", int1);
if (int1 != 5)
  flag = 0;

/* 5 times degree of view = 10 */

int1 = 0;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.COLUMN_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VS1'\n");
printf("  AND GRANTOR = 'FLATER' AND GRANTEE = 'SCHANZLE'\n");
printf("  AND IS_GRANTABLE = 'NO';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.COLUMN_PRIVILEGES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'VS1'
  AND GRANTOR = 'FLATER' AND GRANTEE = 'SCHANZLE'
  AND IS_GRANTABLE = 'NO';
CHCKOK ();
printf("int1 should be 10; its value is %ld\n\n", int1);
if (int1 != 10)
  flag = 0;

/* This one was GRANT SELECT TO PUBLIC */

int1 = 0;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.TABLE_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'PROJ'\n");
printf("  AND GRANTOR = 'HU' AND GRANTEE = 'PUBLIC'\n");
printf("  AND IS_GRANTABLE = 'NO';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.TABLE_PRIVILEGES
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'PROJ'
  AND GRANTOR = 'HU' AND GRANTEE = 'PUBLIC'
  AND IS_GRANTABLE = 'NO';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = 0;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.COLUMN_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'PROJ'\n");
printf("  AND GRANTOR = 'HU' AND GRANTEE = 'PUBLIC'\n");
printf("  AND IS_GRANTABLE = 'NO';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.COLUMN_PRIVILEGES
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'PROJ'
  AND GRANTOR = 'HU' AND GRANTEE = 'PUBLIC'
  AND IS_GRANTABLE = 'NO';
CHCKOK ();
printf("int1 should be 5; its value is %ld\n\n", int1);
if (int1 != 5)
  flag = 0;

/* GRANT INSERT TO PUBLIC WITH GRANT OPTION */

int1 = 0;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.TABLE_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'TESTREPORT'\n");
printf("  AND GRANTOR = 'HU' AND GRANTEE = 'PUBLIC'\n");
printf("  AND IS_GRANTABLE = 'YES' AND PRIVILEGE_TYPE = 'INSERT';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.TABLE_PRIVILEGES
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'TESTREPORT'
  AND GRANTOR = 'HU' AND GRANTEE = 'PUBLIC'
  AND IS_GRANTABLE = 'YES' AND PRIVILEGE_TYPE = 'INSERT';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = -153;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.COLUMN_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'TESTREPORT'\n");
printf("  AND GRANTOR = 'HU' AND GRANTEE = 'PUBLIC'\n");
printf("  AND IS_GRANTABLE = 'YES' AND PRIVILEGE_TYPE = 'INSERT';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.COLUMN_PRIVILEGES
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'TESTREPORT'
  AND GRANTOR = 'HU' AND GRANTEE = 'PUBLIC'
  AND IS_GRANTABLE = 'YES' AND PRIVILEGE_TYPE = 'INSERT';
CHCKOK ();
printf("int1 should be 3; its value is %ld\n\n", int1);
if (int1 != 3)
  flag = 0;

int1 = 62;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.COLUMN_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'TESTREPORT'\n");
printf("  AND GRANTOR = 'HU' AND (GRANTEE <> 'PUBLIC'\n");
printf("  OR IS_GRANTABLE <> 'YES' OR PRIVILEGE_TYPE <> 'INSERT');\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.COLUMN_PRIVILEGES
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'TESTREPORT'
  AND GRANTOR = 'HU' AND (GRANTEE <> 'PUBLIC'
  OR IS_GRANTABLE <> 'YES' OR PRIVILEGE_TYPE <> 'INSERT');
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

/* GRANT UPDATE (COL1) ON VTABLE TO FLATER */
/* The syntax for column-specific privileges is hidden in */
/* 10.3 <privileges> instead of 11.36 <grant statement>   */

int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.TABLE_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'VTABLE'\n");
printf("  AND GRANTOR = 'HU';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.TABLE_PRIVILEGES
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'VTABLE'
  AND GRANTOR = 'HU';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.COLUMN_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'VTABLE'\n");
printf("  AND GRANTOR = 'HU';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.COLUMN_PRIVILEGES
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'VTABLE'
  AND GRANTOR = 'HU';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.COLUMN_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'VTABLE'\n");
printf("  AND GRANTOR = 'HU' AND COLUMN_NAME = 'COL1'\n");
printf("  AND PRIVILEGE_TYPE = 'UPDATE' AND\n");
printf("  IS_GRANTABLE = 'NO' AND GRANTEE = 'FLATER';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.COLUMN_PRIVILEGES
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'VTABLE'
  AND GRANTOR = 'HU' AND COLUMN_NAME = 'COL1'
  AND PRIVILEGE_TYPE = 'UPDATE' AND
  IS_GRANTABLE = 'NO' AND GRANTEE = 'FLATER';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

/* This should not be visible. */

int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.TABLE_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'FF';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.TABLE_PRIVILEGES
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'FF';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.COLUMN_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'FF';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.COLUMN_PRIVILEGES
  WHERE TABLE_SCHEM = 'HU' AND TABLE_NAME = 'FF';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

/* Check future grant not yet reflected */

int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.TABLE_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'BASE_WCOV'\n");
printf("  AND GRANTOR = 'FLATER' AND GRANTEE = 'CUGINI';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.TABLE_PRIVILEGES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'BASE_WCOV'
  AND GRANTOR = 'FLATER' AND GRANTEE = 'CUGINI';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.COLUMN_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'BASE_WCOV'\n");
printf("  AND GRANTOR = 'FLATER' AND GRANTEE = 'CUGINI';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.COLUMN_PRIVILEGES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'BASE_WCOV'
  AND GRANTOR = 'FLATER' AND GRANTEE = 'CUGINI';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

/* Check visibility of new grant */

printf("GRANT DELETE ON BASE_WCOV TO CUGINI;\n");
EXEC SQL GRANT DELETE ON BASE_WCOV TO CUGINI;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.TABLE_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'BASE_WCOV'\n");
printf("  AND GRANTOR = 'FLATER' AND GRANTEE = 'CUGINI'\n");
printf("  AND PRIVILEGE_TYPE = 'DELETE' AND IS_GRANTABLE = 'NO';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.TABLE_PRIVILEGES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'BASE_WCOV'
  AND GRANTOR = 'FLATER' AND GRANTEE = 'CUGINI'
  AND PRIVILEGE_TYPE = 'DELETE' AND IS_GRANTABLE = 'NO';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.TABLE_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'BASE_WCOV'\n");
printf("  AND GRANTOR = 'FLATER' AND GRANTEE = 'CUGINI';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.TABLE_PRIVILEGES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'BASE_WCOV'
  AND GRANTOR = 'FLATER' AND GRANTEE = 'CUGINI';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.COLUMN_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'BASE_WCOV'\n");
printf("  AND GRANTOR = 'FLATER' AND GRANTEE = 'CUGINI'\n");
printf("  AND PRIVILEGE_TYPE = 'DELETE' AND IS_GRANTABLE = 'NO';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.COLUMN_PRIVILEGES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'BASE_WCOV'
  AND GRANTOR = 'FLATER' AND GRANTEE = 'CUGINI'
  AND PRIVILEGE_TYPE = 'DELETE' AND IS_GRANTABLE = 'NO';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.COLUMN_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'BASE_WCOV'\n");
printf("  AND GRANTOR = 'FLATER' AND GRANTEE = 'CUGINI';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.COLUMN_PRIVILEGES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'BASE_WCOV'
  AND GRANTOR = 'FLATER' AND GRANTEE = 'CUGINI';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("REVOKE DELETE ON BASE_WCOV FROM CUGINI CASCADE;\n");
EXEC SQL REVOKE DELETE ON BASE_WCOV FROM CUGINI CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* Check that revoke also worked */

int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.TABLE_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'BASE_WCOV'\n");
printf("  AND GRANTOR = 'FLATER' AND GRANTEE = 'CUGINI';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.TABLE_PRIVILEGES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'BASE_WCOV'
  AND GRANTOR = 'FLATER' AND GRANTEE = 'CUGINI';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.COLUMN_PRIVILEGES\n");
printf("  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'BASE_WCOV'\n");
printf("  AND GRANTOR = 'FLATER' AND GRANTEE = 'CUGINI';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.COLUMN_PRIVILEGES
  WHERE TABLE_SCHEM = 'FLATER' AND TABLE_NAME = 'BASE_WCOV'
  AND GRANTOR = 'FLATER' AND GRANTEE = 'CUGINI';
CHCKOK ();
printf("int1 should be 0; its value is %ld\n\n", int1);
if (int1 != 0)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0685','pass','PC');
       }
     else
       {
          printf("\n\n       dml131.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0685','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0685 *********************/
/******************** BEGIN TEST0686 ********************/
flag = 1;

     printf("                  TEST0686 \n");
     printf("INFO_SCHEM:  Primary key enh. is not null\n");
     printf("References:\n");
     printf("    F# 2 -- Basic information schema\n");
     printf("    F# 3 -- Basic schema manipulation\n");
     printf("    F# 16 -- PRIMARY KEY enhancement\n");
     printf("    FIPS Change Notice #1 -- Shortened identifiers\n");
     printf("      in INFO_SCHEM\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("CREATE TABLE FEAT16 (\n");
printf("  EMPNUM INT PRIMARY KEY,\n");
printf("  PNUM   INT UNIQUE);\n");
EXEC SQL CREATE TABLE FEAT16 (
  EMPNUM INT PRIMARY KEY,
  PNUM   INT UNIQUE);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* PRIMARY KEY implies NOT NULL but UNIQUE does not */

int1 = 0;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.COLUMNS WHERE TABLE_SCHEM = 'FLATER'\n");
printf("  AND TABLE_NAME = 'FEAT16' AND COLUMN_NAME = 'EMPNUM'\n");
printf("  AND IS_NULLABLE = 'NO';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.COLUMNS WHERE TABLE_SCHEM = 'FLATER'
  AND TABLE_NAME = 'FEAT16' AND COLUMN_NAME = 'EMPNUM'
  AND IS_NULLABLE = 'NO';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = 0;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.COLUMNS WHERE TABLE_SCHEM = 'FLATER'\n");
printf("  AND TABLE_NAME = 'FEAT16' AND COLUMN_NAME = 'PNUM'\n");
printf("  AND IS_NULLABLE = 'YES';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.COLUMNS WHERE TABLE_SCHEM = 'FLATER'
  AND TABLE_NAME = 'FEAT16' AND COLUMN_NAME = 'PNUM'
  AND IS_NULLABLE = 'YES';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP TABLE FEAT16 CASCADE;\n");
EXEC SQL DROP TABLE FEAT16 CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0686','pass','PC');
       }
     else
       {
          printf("\n\n       dml131.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0686','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0686 *********************/
/******************** BEGIN TEST0687 ********************/
flag = 1;

     printf("                  TEST0687 \n");
     printf("  INFO_SCHEM:  Multiple schemas per user\n");
     printf("References:\n");
     printf("    F# 2 -- Basic information schema\n");
     printf("    F# 17 -- Multiple schemas per user\n");
     printf("    FIPS Change Notice #1 -- Shortened identifiers\n");
     printf("      in INFO_SCHEM\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

int1 = 0;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.SCHEMATA\n");
printf("  WHERE SCHEM_NAME = 'SHIRLEY_HURWITZ' AND\n");
printf("  SCHEM_OWNER = 'FLATER';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.SCHEMATA
  WHERE SCHEM_NAME = 'SHIRLEY_HURWITZ' AND
  SCHEM_OWNER = 'FLATER';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

int1 = 0;
printf("SELECT COUNT(*) INTO :int1\n");
printf("  FROM INFO_SCHEM.SCHEMATA\n");
printf("  WHERE SCHEM_NAME = 'LEN_GALLAGHER' AND\n");
printf("  SCHEM_OWNER = 'FLATER';\n");
EXEC SQL SELECT COUNT(*) INTO :int1
  FROM INFO_SCHEM.SCHEMATA
  WHERE SCHEM_NAME = 'LEN_GALLAGHER' AND
  SCHEM_OWNER = 'FLATER';
CHCKOK ();
printf("int1 should be 1; its value is %ld\n\n", int1);
if (int1 != 1)
  flag = 0;

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0687','pass','PC');
       }
     else
       {
          printf("\n\n       dml131.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0687','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0687 *********************/
     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

/*  EMBEDDED C (file "DML153.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1995/3/27 EMBEDDED C LANGUAGE                           */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  DML153.PC                                                    */
/*  WRITTEN BY:  David W. Flater                                 */
/*                                                               */
/*  This routine tests FIPS feature 11 (Transaction Isolation).  */
/*                                                               */
/*  REFERENCES                                                   */
/*    FIPS PUB 127-2 14.1 Transitional SQL                       */
/*    ANSI SQL-1992                                              */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
long int1;
char c20[21];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"FLATER            ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,6) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, dml153.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0848 ********************/
flag = 1;

     printf("                  TEST0848\n");
     printf("  Query spec with subquery is now updatable\n");
     printf("References:\n");
     printf("    F# 11 -- Transaction isolation\n");
     printf("    7.9 LR.2.a\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

printf("CREATE VIEW EXON AS\n");
printf("  SELECT * FROM HU.STAFF WHERE CITY IN\n");
printf("    (SELECT CITY FROM HU.PROJ);\n");
EXEC SQL CREATE VIEW EXON AS
  SELECT * FROM HU.STAFF WHERE CITY IN
    (SELECT CITY FROM HU.PROJ);
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

printf("DELETE FROM EXON\n");
printf("  WHERE GRADE = 10;\n");
EXEC SQL DELETE FROM EXON
  WHERE GRADE = 10;
CHCKOK ();
printf("\n");

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM HU.STAFF;\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM HU.STAFF;
CHCKOK ();
printf("int1 should be 4; its value is %ld\n\n", int1);
if (int1 != 4)
  flag = 0;

printf ("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DECLARE GORTON CURSOR FOR\n");
printf("  SELECT EMPNAME FROM EXON;\n\n");
EXEC SQL DECLARE GORTON CURSOR FOR
  SELECT EMPNAME FROM EXON;

printf("OPEN GORTON;\n");
EXEC SQL OPEN GORTON;
CHCKOK ();
printf("\n");

strcpy (c20, "xxxxxxxxxxxxxxxxxxxx");
printf("FETCH GORTON INTO :c20;\n");
EXEC SQL FETCH GORTON INTO :c20;
CHCKOK ();
printf("c20 is '%s'\n\n", c20);

printf("UPDATE EXON\n");
printf("  SET EMPNAME = 'Heathen'\n");
printf("  WHERE CURRENT OF GORTON;\n");
EXEC SQL UPDATE EXON
  SET EMPNAME = 'Heathen'
  WHERE CURRENT OF GORTON;
CHCKOK ();
printf("\n");

strcpy (c20, "xxxxxxxxxxxxxxxxxxxx");
printf("FETCH GORTON INTO :c20;\n");
EXEC SQL FETCH GORTON INTO :c20;
CHCKOK ();
printf("c20 is '%s'\n\n", c20);

printf("UPDATE EXON\n");
printf("  SET EMPNAME = 'Heretic'\n");
printf("  WHERE CURRENT OF GORTON;\n");
EXEC SQL UPDATE EXON
  SET EMPNAME = 'Heretic'
  WHERE CURRENT OF GORTON;
CHCKOK ();
printf("\n");

strcpy (c20, "xxxxxxxxxxxxxxxxxxxx");
printf("FETCH GORTON INTO :c20;\n");
EXEC SQL FETCH GORTON INTO :c20;
CHCKOK ();
printf("c20 is '%s'\n\n", c20);

printf("DELETE FROM EXON\n");
printf("  WHERE CURRENT OF GORTON;\n");
EXEC SQL DELETE FROM EXON
  WHERE CURRENT OF GORTON;
CHCKOK ();
printf("\n");

printf("CLOSE GORTON;\n");
EXEC SQL CLOSE GORTON;
CHCKOK ();
printf("\n");

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM HU.STAFF\n");
printf("  WHERE EMPNAME LIKE 'H%%';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM HU.STAFF
  WHERE EMPNAME LIKE 'H%';
CHCKOK ();
printf("int1 should be 2; its value is %ld\n\n", int1);
if (int1 != 2)
  flag = 0;

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM HU.STAFF;\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM HU.STAFF;
CHCKOK ();
printf("int1 should be 4; its value is %ld\n\n", int1);
if (int1 != 4)
  flag = 0;

printf ("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DECLARE GORDY CURSOR FOR\n");
printf("  SELECT EMPNAME FROM HU.STAFF WHERE GRADE >\n");
printf("    (SELECT MIN (BUDGET) / 1000 FROM HU.PROJ\n");
printf("       WHERE HU.STAFF.CITY = HU.PROJ.CITY)\n");
printf("    AND EMPNAME <> 'Don';\n\n");
EXEC SQL DECLARE GORDY CURSOR FOR
  SELECT EMPNAME FROM HU.STAFF WHERE GRADE >
    (SELECT MIN (BUDGET) / 1000 FROM HU.PROJ
       WHERE HU.STAFF.CITY = HU.PROJ.CITY)
    AND EMPNAME <> 'Don';

printf("OPEN GORDY;\n");
EXEC SQL OPEN GORDY;
CHCKOK ();
printf("\n");

strcpy (c20, "xxxxxxxxxxxxxxxxxxxx");
printf("FETCH GORDY INTO :c20;\n");
EXEC SQL FETCH GORDY INTO :c20;
CHCKOK ();
printf("c20 is '%s'\n\n", c20);

printf("UPDATE HU.STAFF\n");
printf("  SET EMPNAME = 'Zerta'\n");
printf("  WHERE CURRENT OF GORDY;\n");
EXEC SQL UPDATE HU.STAFF
  SET EMPNAME = 'Zerta'
  WHERE CURRENT OF GORDY;
CHCKOK ();
printf("\n");

strcpy (c20, "xxxxxxxxxxxxxxxxxxxx");
printf("FETCH GORDY INTO :c20;\n");
EXEC SQL FETCH GORDY INTO :c20;
CHCKOK ();
printf("c20 is '%s'\n\n", c20);

printf("DELETE FROM HU.STAFF\n");
printf("  WHERE CURRENT OF GORDY;\n");
EXEC SQL DELETE FROM HU.STAFF
  WHERE CURRENT OF GORDY;
CHCKOK ();
printf("\n");

strcpy (c20, "xxxxxxxxxxxxxxxxxxxx");
printf("FETCH GORDY INTO :c20;\n");
EXEC SQL FETCH GORDY INTO :c20;
printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
printf ("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (SQLCODE != 100 || strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

printf("CLOSE GORDY;\n");
EXEC SQL CLOSE GORDY;
CHCKOK ();
printf("\n");

int1 = -1;
printf("SELECT COUNT(*) INTO :int1 FROM HU.STAFF\n");
printf("  WHERE EMPNAME < 'Fred';\n");
EXEC SQL SELECT COUNT(*) INTO :int1 FROM HU.STAFF
  WHERE EMPNAME < 'Fred';
CHCKOK ();
printf("int1 should be 3; its value is %ld\n\n", int1);
if (int1 != 3)
  flag = 0;

printf ("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP VIEW EXON CASCADE;\n");
EXEC SQL DROP VIEW EXON CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0848','pass','PC');
       }
     else
       {
          printf("\n\n       dml153.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0848','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0848 *********************/
     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

/*  EMBEDDED C (file "YTS805.PC")  */

/* Copyright 1996 National Computing Centre Ltd, */
/* and Computer Logic R&D S.A */
/* on behalf of CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS805.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  This routine tests Schema with crossed referential           */
/*  constraints between tables                                   */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    11.1 -- <schema definition>                                */
/*    11.8 F -- <referential constraint definition>              */
/*    11.8 SR2                                                   */
/*    11.7 SR2b -- <unique constraint definition>                */
/*    F#17 -- Multiple schemas per user                          */
/*    F#31 -- Schema definition statement                        */
/*    F#33 -- Constraint tables                                  */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-27                                    */
/*    Added rollback after authid                                */
/*    Removed EXEC SQL from printf                               */
/*    Fixed wrong printf formats                                 */
/*    Fixed information schema usage                             */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
short co;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts805.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7562 ********************/
flag = 1;

     printf("                  TEST7562 \n");
     printf("Schema with crossed referential const. bet. tables\n");
     printf("References:\n");
     printf("    11.1 -- <schema definition>\n");
     printf("    11.8F -- <referential constraint definition>\n");
     printf("    11.8 SR2\n");
     printf("    11.7 SR2b -- <unique constraint definition>\n");
     printf("    F#17 -- Multiple schemas per user\n");
     printf("    F#31 -- Schema definition statement\n");
     printf("    F#33 -- Constraint tables\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* create schema ZZZ */
printf("CREATE SCHEMA ZZZ AUTHORIZATION CTS1\n");
printf("  CREATE TABLE AAA\n");
printf("  (A1     CHAR(3),\n");
printf("   A2     INTEGER,\n");
printf("   A3     DECIMAL(4),\n");
printf("   A4     NUMERIC(5),\n");
printf("   A5     SMALLINT,\n");
printf("   PRIMARY KEY (A1, A2),\n");
printf("   FOREIGN KEY (A3, A4) REFERENCES BBB(B1, B2),\n");
printf("   FOREIGN KEY (A5) REFERENCES CCC(C3))\n");
printf("  CREATE TABLE BBB\n");
printf("  (B1     DECIMAL(4),\n");
printf("   B2     NUMERIC(5),\n");
printf("   A1     CHAR(3),\n");
printf("   A2     INTEGER,\n");
printf("   PRIMARY KEY (B1, B2),\n");
printf("   FOREIGN KEY (A1, A2) REFERENCES AAA(A1, A2),\n");
printf("   UNIQUE (A1, A2))\n");
printf("  CREATE TABLE CCC\n");
printf("  (B1     DECIMAL(4),\n");
printf("   B2     NUMERIC(5),\n");
printf("   C3     SMALLINT,\n");
printf("   PRIMARY KEY (C3),\n");
printf("   FOREIGN KEY (B1,B2) REFERENCES BBB(B1, B2));\n");

EXEC SQL CREATE SCHEMA ZZZ AUTHORIZATION CTS1
  CREATE TABLE AAA
  (A1     CHAR(3),
   A2     INTEGER,
   A3     DECIMAL(4),
   A4     NUMERIC(5),
   A5     SMALLINT,
   PRIMARY KEY (A1, A2),
   FOREIGN KEY (A3, A4) REFERENCES BBB(B1, B2),
   FOREIGN KEY (A5) REFERENCES CCC(C3))
  CREATE TABLE BBB
  (B1     DECIMAL(4),
   B2     NUMERIC(5),
   A1     CHAR(3),
   A2     INTEGER,
   PRIMARY KEY (B1, B2),
   FOREIGN KEY (A1, A2) REFERENCES AAA(A1, A2),
   UNIQUE (A1, A2))
  CREATE TABLE CCC
  (B1     DECIMAL(4),
   B2     NUMERIC(5),
   C3     SMALLINT,
   PRIMARY KEY (C3),
   FOREIGN KEY (B1,B2) REFERENCES BBB(B1, B2));

CHCKOK ();
printf("\n");

/* COMMIT WORK */

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

/* check a row referencing ZZZ appears in the Schemata view */

/* expect co to be 0 so initialise to some other value */
co = 99;

printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.SCHEMATA\n");
printf("WHERE SCHEMA_NAME = 'ZZZ';\n");

EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.SCHEMATA
WHERE SCHEMA_NAME = 'ZZZ';
CHCKOK ();
printf ("co should be 1; its value is %d\n\n", co);
if (co != 1)
   flag = 0;

/* check TABLE_CONSTRAINTS view references constraints in ZZZ */

co = 99;

printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_SCHEMA = 'ZZZ' AND\n");
printf("TABLE_NAME = 'AAA' AND\n");
printf("CONSTRAINT_TYPE = 'FOREIGN KEY';\n");

EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE TABLE_SCHEMA = 'ZZZ' AND
TABLE_NAME = 'AAA' AND
CONSTRAINT_TYPE = 'FOREIGN KEY';
CHCKOK ();
printf ("co should be 2; its value is %d\n\n", co);
if (co != 2)
   flag = 0;

co = 99;

printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_SCHEMA = 'ZZZ' AND\n");
printf("TABLE_NAME = 'BBB' AND\n");
printf("CONSTRAINT_TYPE = 'FOREIGN KEY';\n");

EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE TABLE_SCHEMA = 'ZZZ' AND
TABLE_NAME = 'BBB' AND
CONSTRAINT_TYPE = 'FOREIGN KEY';
CHCKOK ();
printf ("co should be 1; its value is %d\n\n", co);
if (co != 1)
   flag = 0;

co = 99;

printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_SCHEMA = 'ZZZ' AND\n");
printf("TABLE_NAME = 'BBB' AND\n");
printf("CONSTRAINT_TYPE = 'UNIQUE';\n");

EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE TABLE_SCHEMA = 'ZZZ' AND
TABLE_NAME = 'BBB' AND
CONSTRAINT_TYPE = 'UNIQUE';
CHCKOK ();
printf ("co should be 1; its value is %d\n\n", co);
if (co != 1)
   flag = 0;

co = 99;

printf("SELECT COUNT (*) INTO :co\n");
printf("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\n");
printf("WHERE TABLE_SCHEMA = 'ZZZ' AND\n");
printf("TABLE_NAME = 'CCC' AND\n");
printf("CONSTRAINT_TYPE = 'FOREIGN KEY';\n");

EXEC SQL SELECT COUNT (*) INTO :co
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE TABLE_SCHEMA = 'ZZZ' AND
TABLE_NAME = 'CCC' AND
CONSTRAINT_TYPE = 'FOREIGN KEY';
CHCKOK ();
printf ("co should be 1; its value is %d\n\n", co);
if (co != 1)
   flag = 0;

printf("INSERT INTO ZZZ.AAA VALUES ('sue',23,45,67,89);\n");
EXEC SQL INSERT INTO ZZZ.AAA values ('sue',23,45,67,89);

/* That should generate an integrity constraint violation */
/* which is SQLSTATE 23000 */

printf("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;

printf("SQLSTATE should be 23000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "23000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "23000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

printf("INSERT INTO ZZZ.BBB VALUES (53,778,'mat',1);\n");
EXEC SQL INSERT INTO ZZZ.BBB  VALUES (53,778,'mat',1);

/* That should generate an integrity constraint violation */
/* which is SQLSTATE 23000 */

printf("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;

printf("SQLSTATE should be 23000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "23000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "23000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

printf("INSERT INTO ZZZ.CCC VALUES (456,231,5);\n");
EXEC SQL INSERT INTO ZZZ.CCC VALUES (456,231,5);

/* That should generate an integrity constraint violation */
/* which is SQLSTATE 23000 */

printf("SQLCODE should be < 0; its value is %ld\n", SQLCODE);
if (SQLCODE >= 0)
  flag = 0;

printf("SQLSTATE should be 23000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "23000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "23000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

/* insert a row into AAA with non-null values in A1 & A2 */

printf("INSERT INTO ZZZ.AAA VALUES ('sue',25,NULL, NULL, NULL);\n");
EXEC SQL INSERT INTO ZZZ.AAA VALUES ('sue',25, NULL, NULL, NULL);
CHCKOK ();
printf("\n");

/* insert a row into BBB with non-null vals in all cols */
/* and vals in A1 and A2 = to AAA.A1, AAA.A2 */

printf("INSERT INTO ZZZ.BBB VALUES (345,8441,'sue',25);\n");
EXEC SQL INSERT INTO ZZZ.BBB VALUES (345,8441,'sue',25);
CHCKOK ();
printf("\n");

/* Insert into CCC wih non-null vals in all cols */
/* B1 = BBB.B1     B2 = BBB.B2 */

printf("INSERT INTO ZZZ.CCC VALUES (345, 8441, 1);\n");
EXEC SQL INSERT INTO ZZZ.CCC VALUES (345, 8441, 1);

CHCKOK ();
printf("\n");

/* insert a row into AAA with non-null vals in all cols */
/* A3 = BBB.B1, A4 = BBB.B2, a5 = CCC.c3 */

printf("INSERT INTO ZZZ.AAA VALUES ('ben',22,345,8441,1);\n");
EXEC SQL INSERT INTO ZZZ.AAA VALUES ('ben',22,345,8441,1);

CHCKOK ();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

printf("DROP SCHEMA ZZZ CASCADE;\n");
EXEC SQL DROP SCHEMA ZZZ CASCADE;
CHCKOK ();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts805.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7562','pass','PC');
       }
     else
       {
          printf("\n\n       yts805.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7562','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7562 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


/*  EMBEDDED C (file YTS768.PC)  */

/* Copyright 1996 National Computing Centre Limited, */
/* and Computer Logic R&D S.A */
/* on behalf of the CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS768.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  This routine tests that a user can access the SCHEMATA       */
/*  view in the information schema                               */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    21.2 -- Information schema                                 */
/*    21.2.4 -- SCHEMATA view                                    */
/*    F#35 -- Intermediate information schema                    */
/*    F#17 -- Multiple schemas per user                          */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-12                                    */
/*    Added rollback after authid                                */
/*    Removed EXEC SQL from inside printf                        */
/*    Cleanups                                                   */
/*    Fixed syntax error                                         */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
char catn[129];
char schn[129];
char scho[129];
long count1;
long count2;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
short i;
/* date_time declaration */
time_t cal;
long     flag;
long     flag2;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts768.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7550 ********************/
flag = 1;

     printf("                  TEST7550 \n");
     printf("Access to SCHEMATA view\n");
     printf("References:\n");
     printf("21.2 -- Information schema\n");
     printf("21.2.4 -- SCHEMATA view\n");
     printf("F#35 -- Intermediate information schema\n");
     printf("F#17 -- Multiple schemas per user\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

     SQLCODE = -1;
     strcpy (SQLSTATE, "xxxxx");

/* User CTS1 is expected to own two schemas : CTS1 and CTS1B */

count1 = 0;

/* Check that the correct number of rows are selected */
/* from the SCHEMATA view                             */

printf("SELECT COUNT (*) INTO :count1 FROM\n");
printf("INFORMATION_SCHEMA.SCHEMATA;\n");
EXEC SQL SELECT COUNT (*) INTO :count1 FROM 
INFORMATION_SCHEMA.SCHEMATA;
CHCKOK ();
printf ("count1 should be 2; its value is %ld\n\n", count1);
if (count1 != 2)
  flag = 0;

/* declare cursor based on INFORMATION_SCHEMA.SCHEMATA */

printf("DECLARE data768 CURSOR FOR\n");
printf("SELECT CATALOG_NAME, SCHEMA_NAME, SCHEMA_OWNER\n");
printf("FROM INFORMATION_SCHEMA.SCHEMATA;\n\n");
EXEC SQL DECLARE data768 CURSOR FOR
SELECT CATALOG_NAME, SCHEMA_NAME, SCHEMA_OWNER
FROM INFORMATION_SCHEMA.SCHEMATA;

printf("OPEN data768;\n");
EXEC SQL OPEN data768;
CHCKOK ();
printf("\n");

 for (i = 0; i < 128; i++)  
     {
       schn[i] = 'x';
       scho[i] = 'x';
       catn[i] = 'x';
     }

       schn[128] = '\0';
       scho[128] = '\0';
       catn[128] = '\0';

/* fetch first row from SCHEMATA view */

printf("FETCH data768 INTO :catn, :schn, :scho;\n");
EXEC SQL FETCH data768 INTO :catn, :schn, :scho;
CHCKOK ();
printf("scho should be CTS1, it is %s\n", scho);
if (strncmp(scho,"CTS1",4) != 0)
   flag = 0;
printf("schn should be CTS1 or CTS1B, it is %s\n\n", schn);
if (strncmp(schn,"CTS1",4) != 0 && strncmp(schn,"CTS1B",5) != 0)
   flag = 0;

/* fetch second row from SCHEMATA view */

/* reinitialise host variables */

 for (i = 0; i < 128; i++)   
   { 
     schn[i] = 'x'; 
     scho[i] = 'x'; 
     catn[i] = 'x';
   }


       schn[128] = '\0';
       scho[128] = '\0';
       catn[128] = '\0';

printf("FETCH data768 INTO :catn, :schn, :scho;\n");
EXEC SQL FETCH data768 INTO :catn, :schn, :scho;
CHCKOK ();
printf("scho should be CTS1, it is %s\n", scho);
if (strncmp(scho,"CTS1",4) != 0)
   flag = 0;
printf("schn should be CTS1 or CTS1B, it is %s\n", schn);
if (strncmp(schn,"CTS1",4) != 0 && strncmp(schn,"CTS1B",5) != 0)
   flag = 0;

/* check no data condition is raised */

printf("FETCH data768 INTO :catn, :schn, :scho;\n");
EXEC SQL FETCH data768 INTO :catn, :schn, :scho;

/* That should generate a no data completion condition */
/* which is SQLSTATE 02000 */

printf("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;
printf("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

/* ensure that only schemas owned by the current user can be referenced */

count2 = 99;
printf("SELECT COUNT (*) INTO :count2\n");
printf("FROM INFORMATION_SCHEMA.SCHEMATA\n");
printf("WHERE SCHEMA_OWNER = 'CTS2';\n");
EXEC SQL SELECT COUNT (*) INTO :count2
FROM INFORMATION_SCHEMA.SCHEMATA
WHERE SCHEMA_OWNER = 'CTS2';
CHCKOK ();
printf(" value 0 expected, %ld returned\n\n", count2);
if (count2 != 0)
   flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       YTS768.PC  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7550','pass','PC');
       }
     else
       {
          printf("\n\n       YTS768.PC  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7550','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7550 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


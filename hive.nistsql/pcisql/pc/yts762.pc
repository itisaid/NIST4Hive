/*  EMBEDDED C (file "YTS762.PC")  */

/* Copyright 1996 National Computing Centre Limited, */
/* and Computer Logic R&D S.A */
/* on behalf of the CTS5 SQL2 Project. */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  YTS762.PC                                                   */
/*  WRITTEN BY:  Susan Watters                                   */
/*                                                               */
/*  This routine tests <query expression> with EXCEPT            */
/*                                                               */
/*                                                               */
/*  REFERENCES                                                   */
/*    7.10    <query expression>                                 */
/*    7.10    GR.1b                                              */
/*    7.3     <table expression>                                 */
/*    13.1    <declare cursor>                                   */
/*    13.5    <select statement : single row>                    */
/*    F#30    Table operations                                   */
/*                                                               */
/*  DATE LAST ALTERED 02.01.96 CTS5 Hand-over Test               */
/*  flags correctly initialised 20/11/95                         */
/*  EXCEPT ALL statements updated to make testing more rigourous */
/*                                                               */
/*  QA Status: Full FC                                           */
/*                                                               */
/*  Revised by DWF 1996-03-06                                    */
/*    Added rollback after authid                                */
/*    Cleanup                                                    */
/*    Removed EXEC SQL from inside printf                        */
/*    Fixed string lengths                                       */
/*    Fixed SQL syntax error                                     */
/*    Tightened pass criteria                                    */
/*    Fixed expected results                                     */
/*    More output                                                */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void
NOSUBCLASS();
void
CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char eno[4];
char ename[21];
long egrad;
char ecit[16];
short j;
char uid[19];
char uidx[19];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long     flag;
long     flag3;
long     flag4;
long     flag5;
long     i;

main()
{
     strcpy(uid,"CTS1              ");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, yts762.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST7517 ********************/
flag = 1;

     printf("                  TEST7517 \n");
     printf("   <query expression> with EXCEPT\n");
     printf("References:\n");
     printf("    7.10   <query expression>\n");
     printf("    7.10   GR.1b\n");
     printf("    7.3    <table expression>\n");
     printf("    13.1   <declare cursor>\n");
     printf("    13.5   <select statement : single row>\n");
     printf("    F#30   Table operations\n");
     printf("   - - - - - - - - - - - - - - - - - - -\n\n");

  SQLCODE = -1;
  strcpy(SQLSTATE,"xxxxx");

/* initialise variables */
flag3 = 1;
flag4 = 1;
flag5 = 1;

/* STAFF1 and STAFF4 are two tables where */
/* the data type of the i-th col of STAFF1 and the data type of */
/* the i-th column of STAFF4 are comparable. STAFF1 */
/* contains three or more copies of some rows, two */
/* copies of other rows and some rows that are not duplicated. */

/* STAFF4 contains some rows that are duplicates of rows in */
/* STAFF1 and some that are not. Cases are included where the  */
/* multiplicity of a row is more than, equal to and less than */
/* the multiplicity of that row in STAFF1 */

printf("Insert values into CTS1.STAFF1 and CTS1.STAFF4\n");

/* insert row into STAFF1 three times */

for (j = 0; j < 3; j++)
{
  printf("INSERT INTO CTS1.STAFF1 VALUES\n");
  printf("  ('E7','Grace',10,'Paris');\n");
  EXEC SQL INSERT INTO CTS1.STAFF1 VALUES
  ('E7','Grace',10,'Paris');
  CHCKOK ();
  printf("\n");
}

/* insert row into STAFF4 three times */
/* same number of repetitions as STAFF1 */

for (j = 0; j < 3; j++)
{
  printf("INSERT INTO CTS1.STAFF4 VALUES\n");
  printf("('E7','Grace',10,'Paris');\n");
  EXEC SQL INSERT INTO CTS1.STAFF4 VALUES
  ('E7','Grace',10,'Paris');
  CHCKOK ();
  printf("\n");
}

/* insert row into STAFF1 three times */

for (j = 0; j < 3; j++)
{
  printf("INSERT INTO CTS1.STAFF1 VALUES\n");
  printf("('E8','Henry',20,'Prague');\n");
  EXEC SQL INSERT INTO CTS1.STAFF1 VALUES
  ('E8','Henry',20,'Prague');
  CHCKOK ();
  printf("\n");
}

/* insert row into STAFF4 twice */
/* fewer repetitions than STAFF1 */

for (j = 0; j < 2; j++)
{
  printf("INSERT INTO CTS1.STAFF4 VALUES\n");
  printf("('E8','Henry',20,'Prague');\n");
  EXEC SQL INSERT INTO CTS1.STAFF4 VALUES
  ('E8','Henry',20,'Prague');
  CHCKOK ();
  printf("\n");
}

/* insert a row into STAFF1 twice */

for (j = 0; j < 2; j++)
{
  printf("INSERT INTO CTS1.STAFF1 VALUES\n");
  printf("('E9','Imogen',10,'Prague');\n");
  EXEC SQL INSERT INTO CTS1.STAFF1 VALUES
  ('E9','Imogen',10,'Prague');
  CHCKOK ();
  printf("\n");
}

/* insert a row into STAFF1 twice */

for (j = 0; j < 2; j++)
{
  printf("INSERT INTO CTS1.STAFF1 VALUES\n");
  printf("('E10','John',20,'Brussels');\n");
  EXEC SQL INSERT INTO CTS1.STAFF1 VALUES
  ('E10','John',20,'Brussels');
  CHCKOK ();
  printf("\n");
}

/* insert one row into STAFF1 */

printf("INSERT INTO CTS1.STAFF1 VALUES\n");
printf("('E11','Keith',10,'Vienna');\n");
EXEC SQL INSERT INTO CTS1.STAFF1 VALUES
('E11','Keith',10,'Vienna');
CHCKOK ();
printf("\n");

/* insert row into STAFF4 twice */
/* more repetitions than STAFF1 */

for (j = 0; j < 2; j++)
{
  printf("INSERT INTO CTS1.STAFF4 VALUES\n");
  printf("('E11','Keith',10,'Vienna');\n");
  EXEC SQL INSERT INTO CTS1.STAFF4 VALUES
  ('E11','Keith',10,'Vienna');
  CHCKOK ();
  printf("\n");
}

/* insert row into STAFF1 once */

printf("INSERT INTO CTS1.STAFF1 VALUES\n");
printf("('E12','Laura',20,'Deale');\n");
EXEC SQL INSERT INTO CTS1.STAFF1 VALUES
('E12','Laura',20,'Deale');
CHCKOK ();
printf("\n");

/* insert row into STAFF4 */
/* this row is unique to STAFF4 */

printf("INSERT INTO CTS1.STAFF4 VALUES\n");
printf("('E13','Mike',30,'Vienna');\n");
EXEC SQL INSERT INTO CTS1.STAFF4 VALUES
('E13','Mike',30,'Vienna');
CHCKOK ();
printf("\n");

/* declare cursor */
printf("DECLARE data62 CURSOR FOR \n");
printf("SELECT * FROM CTS1.STAFF1\n");
printf("EXCEPT SELECT * FROM CTS1.STAFF4;\n");
EXEC SQL DECLARE data62 CURSOR FOR
SELECT * FROM CTS1.STAFF1
EXCEPT SELECT * FROM CTS1.STAFF4;

printf("OPEN data62;\n");
EXEC SQL OPEN data62;
CHCKOK ();
printf("\n");

printf ("Should get these three rows, in any order:\n");
printf("E9 Imogen 10 Prague\n");
printf("E10 John 20 Brussels\n");
printf("E12 Laura 20 Deale\n\n");

/* Fetch rows defined by cursor */
for (i = 0; i < 3; i++)
{
strcpy(eno,"vvv");
strcpy(ename,"yyyyyyyyyyyyyyyyyyyx");
strcpy(ecit,"zzzzzzzzzzzzzzx");
egrad = 0;
printf("FETCH data62 INTO :eno, :ename, :egrad, :ecit\n");
EXEC SQL FETCH data62 INTO :eno, :ename, :egrad, :ecit;
CHCKOK ();
printf ("eno is %s\n", eno);
printf ("ename is %s\n", ename);
printf ("egrad is %ld\n", egrad);
printf ("ecit is %s\n\n", ecit);

if (strncmp(eno,"E9",2) == 0 && flag3 == 1)
   { 
     flag3 = 0;
     if (strncmp(ename,"Imogen",6) != 0)
        flag = 0;
     if (egrad != 10)
        flag = 0;
     if (strncmp(ecit,"Prague",6) != 0)
        flag = 0;
   }

if (strncmp(eno,"E10",3) == 0 && flag4 == 1)
   { 
     flag4 = 0;
     if (strncmp(ename,"John",4) != 0)
        flag = 0;
     if (egrad != 20)
        flag = 0;
     if (strncmp(ecit,"Brussels",8) != 0)
        flag = 0;
   }

if (strncmp(eno,"E12",3) == 0 && flag5 == 1)
   { 
     flag5 = 0;
     if (strncmp(ename,"Laura",5) != 0)
        flag = 0;
     if (egrad != 20)
        flag = 0;
     if (strncmp(ecit,"Deale",4) != 0)
        flag = 0;
   }
}

if (flag3 != 0 || flag4 != 0 || flag5 != 0)
   {
     printf("Values fetched were incorrect\n\n");
     flag = 0;
   }

/* check no data condition is raised */
printf("FETCH data62 INTO :eno, :ename, :egrad, :ecit\n");
EXEC SQL FETCH data62 INTO :eno, :ename, :egrad, :ecit;

/* That should generate a no data exception */
/* which is SQLSTATE 02000 */

printf("SQLCODE should be 100; its value is %ld\n", SQLCODE);
if (SQLCODE != 100)
  flag = 0;

SQLSTATE[5] = '\0';
printf("SQLSTATE should be 02000; its value is %s\n", SQLSTATE);
NOSUBCLASS();
if (strncmp (NORMSQ, "02000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "02000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
printf("\n");

printf("CLOSE data62\n");
EXEC SQL CLOSE data62;

/* first check for EXCEPT ALL */

printf("INSERT INTO CTS1.ET (col1, col2, col3, col4)\n");
printf("SELECT * FROM CTS1.STAFF1 EXCEPT ALL\n");
printf("SELECT * FROM CTS1.STAFF4;\n");
EXEC SQL INSERT INTO CTS1.ET (col1, col2, col3, col4)
SELECT * FROM CTS1.STAFF1 EXCEPT ALL
SELECT * FROM CTS1.STAFF4;
CHCKOK ();
printf("\n");

j = 0;
printf("SELECT COUNT (DISTINCT COL1) INTO :j FROM CTS1.ET;\n");
EXEC SQL SELECT COUNT (DISTINCT COL1) INTO :j FROM CTS1.ET;
CHCKOK ();
printf("j should be 4; its value is %d\n\n", j);
if (j != 4)
  flag = 0;

j = 0;
printf("SELECT COUNT (*) INTO :j FROM CTS1.ET;\n");
EXEC SQL SELECT COUNT (*) INTO :j FROM CTS1.ET;
CHCKOK ();
printf("j should be 6; its value is %d\n\n", j);
if (j != 6)
  flag = 0;

/* Second test For EXCEPT ALL */

printf("DELETE FROM CTS1.ET;\n");
EXEC SQL DELETE FROM CTS1.ET;
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.ET (col1, col2, col3, col4)\n");
printf("SELECT DISTINCT * FROM CTS1.STAFF1 EXCEPT ALL\n");
printf("         SELECT * FROM CTS1.STAFF4);\n");
EXEC SQL INSERT INTO CTS1.ET (col1, col2, col3, col4)
SELECT DISTINCT * FROM CTS1.STAFF1 EXCEPT ALL
SELECT * FROM CTS1.STAFF4;
CHCKOK ();
printf("\n");

j = 0;
printf("SELECT COUNT (*) INTO :j FROM CTS1.ET;\n");
EXEC SQL SELECT COUNT (*) INTO :j FROM CTS1.ET;
CHCKOK ();
printf ("j should be 3; its value is %d\n\n", j);
if (j != 3)
  flag = 0;

/* Third test For EXCEPT ALL */

printf("DELETE FROM CTS1.ET;\n");
EXEC SQL DELETE FROM CTS1.ET;
CHCKOK ();
printf("\n");

printf("INSERT INTO CTS1.ET (col1, col2, col3, col4)\n");
printf("SELECT * FROM CTS1.STAFF1 EXCEPT ALL\n");
printf("         SELECT DISTINCT * FROM CTS1.STAFF4);\n");
EXEC SQL INSERT INTO CTS1.ET (col1, col2, col3, col4)
SELECT * FROM CTS1.STAFF1 EXCEPT ALL
SELECT DISTINCT * FROM CTS1.STAFF4;
CHCKOK ();
printf("\n");

j = 0;
printf("SELECT COUNT (*) INTO :j FROM CTS1.ET;\n");
EXEC SQL SELECT COUNT (*) INTO :j FROM CTS1.ET;
CHCKOK ();
printf ("j should be 9; its value is %d\n\n", j);
if (j != 9)
  flag = 0;

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK ();
printf("\n");

     if ( flag == 1 )
       {
          printf("\n\n       yts762.pc  *** pass ***\n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7517','pass','PC');
       }
     else
       {
          printf("\n\n       yts762.pc  *** fail ***\n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7517','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7517 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}


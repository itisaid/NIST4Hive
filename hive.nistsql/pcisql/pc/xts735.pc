/*  EMBEDDED C (file " XTS735.PC ")  */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS735.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  INSERT National character literal in NCHAR column            */
/*                                                               */
/*  REFERENCES                                                   */
/*    13.8 -- <insert statement>                                 */
/*    5.3  -- <Literal>                                          */
/*    6.1  -- <data type>                                        */
/*    6.1 SR.2                                                   */
/*    F#3  -- Basic Schema manipulation                          */       
/*    F#42 -- <National character>                               */
/*                                                               */
/*  DATE LAST ALTERED  18/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 07/12/95                    */
/*         print timestamp                                       */
/*         Include Files                                         */
/*         Define NOSUBCLASS/CHCKOK at test beginning            */
/*                                                               */
/*  QA STATUS : QA CHECK                                         */
/*                                                               */
/* Revised by DWF 1996-02-07                                     */
/*   Removed status checks after cursor definitions              */
/*   Fixed SDL transactions                                      */
/*   Fixed national character string literals                    */
/*   Fixed C declaration                                         */
/*   Fixed string length                                         */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
long SQLCODE;
char SQLSTATE[6];
char uid[19];
char uidx[19];
long col1;
char CHARACTER SET VANGELIS col2[13];
short indic1;
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
long flag;

main()
{
strcpy(uid,"CTS1              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if(strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts735.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf(" \n Time Run :  %s \n ", ctime(&cal));

/******************** BEGIN TEST7035 ********************/
 flag = 1;
 printf("                 TEST7035\n");
 printf("    INSERT National character literal in NCHAR column\n");
 printf("References\n");
 printf("    13.8 -- <insert statement> \n");
 printf("    5.3  -- <Literal> \n");
 printf("    6.1  -- <data type> \n");
 printf("    6.1  SR.2 \n");
 printf("    F#3  -- Basic Schema manipulation \n");                
 printf("    F#42 -- <National character>\n");
 printf("   - - - - - - - - - - - - - - - - - - -\n\n");

printf("\n");
printf("When the character set name of NATIONAL CHARACTER is known\n");
printf("please use TED hooks to replace VANGELIS with the \n");
printf("implementation dependent national <character set name>\n");
printf("and the values used in nat. char. literals with permissible\n");
printf("values from that specific character set repertoire.\n");
printf("\n");

 /* Initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE, "xxxxx");

/* Create table TAB735 and insert 3 rows */
printf("CREATE TABLE TAB735 \n"); 
printf("(C1 NUMERIC(5) UNIQUE,\n");
printf(" C2 NCHAR(12));\n");
EXEC SQL CREATE TABLE TAB735
         (C1 NUMERIC(5) UNIQUE,
          C2 NCHAR(12));
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");
printf("INSERT INTO TAB735 VALUES(1,NULL);\n");
EXEC SQL INSERT INTO TAB735 VALUES(1,NULL);     
CHCKOK();
printf("\n");

printf("INSERT INTO TAB735 VALUES(2, N'!');\n");
EXEC SQL INSERT INTO TAB735 VALUES(2, N'!');
CHCKOK();
printf("\n");

printf("INSERT INTO TAB735 VALUES(3, N'  !');\n");
EXEC SQL INSERT INTO TAB735 VALUES(3, N'  !');
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("DECLARE F CURSOR FOR SELECT C1,C2\n");
printf("FROM CTS1.TAB735\n");
printf("ORDER BY C1;\n\n");
EXEC SQL DECLARE F CURSOR FOR SELECT C1,C2
         FROM CTS1.TAB735
         ORDER BY C1;

printf("OPEN F;\n");
EXEC SQL OPEN F;
CHCKOK();
printf("\n");
 
/* initialise host variables */
col1 = 0;
strcpy(col2,"xxxxxxxxxxxx");
indic1 = 99;

/* now start fetching rows */
/* fetch first row */
printf("FETCH F INTO :col1,:col2:indic1;\n");
EXEC SQL FETCH F INTO :col1,:col2:indic1;
CHCKOK();
printf("col1 should be 1; its value is %ld\n",col1);
printf("col2 should be NULL indicated by -1; its value is %d\n",indic1);
if(col1 != 1 || indic1!=-1)
    flag = 0;
printf("\n");

/* initialise host variables */
col1 = 0;
strcpy(col2,"xxxxxxxxxxxx");

/* fetch second row */
printf("FETCH F INTO :col1,:col2;\n");
EXEC SQL FETCH F INTO :col1,:col2;
CHCKOK();
printf("col1 should be   2; its value is %ld\n",col1);
printf("col2 should be '!'; its value is %s\n",col2);
if(col1 != 2 || strncmp(col2,"!",1)!=0) 
    flag = 0;
printf("\n");

/* initialise host variables */
col1 = 0;
strcpy(col2,"xxxxxxxxxxxx");

/* fetch third row */
printf("FETCH F INTO :col1,:col2;\n");
EXEC SQL FETCH F INTO :col1,:col2;
CHCKOK();
printf("col1 should be     3; its value is %ld\n",col1);
printf("col2 should be '  !'; its value is %s\n",col2);
if(col1 != 3 || strncmp(col2,"  !",3)!=0) 
    flag = 0;
printf("\n");

/* end fetches */
/* now close the cursor */
printf("CLOSE F;\n");
EXEC SQL CLOSE F;
CHCKOK();
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* now restore database in its original state */
printf("DROP TABLE TAB735 CASCADE;\n");
EXEC SQL DROP TABLE TAB735 CASCADE;
CHCKOK();
printf("\n");
 
printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

 /* record results */

     if( flag == 1 )
       {
          printf("\n\n       xts735.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7035','pass','PC');
       }
     else
       {
          printf("\n\n       xts735.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7035','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST7035 *********************/

     exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}

/*  EMBEDDED C (file "MPA009.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1995/03/23 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  MPA009.PC                                                    */
/*  WRITTEN BY: David W. Flater                                  */
/*                                                               */
/*  THIS PROGRAM IS PART A OF A TWO-PART PROGRAM(A & B) THAT     */
/*  TESTS THE CONCURRENCY OF DYNAMIC SQL                         */
/*                                                               */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
   long knum;
   long cnt1;
   long cnt2;
   long tmpint;
   char uid[19];
   char uidx[19];
   char dstmt[51];
EXEC SQL END DECLARE SECTION;
   long i;
   long SQLCODE;
   int errcnt;
/* date_time declaration */
time_t cal;
   long code1;
   long pauze;
   long count1;
   long loops;
   long cnt;
   long flcnt;
   long mxfail;
   long pauze2;
   long pauze3;
   long flag;
   long j;
   long tmpcnt;
   long flg1;

main()
{

strcpy(uid,"SULLIVAN1         ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,9) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, mpa009.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n")
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

  pauze = 1;
  flag = 1;
  pauze3 = 300;
  loops = 5;
  flcnt = 0;
  mxfail = 10;
  pauze2 = 100;

/******************** BEGIN TEST0847 ********************/
flag = 1;

     printf("\n                TEST0847 \n");
     printf("     Dynamic SQL:  serializability\n");
printf("     - - - - - - - - - - - - - - - - - - -\n\n");

printf ("*** This program is part A of a two-part\n");
printf ("*** program (A & B).\n");

printf ("\n\n This is Program A which starts first and waits.... \n\n");

P100:
/*                       -----Initialization----- */
    code1 = 0;
    EXEC SQL DELETE FROM MP9_AA;
    if (SQLCODE < 0)
          code1 =  1;
    EXEC SQL INSERT INTO MP9_AA VALUES (1);
    if (SQLCODE < 0)
          code1 =  1;
    EXEC SQL INSERT INTO MP9_AA VALUES (2);
    if (SQLCODE < 0)
          code1 =  1;
    EXEC SQL INSERT INTO MP9_AA VALUES (3);
    if (SQLCODE < 0)
          code1 =  1;
    EXEC SQL INSERT INTO MP9_AA VALUES (4);
    if (SQLCODE < 0)
          code1 =  1;
    EXEC SQL INSERT INTO MP9_AA VALUES (5);
    if (SQLCODE < 0)
          code1 =  1;
    EXEC SQL DELETE FROM MP9_BB;
    if (SQLCODE < 0)
          code1 =  1;
    EXEC SQL INSERT INTO MP9_BB VALUES (6);
    if (SQLCODE < 0)
          code1 =  1;
    EXEC SQL INSERT INTO MP9_BB VALUES (7);
    if (SQLCODE < 0)
          code1 =  1;
    EXEC SQL INSERT INTO MP9_BB VALUES (8);
    if (SQLCODE < 0)
          code1 =  1;
    EXEC SQL INSERT INTO MP9_BB VALUES (9);
    if (SQLCODE < 0)
          code1 =  1;
    EXEC SQL INSERT INTO MP9_BB VALUES (10);
    if (SQLCODE < 0)
          code1 =  1;
    EXEC SQL DELETE FROM MP9_NEXTKEY;
    if (SQLCODE < 0)
          code1 =  1;
    EXEC SQL INSERT
       INTO MP9_NEXTKEY (KEYNUM,AUTHOR)
       VALUES (1,'A');
    if (SQLCODE < 0)
          code1 =  1;

    if (code1 == 1)
        {
              printf("*****Error initializing tables ****\n");
              EXEC SQL ROLLBACK WORK;
              goto P100;
        }
    
       
    EXEC SQL COMMIT WORK;
    if (SQLCODE < 0)
        {
           printf("*********Setup will not commit ********\n");
           EXEC SQL ROLLBACK WORK;
           goto P100;
        } 
    
/*                       -----Synchronization----- */
    
P105:
         printf("   PLEASE start program MPB009!!!   \n\n");
   /* pause a little */
   /* increase value of variable pauze if MPB009 has trouble */
   /*   getting table MP9_NEXTKEY. */
    i = 0;
P106:
    EXEC SQL UPDATE MP9_NN
         SET NUMTEST = 1;
    i = i + 1;
    if (i < pauze)
      goto P106;
    /* end of pause */

    knum = 0;
    EXEC SQL SELECT COUNT(*)
         INTO :knum
         FROM MP9_NEXTKEY WHERE AUTHOR = 'B';
    
    EXEC SQL COMMIT WORK;
    
    /* are we in sync? */
    
    if (knum == 0)
         goto P105;
    
    /* YES, we are in sync! */    
    
    printf("Transaction A Starts!!  \n");
    /* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
    printf("\n");
    printf("IF this test lasts too long, DEADLOCK\n");
    printf("has taken place, STOP this test!\n");

  i = 1;

     strcpy (dstmt,
     "SELECT ANUM FROM MP9_AA                           ");
     EXEC SQL PREPARE ERTY FROM :dstmt;
     strcpy (dstmt,
     "SELECT BNUM FROM MP9_BB                           ");
     EXEC SQL PREPARE ZERTY FROM :dstmt;

P101:
    /* Move all data into table BB for application Yook. */
    EXEC SQL DECLARE YOOK CURSOR FOR ERTY;
    EXEC SQL OPEN YOOK;
    if (SQLCODE < 0)
      goto P120;
    count1 = 0;

P102:
    EXEC SQL FETCH YOOK INTO :tmpint;
    if (SQLCODE < 0)
      goto P120;
    if (SQLCODE == 100)
    {
      EXEC SQL COMMIT WORK;
      printf("%ld rows moved from MP9_AA to MP9_BB.\n",count1);
      /* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
      if (SQLCODE < 0)
        goto P120;
      if (count1 != 10 && count1 != 5 && count1 != 0)
        flag = 0;
      if (i != 1 && count1== 5)
        flag = 0;
      goto P103;
    }
    EXEC SQL INSERT INTO MP9_BB VALUES (:tmpint);
    if (SQLCODE < 0)
      goto P120;
    EXEC SQL DELETE FROM MP9_AA WHERE CURRENT OF YOOK;
    if (SQLCODE < 0)
      goto P120;
    count1 = count1 + 1;
    goto P102;

P120:
    printf("!+!+!+!+!+!+!+!+  DEADLOCK? !+!+!+!+!+!+!+!+!+!+!\n");
    printf("Negative SQLCODE (Deadlock?) was returned earlier\n");
    printf("!+!+!+!+!+!+!+!+  DEADLOCK? !+!+!+!+!+!+!+!+!+!+!\n");
    /* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
    printf("Restarting transaction %ldA.\n", i);
    EXEC SQL ROLLBACK WORK;
    flcnt = flcnt + 1;
    if (flcnt < mxfail)
      goto P101;
  flcnt = 0;
    printf("Wasting some time to try to end repeated restarts...\n");
    j = 0;
P136:
    EXEC SQL UPDATE MP9_NN
         SET NUMTEST = 1;
    j = j + 1;
    if (j < pauze2)
      goto P136;
    /* end of pause */
    goto P101;


P103:
    /* Move all data into table AA for application Zook. */
    EXEC SQL DECLARE ZOOK CURSOR FOR ZERTY;
    EXEC SQL OPEN ZOOK;
    if (SQLCODE < 0)
      goto P110;
    count1 = 0;

P104:
    EXEC SQL FETCH ZOOK INTO :tmpint;
    if (SQLCODE < 0)
      goto P110;
    if (SQLCODE == 100)
    {
      EXEC SQL COMMIT WORK;
      printf("%ld rows moved from MP9_BB to MP9_AA.\n",count1);
      /* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
      if (SQLCODE < 0)
        goto P110;
      if (count1 != 10 && count1 != 0)
        flag = 0;
      goto P166;
    }
    EXEC SQL INSERT INTO MP9_AA VALUES (:tmpint);
    if (SQLCODE < 0)
      goto P110;
    EXEC SQL DELETE FROM MP9_BB WHERE CURRENT OF ZOOK;
    if (SQLCODE < 0)
      goto P110;
    count1 = count1 + 1;
    goto P104;

P166:
    /* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
    printf("Survived transaction %ld.\n", i);
    if (i >= loops)
      goto P199;
    i=i+1;
    goto P101;

P110:
    printf("!+!+!+!+!+!+!+!+  DEADLOCK? !+!+!+!+!+!+!+!+!+!+!\n");
    printf("Negative SQLCODE (Deadlock?) was returned earlier\n");
    printf("!+!+!+!+!+!+!+!+  DEADLOCK? !+!+!+!+!+!+!+!+!+!+!\n");
    /* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
    printf("Restarting transaction %ldB.\n", i);
    EXEC SQL ROLLBACK WORK;
    flcnt = flcnt + 1;
    if (flcnt < mxfail)
      goto P103;
  flcnt = 0;
    printf("Wasting some time to try to end repeated restarts...\n");
    j = 0;
P137:
    EXEC SQL UPDATE MP9_NN
         SET NUMTEST = 1;
    j = j + 1;
    if (j < pauze2)
      goto P137;
    /* end of pause */
    goto P103;

P199:
    /* Waste time */
    printf("MPA009 transaction completed--wasting time....\n");
    cnt = 0;
P115:
    EXEC SQL UPDATE MP9_NEXTKEY
            SET KEYNUM = KEYNUM +1;
    cnt = cnt + 1;
    if (cnt < pauze3)
       goto P115;
    EXEC SQL COMMIT WORK;

    /* Finish up */

    /* All the data must end up in one table in order for the    */
    /* transactions to be serializable.  It is not permissible   */
    /* for a simultaneous swap of the contents of the two tables */
    /* to occur.  One transaction or the other MUST go first.    */

P201:
    /* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
    printf("\n");
    printf("SELECT COUNT(DISTINCT ANUM) INTO :cnt1 FROM MP9_AA;\n");
    EXEC SQL SELECT COUNT(DISTINCT ANUM) INTO :cnt1 FROM MP9_AA;
    if (SQLCODE !=0 )
      {
         printf("Restarting final evaluation due to negative SQLCODE.\n");
         EXEC SQL COMMIT WORK;
         goto P201;
       }
    printf("SELECT COUNT(*) INTO :cnt2 FROM MP9_AA;\n");
    EXEC SQL SELECT COUNT(*) INTO :cnt2 FROM MP9_AA;
    if (SQLCODE !=0 )
      {
         printf("Restarting final evaluation due to negative SQLCODE.\n");
         EXEC SQL COMMIT WORK;
         goto P201;
       }
    printf("cnt1 = %ld; cnt2 = %ld\n", cnt1, cnt2);
    printf("They should be equal.\n");
    if (cnt1 != cnt2)
      flag = 0;
    printf("tmpcnt = cnt1;\n");
    tmpcnt = cnt1;

    printf("\n");
    printf("SELECT COUNT(DISTINCT BNUM) INTO :cnt1 FROM MP9_BB;\n");
    EXEC SQL SELECT COUNT(DISTINCT BNUM) INTO :cnt1 FROM MP9_BB;
    if (SQLCODE !=0 )
      {
         printf("Restarting final evaluation due to negative SQLCODE.\n");
         EXEC SQL COMMIT WORK;
         goto P201;
       }
    printf("SELECT COUNT(*) INTO :cnt2 FROM MP9_BB;\n");
    EXEC SQL SELECT COUNT(*) INTO :cnt2 FROM MP9_BB;
    if (SQLCODE !=0 )
      {
         printf("Restarting final evaluation due to negative SQLCODE.\n");
         EXEC SQL COMMIT WORK;
         goto P201;
       }
    printf("cnt1 = %ld; cnt2 = %ld\n", cnt1, cnt2);
    printf("They should be equal.\n");
    if (cnt1 != cnt2)
      flag = 0;

    printf("\n");
    printf("We must also have either (cnt1 == 10 && tmpcnt == 0)\n");
    printf("  or (cnt1 == 0 && tmpcnt == 10).\n");

    flg1 = 0;
    if (cnt1 == 10 && tmpcnt == 0)
      flg1 = 1;
    if (cnt1 == 0 && tmpcnt == 10)
      flg1 = 1;
    if (flg1 == 0)
      flag = 0;

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0847','pass','PC');
       }
     else
       {
          printf("\n\n       mpa009.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0847','fail','PC');
          errcnt = errcnt + 1;
       }
    EXEC SQL COMMIT WORK;

P198:
    printf("\n\n");
    printf("====================================================\n\n");

/******************** END TEST0847 ********************/
    
    /* Empty table to prevent program MPB from jumping gun on rerun.*/
    EXEC SQL DELETE FROM MP9_NEXTKEY;
    EXEC SQL COMMIT WORK;

    exit(errcnt);
}

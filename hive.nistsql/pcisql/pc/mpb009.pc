/*  EMBEDDED C (file "MPB009.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1995/03/23 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  MPB009.PC                                                    */
/*  WRITTEN BY: David W. Flater                                  */
/*                                                               */
/*  THIS PROGRAM IS PART B OF A TWO-PART PROGRAM(A & B) THAT     */
/*  TESTS THE CONCURRENCY OF DYNAMIC SQL                         */
/*                                                               */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
   long tmpint;
   char uid[19];
   long knum;
   char uidx[19];
     char dstmt[51];
EXEC SQL END DECLARE SECTION;
   long i;
   long SQLCODE;
   int errcnt;
/* date_time declaration */
time_t cal;
   long code1;
   long pauze;
   long count1;
   long loops;
   long flcnt;
   long mxfail;

main()
{

strcpy(uid,"SULLIVAN1         ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,9) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, mpb009.pc\n");
printf("TEd Version #\n")
printf("59-byte ID\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

  pauze = 1;
  loops = 5;
  flcnt = 0;
  mxfail = 50;

/******************** BEGIN TEST0847 ********************/

     printf("\n                TEST0847 \n");
     printf("     Dynamic SQL:  serializability\n");
printf("     - - - - - - - - - - - - - - - - - - -\n\n");

printf ("*** This program is part B of a two-part\n");
printf ("*** program (A & B).\n");

printf ("\n\n This is Program B which starts after Program A... \n\n");

/*                       -----Synchronization----- */
P105:
   knum = 0;
   EXEC SQL SELECT COUNT(*)
        INTO :knum
        FROM MP9_NEXTKEY WHERE AUTHOR = 'A';

   EXEC SQL COMMIT WORK;

/* are we in sync? */

   if (knum == 0)
      {      
        printf("   PLEASE start program MPA009!!!   \n\n");
        goto P105;
      }  

P106:  
   code1 = 0;
   EXEC SQL INSERT INTO MP9_NEXTKEY (KEYNUM,AUTHOR)
            VALUES(2, 'B');
   if (SQLCODE < 0)
        code1 = 1;
   EXEC SQL COMMIT WORK;
   if (SQLCODE < 0)
        code1 = 1;
   if (code1 != 0)
     {
        EXEC SQL ROLLBACK WORK;
        printf("Retrying synchronization logic.\n");
        goto P106;
     }
   
/* YES, we are in sync! */
    
    printf("Transaction B Starts!!  \n");
    /* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
    printf("\n");
    printf("IF this test lasts too long, DEADLOCK\n");
    printf("has taken place, STOP this test!\n");

  i = 1;

     strcpy (dstmt,
     "SELECT ANUM FROM MP9_AA                           ");
     EXEC SQL PREPARE ERTY FROM :dstmt;
     strcpy (dstmt,
     "SELECT BNUM FROM MP9_BB                           ");
     EXEC SQL PREPARE ZERTY FROM :dstmt;

P101:
    /* Move all data into table AA for application Zook. */
    EXEC SQL DECLARE ZOOK CURSOR FOR ZERTY;
    EXEC SQL OPEN ZOOK;
    if (SQLCODE < 0)
      goto P120;
    count1 = 0;

P104:
    EXEC SQL FETCH ZOOK INTO :tmpint;
    if (SQLCODE < 0)
      goto P120;
    if (SQLCODE == 100)
    {
      EXEC SQL COMMIT WORK;
      printf("%ld rows moved from MP9_BB to MP9_AA.\n",count1);
      /* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
      if (SQLCODE < 0)
        goto P120;
      goto P103;
    }
    EXEC SQL INSERT INTO MP9_AA VALUES (:tmpint);
    if (SQLCODE < 0)
      goto P120;
    EXEC SQL DELETE FROM MP9_BB WHERE CURRENT OF ZOOK;
    if (SQLCODE < 0)
      goto P120;
    count1 = count1 + 1;
    goto P104;

P120:
    flcnt = flcnt + 1;
    if (flcnt > mxfail)
      goto P180;
    printf("!+!+!+!+!+!+!+!+  DEADLOCK? !+!+!+!+!+!+!+!+!+!+!\n");
    printf("Negative SQLCODE (Deadlock?) was returned earlier\n");
    printf("!+!+!+!+!+!+!+!+  DEADLOCK? !+!+!+!+!+!+!+!+!+!+!\n");
    /* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
    printf("Restarting transaction %ldA.\n", i);
    EXEC SQL ROLLBACK WORK;
    goto P101;

P103:
    /* Move all data into table BB for application Yook. */
    EXEC SQL DECLARE YOOK CURSOR FOR ERTY;
    EXEC SQL OPEN YOOK;
    if (SQLCODE < 0)
      goto P110;
    count1 = 0;

P102:
    EXEC SQL FETCH YOOK INTO :tmpint;
    if (SQLCODE < 0)
      goto P110;
    if (SQLCODE == 100)
    {
      EXEC SQL COMMIT WORK;
      printf("%ld rows moved from MP9_AA to MP9_BB.\n",count1);
      /* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
      if (SQLCODE < 0)
        goto P110;
      goto P166;
    }
    EXEC SQL INSERT INTO MP9_BB VALUES (:tmpint);
    if (SQLCODE < 0)
      goto P110;
    EXEC SQL DELETE FROM MP9_AA WHERE CURRENT OF YOOK;
    if (SQLCODE < 0)
      goto P110;
    count1 = count1 + 1;
    goto P102;

P166:
    /* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
    printf("Survived transaction %ld.\n", i);
    if (i >= loops)
      goto P199;
    i=i+1;
    goto P101;

P110:
    flcnt = flcnt + 1;
    if (flcnt > mxfail)
      goto P180;
    printf("!+!+!+!+!+!+!+!+  DEADLOCK? !+!+!+!+!+!+!+!+!+!+!\n");
    printf("Negative SQLCODE (Deadlock?) was returned earlier\n");
    printf("!+!+!+!+!+!+!+!+  DEADLOCK? !+!+!+!+!+!+!+!+!+!+!\n");
    /* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
    printf("Restarting transaction %ldB.\n", i);
    EXEC SQL ROLLBACK WORK;
    goto P103;

P180:
    printf("\n");
    printf("Maximum number of failures exceeded\n");
    printf("Assuming no progress\n");
    printf("Program B giving up...\n");
    EXEC SQL ROLLBACK WORK;

P199:
    /* Finish up */

    printf("\n");
    printf("Program A decides whether this was a pass or not.\n");
    printf("Program B is now exiting.\n");
    /* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));
    printf("\n\n");
    printf("====================================================\n\n");

/******************** END TEST0847 ********************/
    
    exit(errcnt);
}

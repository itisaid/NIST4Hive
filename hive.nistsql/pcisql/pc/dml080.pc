/*  EMBEDDED C (file "DML080.PC")  */

/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  DATE 1992/06/08 EMBEDDED C LANGUAGE                          */
/*  NIST SQL VALIDATION TEST SUITE V6.0                          */
/*  DISCLAIMER:                                                  */
/*  This program was written by employees of NIST to test SQL    */
/*  implementations for conformance to the SQL standards.        */
/*  NIST assumes no responsibility for any party's use of        */
/*  this program.                                                */
/*                                                               */
/*  DML080.PC                                                    */
/*  WRITTEN BY: DAVID W. FLATER                                  */
/*                                                               */
/*    THIS ROUTINE TESTS THE DATA MANIPULATION LANGUAGE FOR SQL. */
/*                                                               */
/*  REFERENCES                                                   */
/*        AMERICAN NATIONAL STANDARD database language - SQL     */
/*                          X3.135-1989                          */
/*                                                               */
/*                 SECTION 7.3 Procedure                         */
/*                                                               */
/*****************************************************************/


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL BEGIN DECLARE SECTION;
     char uid[19];
     char uidx[19];
EXEC SQL END DECLARE SECTION;

long SQLCODE;
int errcnt;
/* date_time declaration */
time_t cal;
long     ii;
long     flag;

main()
{
     strcpy(uid,"SCHANZLE");
     AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM HU.ECCO;
if (strncmp(uid,uidx,8) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
printf("SQL Test Suite, V6.0, Embedded C, dml080.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time (&cal);
printf ("\n Time Run:  %s\n", ctime (&cal));

/******************** BEGIN TEST0462 ********************/
flag = 1;

     printf("                  TEST0462 \n");
     printf("     SQLCODE = 100: DELETE with no data\n");
     printf(" Reference X3.135-89 section 7.3 <procedure>\n");     
     printf("     - - - - - - - - - - - - - - - - - - -\n\n");

     /* WHERE clause not satisfied - no data */
     SQLCODE = 0;
     printf ("DELETE FROM HU.STAFF WHERE EMPNUM = 'E7';\n");
     EXEC SQL DELETE FROM HU.STAFF WHERE EMPNUM = 'E7';
     printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
     if (SQLCODE != 100)
       flag = 0;

     /* DELETE all rows from empty table - no data (on second DELETE) */
     printf ("\n");
     printf ("DELETE FROM HU.STAFF;\n");
     EXEC SQL DELETE FROM HU.STAFF;
     printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
     if (SQLCODE != 0)
       flag = 0;
     printf ("\n");
     printf ("DELETE FROM HU.STAFF;\n");
     EXEC SQL DELETE FROM HU.STAFF;
     printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
     if (SQLCODE != 100)
       flag = 0;

     /* DELETE one row from empty table with WHERE clause - no data */
     printf ("\n");
     SQLCODE = 0;
     printf ("DELETE FROM HU.STAFF WHERE EMPNUM = 'E1';\n");
     EXEC SQL DELETE FROM HU.STAFF WHERE EMPNUM = 'E1';
     printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
     if (SQLCODE != 100)
       flag = 0;

     EXEC SQL ROLLBACK WORK;

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0462','pass','PC');
       }
     else
       {
          printf("\n\n       dml080.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0462','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0462 *********************/

/******************** BEGIN TEST0463 ********************/
flag = 1;

     printf("                  TEST0463 \n");
     printf("     SQLCODE = 100: UPDATE with no data\n");
     printf(" Reference X3.135-89 section 7.3 <procedure>\n");     
     printf("     - - - - - - - - - - - - - - - - - - -\n\n");

     /* WHERE clause not satisfied - no data */
     SQLCODE = 0;
     printf ("UPDATE HU.STAFF SET CITY = 'NOWHERE'\n");
     printf (" WHERE EMPNAME = 'NOBODY';\n");
     EXEC SQL UPDATE HU.STAFF
       SET CITY = 'NOWHERE'
       WHERE EMPNAME = 'NOBODY';
     printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
     if (SQLCODE != 100)
       flag = 0;

     /* global update of grade column - successful completion */
     printf ("\n");   
     SQLCODE = 100;
     printf ("UPDATE HU.STAFF SET GRADE = 11;\n");
     EXEC SQL UPDATE HU.STAFF
       SET GRADE = 11;
     printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
     if (SQLCODE != 0)
       flag = 0;

     /* UPDATE all rows from empty table - no data (after DELETE) */
     printf ("\n");
     SQLCODE = 100;
     printf ("DELETE FROM HU.STAFF;\n");
     EXEC SQL DELETE FROM HU.STAFF;
     printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
     if (SQLCODE != 0)
       flag = 0;
     printf ("\n");
     printf ("UPDATE HU.STAFF SET CITY = 'NOWHERE';\n");
     EXEC SQL UPDATE HU.STAFF SET CITY = 'NOWHERE';
     printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
     if (SQLCODE != 100)
       flag = 0;

     /* UPDATE rows with WHERE clause from empty table - no data */
     printf ("\n");
     SQLCODE = 0;
     printf ("UPDATE HU.STAFF SET CITY = 'NOWHERE'\n");
     printf (" WHERE EMPNAME = 'NOBODY';\n");
     EXEC SQL UPDATE HU.STAFF
       SET CITY = 'NOWHERE'
       WHERE EMPNAME = 'NOBODY';
     printf ("SQLCODE should be 100; its value is %ld\n", SQLCODE);
     if (SQLCODE != 100)
       flag = 0;

     EXEC SQL ROLLBACK WORK;

     if ( flag == 1 )
       {
          printf("\n\n                *** pass *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0463','pass','PC');
       }
     else
       {
          printf("\n\n       dml080.pc  *** fail *** \n");
          EXEC SQL INSERT INTO HU.TESTREPORT
          VALUES('0463','fail','PC');
          errcnt = errcnt + 1;
       }
     
     printf("===============================================\n\n");

     EXEC SQL COMMIT WORK;
/******************** END TEST0463 *********************/

     exit(errcnt);
}

/*  Embedded C (file " XTS723.PC ")                                         */

/* Copyright 1995 National Computing Centre Limited                          */
/* and Computer Logic R&D S.A                                                */
/* on behalf of the CTS5 SQL2 Project.                                       */
/* All rights reserved.                                          */
/* The CTS5 SQL2 Project is sponsored by the European Community. */
/*                                                               */
/* The National Computing Centre Limited and Computer Logic R&D  */
/* have given permission to NIST to distribute this program      */
/* over the World Wide Web in order to promote SQL standards.    */

/* DISCLAIMER:                                                   */
/* This program was reviewed by employees of NIST for            */
/* conformance to the SQL standards.                             */
/* NIST assumes no responsibility for any party's use of         */
/* this program.                                                 */


/*****************************************************************/
/*                                                               */
/*                  COMMENT SECTION                              */
/*                                                               */
/*  SQL VALIDATION TEST SUITE V6.0                               */
/*                                                               */
/*  XTS723.PC                                                   */
/*  WRITTEN BY: Nickos Backalidis                                */
/*                                                               */
/*  Access to CONSTRAINT_COLUMN_USAGE view                       */ 
/*                                                               */
/*  REFERENCES                                                   */
/*    21.2.24 -- CONSTRAINT_COLUMN_USAGE view                    */
/*    21.3.18 -- CHECK_COLUMN_USAGE base table                   */
/*    21.3.15 -- REFERENTIAL_CONSTRAINTS base table              */
/*    21.3.14 -- KEY_COLUMN_USAGE base table                     */
/*    21.3.13 -- TABLE_CONSTRAINTS base table                    */
/*    F#2     -- Basic information schema                        */
/*    F#3     -- Basic schema manipulation                       */
/*    F#34    -- Usage tables                                    */
/*                                                               */
/*  DATE LAST ALTERED  14/12/95 CTS5 Hand-over Test              */
/*                                                               */
/*  Cleanups and fixes by V. Kogakis 04/12/95:                   */
/*      Correct Header of test in printout                       */
/*       Respect length of strings in variable initialization.   */
/*                                                               */
/*  QA Status: QA CHECK                                          */
/*                                                               */
/*  Revised by DWF 1/29/96                                       */
/*    Removed extraneous SQL syntax                              */
/*    Fixed SDL transactions                                     */
/*    Copied corrected table definitions from xts722            */
/*    Removed status checks after cursor definition              */
/*    Corrected expected results per erratum                     */
/*    Fixed broken printout                                      */
/*****************************************************************/

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

void NOSUBCLASS();
void CHCKOK();

EXEC SQL BEGIN DECLARE SECTION;
 long SQLCODE;
 char SQLSTATE[6];
 char uid[19];
 char uidx[19];
 long coun1;
 char colnam[129];
 char connam[129];
EXEC SQL END DECLARE SECTION;
long norm1;
long norm2;
char ALPNUM[37];
char NORMSQ[6];
int errcnt;
/* date_time declaration */
time_t cal;
short i;
long flag;

main()
{
strcpy(uid,"CTS4              ");
AUTHID(uid);
strcpy(uidx,"not logged in, not");
EXEC SQL SELECT USER INTO :uidx FROM CTS1.ECCO;
EXEC SQL ROLLBACK WORK;
if (strncmp(uid,uidx,4) != 0)
   {
    printf("ERROR: User %s expected.  User %s connected\n",uid,uidx);
    exit(99);
   }
errcnt = 0;
strcpy(ALPNUM,"01234ABCDEFGH56789IJKLMNOPQRSTUVWXYZ");

printf("SQL Test Suite, V6.0, Embedded C, xts723.pc\n");
printf("59-byte ID\n");
printf("TEd Version #\n");
/* date_time print */
time(&cal);
printf("\n Time Run:  %s\n", ctime(&cal));

/******************** BEGIN TEST7023 ********************/
 flag = 1;
 printf("                  TEST7023\n");
 printf("   Access to CONSTRAINT_COLUMN_USAGE view \n");
 printf(" References \n");
 printf("   21.2.24 -- CONSTRAINT_COLUMN_USAGE view \n");
 printf("   21.3.18 -- CHECK_COLUMN_USAGE base table \n");
 printf("   21.3.15 -- REFERENTIAL_CONSTRAINTS base table \n");
 printf("   21.3.14 -- KEY_COLUMN_USAGE base table\n");
 printf("   21.3.13 -- TABLE_CONSTRAINTS base table \n");
 printf("   F#2     -- Basic information schema \n");
 printf("   F#3     -- Basic schema manipulation \n");
 printf("   F#34    -- Usage tables \n");
 printf("   - - - - - - - - - - - - - - - - - - -\n\n");

/* initialise error reporting variables */
SQLCODE = -1;
strcpy(SQLSTATE,"xxxxx");

/* initialise host variable */
/* we expect a zero so initiliase it to a value <> 0 */
coun1 = 9;

/* Access the CONSTRAINT_COLUMN_USAGE_VIEW */
printf("SELECT COUNT(*) INTO :coun1\n");
printf("FROM INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE\n");
printf("WHERE TABLE_SCHEMA = 'CTS4';\n");
EXEC SQL SELECT COUNT(*) INTO :coun1
         FROM INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE
         WHERE TABLE_SCHEMA = 'CTS4';
CHCKOK();
printf("coun1 should be 0 its value is : %ld\n",coun1);
if (coun1 != 0)
  flag = 0;
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("CREATE TABLE TAB722a \n");
printf("(COLNUM1 NUMERIC(5),\n");
printf("COLNUM2 NUMERIC(5),\n");
printf("COLSTR1 CHAR(3),\n");
printf("CONSTRAINT 722ACONS1 PRIMARY KEY (COLSTR1),\n");
printf("CONSTRAINT 722ACONS2 CHECK(COLNUM2 > 0));\n");
EXEC SQL CREATE TABLE TAB722a 
 (COLNUM1 NUMERIC(5),
  COLNUM2 NUMERIC(5),
  COLSTR1 CHAR(3),
  CONSTRAINT 722ACONS1 PRIMARY KEY (COLSTR1),
  CONSTRAINT 722ACONS2 CHECK(COLNUM2 > 0));
CHCKOK();  
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

printf("CREATE TABLE TAB722b\n");
printf("( C1 CHAR(3),\n");
printf("  C2 CHAR(10),\n");
printf("  CONSTRAINT 722B FOREIGN KEY(C1)\n"); 
printf("  REFERENCES TAB722a(COLSTR1);\n");  
EXEC SQL CREATE TABLE TAB722b
         ( C1 CHAR(3),
           C2 CHAR(10),
           CONSTRAINT 722B FOREIGN KEY(C1) 
           REFERENCES TAB722a(COLSTR1));  
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* Contents of CONSTRAINT_COLUMN_USAGE are now: */
/* TAB722A.COLSTR1  722ACONS1 */
/* TAB722A.COLNUM2  722ACONS2 */
/* TAB722A.COLSTR1  722B */
/* The last row would be TAB722B.C1 prior to the erratum. */
 
/* for test 7023 use an ordered cursor and access the */
/* CONSTRAINT_COLUMN_USAGE view to determine how many */
/* rows are present after the two tables were created */
printf("DECLARE F7023 CURSOR FOR SELECT\n");
printf("COLUMN_NAME,CONSTRAINT_NAME\n");
printf("FROM INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE\n");
printf("ORDER BY CONSTRAINT_NAME;\n\n");
EXEC SQL DECLARE F7023 CURSOR FOR SELECT 
         COLUMN_NAME,CONSTRAINT_NAME
         FROM INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE
         ORDER BY CONSTRAINT_NAME;

printf("OPEN F7023;\n");
EXEC SQL OPEN F7023;
CHCKOK();
printf("\n");

/* init host vars */
for(i = 0; i < 128; i++)
{
  colnam[i] = 'x';
  connam[i] = 'x';
}
colnam[128] = '\0';
connam[128] = '\0';

/* now start fetching rows, three in total */
/* fetch first row */
printf("FETCH F7023 INTO :colnam,:connam;\n");
EXEC SQL FETCH F7023 INTO :colnam,:connam;
CHCKOK();
printf("COLUMN_NAME     should be COLSTR1;  it is %s\n",colnam);
printf("CONSTRAINT_NAME should be 722ACONS1; it is %s\n",connam);
if (strncmp(colnam,"COLSTR1",7)!=0 || strncmp(connam,"722ACONS1",9)!=0)
    flag = 0;
printf("\n");

for(i = 0; i < 128; i++)
{
  colnam[i] = 'x';
  connam[i] = 'x';
}
colnam[128] = '\0';
connam[128] = '\0';

/* fetch second row */
printf("FETCH F7023 INTO :colnam,:connam;\n");
EXEC SQL FETCH F7023 INTO :colnam,:connam;
CHCKOK();
printf("COLUMN_NAME     should be COLNUM2;  it is %s\n",colnam);
printf("CONSTRAINT_NAME should be 722ACONS2; it is %s\n",connam);
if (strncmp(colnam,"COLNUM2",7)!=0 || strncmp(connam,"722ACONS2",9)!=0)
    flag = 0;
printf("\n");

for(i = 0; i < 128; i++)
{
  colnam[i] = 'x';
  connam[i] = 'x';
}
colnam[128] = '\0';
connam[128] = '\0';

/* fetch third and final row */
printf("FETCH F7023 INTO :colnam,:connam;\n");
EXEC SQL FETCH F7023 INTO :colnam,:connam;
CHCKOK();
printf("COLUMN_NAME     should be COLSTR1;  it is %s\n",colnam);
printf("CONSTRAINT_NAME should be 722B; it is %s\n",connam);
if (strncmp(colnam,"COLSTR1",7)!=0 || strncmp(connam,"722B",4)!=0)
    flag = 0;
printf("\n");

/* end fetches */
printf("CLOSE F7023;\n");
EXEC SQL CLOSE F7023;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* Drop table TAB722A */
printf("DROP TABLE TAB722a CASCADE;\n");
EXEC SQL DROP TABLE TAB722a CASCADE;     
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

/* By Dropping table TAB722a the foreign key constraint */
/* declared in TAB722b should be dropped */
/* now access the CONSTRAINT_COLUMN_USAGE VIEW */
coun1 = 5;
printf("SELECT COUNT(CONSTRAINT_NAME)\n");
printf("INTO :coun1\n");
printf("FROM INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE;\n");
EXEC SQL SELECT COUNT(CONSTRAINT_NAME)
         INTO :coun1
         FROM INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE;
CHCKOK();
printf("coun1 should be 0 it is %ld\n", coun1);
if (coun1 != 0)
    flag = 0;
printf("\n");

printf("ROLLBACK WORK;\n");
EXEC SQL ROLLBACK WORK;
CHCKOK();
printf("\n");

/* restore database*/
printf("DROP TABLE TAB722b CASCADE;\n");
EXEC SQL DROP TABLE TAB722b CASCADE;
CHCKOK();
printf("\n");

printf("COMMIT WORK;\n");
EXEC SQL COMMIT WORK;
CHCKOK();
printf("\n");

  /* record results */
     if ( flag == 1 )
       {
          printf("\n\n       xts723.pc  *** pass *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7023','pass','PC');
       }
     else
       {
          printf("\n\n       xts723.pc  *** fail *** \n");
          EXEC SQL INSERT INTO CTS1.TESTREPORT
          VALUES('7023','fail','PC');
          errcnt = errcnt + 1;
       }

     printf("========================================\n\n");

EXEC SQL COMMIT WORK;

/******************** END TEST7023 *********************/   

    exit(errcnt);
}

void
NOSUBCLASS()
{
/* This routine replaces valid implementation-defined       */
/* subclasses with 000.  This replacement equates valid     */
/* implementation-defined subclasses with the 000 value     */
/* expected by the test case; otherwise the test will fail. */
/* After calling NOSUBCLASS, NORMSQ will be tested          */
/*                           SQLSTATE will be printed.      */

strcpy (NORMSQ,SQLSTATE);

norm1 = 2;
     /* subclass begins in position 3 of char array NORMSQ */
for (norm2 = 13; norm2 < 37; norm2++)
     /* valid subclass begins with 5-9, I-Z, end of ALPNUM table */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }
if (strncmp (NORMSQ, SQLSTATE, 5) == 0)
     goto P213;
/* Quit if NORMSQ is unchanged.  Subclass is not impl.-def. */
/* Changed NORMSQ means implementation-defined subclass,    */
/* so proceed to zero it out, if valid (0-9,A-Z)            */

norm1 = 3;
     /* examining position 4 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

norm1 = 4;
     /* examining position 5 of char array NORMSQ */
for (norm2 = 0; norm2 < 37; norm2++)
     /* valid characters are 0-9, A-Z */
   {
     if (NORMSQ[norm1] == ALPNUM[norm2])
         NORMSQ[norm1] = '0';
   }

/* implementation-defined subclasses are allowed for warnings */
/* (class = 01).  These equate to successful completion */
/* SQLSTATE values of 00000. */
/* Reference SQL-92 4.28 SQL-transactions, paragraph 2 */

if (NORMSQ[0] == '0' && NORMSQ[1] == '1')
     NORMSQ[1] = '0';
P213:
    return;

}

/* Test SQLCODE and SQLSTATE for normal completion. */

void
CHCKOK ()
{
  printf ("SQLCODE should be 0; its value is %ld\n", SQLCODE);
  SQLSTATE[5] = '\0';
  printf ("SQLSTATE should be 00000; its value is %s\n", SQLSTATE);

  NOSUBCLASS();
if (SQLCODE != 0 || strncmp (NORMSQ, "00000", 5) != 0)
  flag = 0;
if (strncmp (NORMSQ, "00000", 5) == 0 && strncmp (NORMSQ, SQLSTATE, 5) != 0)
  printf ("Valid implementation-defined SQLSTATE accepted.\n");
}
